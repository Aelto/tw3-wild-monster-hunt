class WMH_MedallionForge extends WMH_InteractiveObject {
  private var selected_medallion: WMH_Medallion;
  private var prompt: WMH_ForgeYesNoPrompt;

  default object_name_loc_key = 'wmh_trophy_medallion_forge';

  public function onAllowedInteraction(
    action: string,
    activator: CEntity
  ) {
    WMHTUTOFACT(
      'WMH_MedallionForge',
      GetLocStringByKeyExt("wmh_tutorial_medallion_forge_title"),
      GetLocStringByKeyExt("wmh_tutorial_medallion_forge_description")
    );

    this.prompt = new WMH_ForgeYesNoPrompt in this;
    prompt.forge = this;
    prompt.display();
  }

  // called after the YES/NO prompt is answered YES
  public function continueMeldingProcess() {
    var trophy: SItemUniqueId = GetWitcherPlayer()
      .GetHorseManager()
      .GetItemInSlot(EES_HorseTrophy);

    var inventory: CInventoryComponent = GetWitcherPlayer()
      .GetHorseManager()
      .GetInventoryComponent();

    if (!inventory.ItemHasTag(trophy, 'WMH_Medallion')) {
      WMHHUD(GetLocStringByKeyExt("wmh_witcher_medallion_forge_attempt_item_invalid"));

      return;
    }

    var reagents_count: int = thePlayer.inv
      .GetItemQuantityByName('modwmh_melding_reagent');

    if (reagents_count < 1) {
      WMHHUD(GetLocStringByKeyExt("wmh_witcher_medallion_forge_attempt_reagent_needed"));

      return;
    }

    // the reagent is removed after the item selection

    this.selected_medallion = (new WMH_Medallion in this)
      .init(inventory, trophy);
    this.openItemSelectionMenu();
  }

  
  private function openItemSelectionMenu() {
    var all_tags: array<name> = GetTags();
    var first_tag: name = all_tags[0];
    
    var item_tags: array<name>;
    item_tags.PushBack('WMH_RuneOfPower');

    WMH_displayItemSelection(
      first_tag,
      this.GetInventory(),
      item_tags,
      true
    );

    AddTimer( 'finishMeldingProcess', 0.1 );
  }

  timer function finishMeldingProcess(delta: float , id: int) {
    var runes: array<SItemUniqueId> = this.GetInventory().GetItemsByTag('WMH_RuneOfPower');

    var inventory: CInventoryComponent = this.GetInventory();

    for rune: SItemUniqueId in runes {
      this.selected_medallion.appendPerk(WMH_runeGetPerk(inventory, rune));
      thePlayer.inv.RemoveItemByName('modwmh_melding_reagent', 1);
    }

    // consume the runes
    inventory.RemoveAllItems();
    theSound.SoundEvent("gui_inventory_weapon_attach");
    WMH_updateDecorationPerks();
  }
}

class WMH_ForgeYesNoPrompt extends WMH_YesNoPrompt {
  public var forge: WMH_MedallionForge;

  public function title(): string {
    return GetLocStringByKeyExt("wmh_witcher_medallion_forge_yesno_title");
  }

  public function description(): string {
    var reagent: string = GetLocStringByKeyExt('wmh_melding_reagent');
    var rune: string = GetLocStringByKeyExt('wmh_rune_of_power');

    return StrReplace(
      StrReplace(
        GetLocStringByKeyExt("wmh_witcher_medallion_forge_yesno_description"),
        "{{reagent}}",
        reagent
      ),
      "{{rune}}",
      rune
    );
  }

  public function onResponse(accepted: bool) {
    if (accepted) {
      this.forge.continueMeldingProcess();
    }
  }
}
