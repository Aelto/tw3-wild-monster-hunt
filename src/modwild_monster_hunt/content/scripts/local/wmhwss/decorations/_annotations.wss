/*
  NOTES:
  - temporary skills are always considered equipped
  - temporary skills don't seem to trigger the passive abilities
    - if a skill is already learned and equipped and a temporary level is added
      to it then the passive bonus won't change because of the temporary skill
    - if needed have the runes provide passive abilities on top of the perks
  - temporary skills are displayed in orange in the skills UI
  - 
*/

@wrapMethod(W3PlayerAbilityManager)
function IsSkillEquipped(skill: ESkill): bool {
  return wrappedMethod(skill)
      || thePlayer.wmh.storage.decorations.decoration_perks.Contains(skill);
}

@wrapMethod(W3PlayerAbilityManager)
function CanUseSkill(skill : ESkill) : bool {
  return wrappedMethod(skill)
      || thePlayer.wmh.storage.decorations.decoration_perks.Contains(skill);
}

@wrapMethod(W3PlayerAbilityManager)
function GetSkillLevel(skill: ESkill): int {
  var count: int;

  for perk: ESkill in thePlayer.wmh.storage.decorations.decoration_perks {
    count += (skill == perk) as int;
  }

  return wrappedMethod(skill) + count;
}

@wrapMethod(W3PlayerAbilityManager)
function GetBoughtSkillLevel(skill: ESkill): int {
  var count: int;

  for perk: ESkill in thePlayer.wmh.storage.decorations.decoration_perks {
    count += (skill == perk) as int;
  }

  return wrappedMethod(skill) + count;
}

@addMethod(W3PlayerAbilityManager)
function WMH_DECO_clearDecorationPerks() {
  // commented out as we don't add temporary skills anymore, instead we wrap
  // all getter methods about skills and modify values based on the decorations
  // storage on top of the vanilla results

  // for perk: ESkill in thePlayer.wmh.storage.decorations.decoration_perks {
  //   // replicate what the vanilla code does
  //   this.skills[perk].level -= 1;
  //   this.skills[perk].isTemporary = false;

  //   this.pathPointsSpent[this.skills[perk].skillPath] -= 1;

  //   if (this.skills[perk].level < 1) {
  //     var index: int = this.GetSkillSlotID(perk);

  //     if (index >= 0) {
  //       this.UnequipSkill(index);
  //     }
  //   }
  // }
}

@addMethod(CR4Player)
function WMH_DECO_clearDecorationPerks() {
  // if (this.abilityManager && this.abilityManager.IsInitialized()) {
  //   (this.abilityManager as W3PlayerAbilityManager)
  //     .WMH_DECO_clearDecorationPerks();

  //   (this.abilityManager as W3PlayerAbilityManager)
  //     .WMH_DECO_clearDecorationPerks();
  // }

  thePlayer.wmh.storage.decorations.decoration_perks.Clear();
}

@wrapMethod(W3PlayerWitcher)
function EquipItemInGivenSlot(
  item: SItemUniqueId,
  slot: EEquipmentSlots,
  ignoreMounting: bool,
  optional toHand: bool
): bool {
  var result: bool = wrappedMethod(item, slot, ignoreMounting, toHand);
  WMH_updateDecorationPerks();
  return result;
}

@wrapMethod(W3HorseManager)
function EquipItem(id: SItemUniqueId): SItemUniqueId {
  var result: SItemUniqueId = wrappedMethod(id);
  WMH_updateDecorationPerks();
  return result;
}

@wrapMethod(W3HorseManager)
function UnequipItem(slot: EEquipmentSlots): SItemUniqueId {
  var result: SItemUniqueId = wrappedMethod(slot);
  WMH_updateDecorationPerks();
  return result;
}

@wrapMethod(W3TooltipComponent)
function GetBaseItemData( 
  item: SItemUniqueId, 
  itemInvComponent: CInventoryComponent,
  optional isShopItem: bool,
  optional compareWithItem: SItemUniqueId,
  optional compareItemInv: CInventoryComponent
): CScriptedFlashObject {
  var object: CScriptedFlashObject = wrappedMethod(
    item,
    itemInvComponent,
    isShopItem,
    compareWithItem,
    compareItemInv
  );

  if (itemInvComponent.ItemHasTag(item, 'WMH_Medallion')) {
    var medallion: WMH_Medallion = (new WMH_Medallion in this)
      .init(itemInvComponent, item);

    var perks: array<ESkill> = medallion.getPerks();
    var stats_list: CScriptedFlashArray = object.CreateFlashArray();
    for perk: ESkill in perks {
      var stat_object: CScriptedFlashObject = object.CreateFlashObject();

      var src: string = "img://" + thePlayer.GetSkillIconPath(perk);
      var icon: string = "<img src='" + src + "' width='24' height='24' />";

      var perk_name: string = GetLocStringByKeyExt(
        thePlayer.GetSkillLocalisationKeyName(perk)
      );

      stat_object.SetMemberFlashString("id", "wmh_perk_id");
      stat_object.SetMemberFlashString("name", "+1 " + perk_name);
      stat_object.SetMemberFlashString("color", "#E1E1E1");				
      stat_object.SetMemberFlashString("value", icon);
      stat_object.SetMemberFlashString("valuePrefix", "");
      stat_object.SetMemberFlashBool("isPercentageValue", false);
      stat_object.SetMemberFlashNumber("floatValue", 1.0);
      stats_list.PushBackFlashObject(stat_object);
    }

    object.SetMemberFlashArray("StatsList", stats_list);
  }

  if (itemInvComponent.ItemHasTag(item, 'WMH_RuneOfPower')) {
    var perk: ESkill = WMH_runeGetPerk(itemInvComponent, item);

    WMHINFO("tooltip: perk = " + perk);

    var stats_list: CScriptedFlashArray = object.CreateFlashArray();
    var stat_object: CScriptedFlashObject = object.CreateFlashObject();

    var src: string = "img://" + thePlayer.GetSkillIconPath(perk);
    var icon: string = "<img src='" + src + "' width='24' height='24' />";

    var perk_name: string = GetLocStringByKeyExt(
      thePlayer.GetSkillLocalisationKeyName(perk)
    );

    var perk_description: string = GetLocStringByKeyExt(
      thePlayer.GetSkillLocalisationKeyDescription(perk)
    );

    stat_object.SetMemberFlashString("id", "wmh_perk_id");
    stat_object.SetMemberFlashString(
      "name",
      "+1 " + perk_name
    );
    stat_object.SetMemberFlashString("color", "#E1E1E1");				
    stat_object.SetMemberFlashString("value", icon);
    stat_object.SetMemberFlashString("valuePrefix", "");
    stat_object.SetMemberFlashBool("isPercentageValue", false);
    stat_object.SetMemberFlashNumber("floatValue", 1.0);
    stats_list.PushBackFlashObject(stat_object);

    object.SetMemberFlashArray("StatsList", stats_list);
  }

  return object;
}

// flashObject.SetMemberFlashString( "iconPath",  _inv.GetItemIconPathByUniqueID(item) );

@wrapMethod(W3GuiSelectItemComponent)
function SetInventoryFlashObjectForItem(
  item: SItemUniqueId,
  out object: CScriptedFlashObject
) {
  wrappedMethod(item, object);

  if (this._inv.ItemHasTag(item, 'WMH_RuneOfPower')) {
    var perk: ESkill = WMH_runeGetPerk(this._inv, item);

    var src: string = "img://" + thePlayer.GetSkillIconPath(perk);
    var perk_name: string = GetLocStringByKeyExt(
      thePlayer.GetSkillLocalisationKeyName(perk)
    );

    object.SetMemberFlashString("iconPath", thePlayer.GetSkillIconPath(perk));
    object.SetMemberFlashString(
      "itemName",
      "+1 to " + perk_name
    );
  }
}

function WMH_updateDecorationPerks() {
  // 1) clear decoration perks,
  thePlayer.WMH_DECO_clearDecorationPerks();

  // 2) iterate through items and apply decoration perks back
  WMH_grantPerksFromEquippedItems();
}

function WMH_grantPerksFromEquippedItems() {
  var witcher: W3PlayerWitcher = GetWitcherPlayer();

  var trophy: SItemUniqueId = GetWitcherPlayer()
    .GetHorseManager()
    .GetItemInSlot(EES_HorseTrophy);
  
  var inventory: CInventoryComponent = GetWitcherPlayer()
    .GetHorseManager()
    .GetInventoryComponent();

  if (!inventory.ItemHasTag(trophy, 'WMH_Medallion')) {
    return;
  }

  var medallion: WMH_Medallion = (new WMH_Medallion in thePlayer)
    .init(inventory, trophy);

  var perks: array<ESkill> = medallion.getPerks();
  for perk: ESkill in perks {
    WMH_DECO_addDecorationPerk(perk);
  }
}

function WMH_DECO_addDecorationPerk(skill: ESkill) {
  var is_temporary: bool = true;

  WMHINFO("WMH_DECO_addDecorationPerk, skill = " + skill);

  // thePlayer.AddSkill(skill, is_temporary);
  thePlayer.wmh.storage.decorations.decoration_perks.PushBack(skill);
}