/// When interacted with:
/// - 
statemachine class WMH_HuntProvisions extends WMH_CampUpgradeBase {
  default level_fact = 'wmh_camp_upgrade_provisions';
  default upgrade_title = "wmh_camp_upgrade_provision_title";
  default upgrade_description = "wmh_camp_upgrade_provision_description";

  default upgrade_cost_base = 25;
  default upgrade_cost_per_level = 50;

  private var previous_completed_contracts_count: int;

  protected function onApply(level: int) {
    var devices: int = this.getAvailableTrapDevices(level as float);
    var containers: int = this.getAvailableLureContainers(level as float);
    var waters: int = this.getAvailableWater(level as float);
    var apples: int = waters;

    if (devices + containers + waters <= 0) {
      return WMHHUD(GetLocStringByKeyExt("wmh_hunt_provisions_on_apply_no_stock"));
    }

    this.setPreviousCompletedContractsCount(this.getCompletedContracts());

    var provider: WMH_RewardProvider = new WMH_RewardProvider in this;

    provider.startGroup(this.title())
      .appendItem('modwmh_trap_device', devices)
      .appendItem('modwmh_lure_container', containers)
      .appendItem('Bottled water', waters)
      .appendItem('Apple', apples);

    provider.transferItems(thePlayer.GetInventory());
    WMHPOPUP(provider.toHtml(thePlayer.GetInventory()));
  }

  private function getCompletedContracts(): int {
    var storage: WMH_Storage = WMH_getStorage();

    if (!storage) {
      return 0;
    }

    return storage.contract.completed_contracts_count;
  }

  private function getPreviousCompletedContractsCount(): int {
    return Max(
      0,
      FactsQueryLatestValue('wmh_camp_upgrade_provisions_completed_contracts_count')
    );
  }

  private function setPreviousCompletedContractsCount(value: int) {
    FactsSet('wmh_camp_upgrade_provisions_completed_contracts_count', value);
  }

  private function getCompletedContractsSinceLastInteraction(): int {
    var previous: int = this.getPreviousCompletedContractsCount();

    return Max(0, this.getCompletedContracts() - previous);
  }

  private function getAvailableTrapDevices(level: float): int {
    return RoundF(this.getCompletedContractsSinceLastInteraction() * 0.1 * level);
  }

  private function getAvailableLureContainers(level: float): int {
    return RoundF(this.getCompletedContractsSinceLastInteraction() * 0.2 * level);
  }

  private function getAvailableWater(level: float): int {
    return RoundF(
      this.getCompletedContractsSinceLastInteraction()
      * (1 + level * 0.25)
  );
  }
}
