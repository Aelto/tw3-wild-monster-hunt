

abstract class WMH_CampUpgradeBase extends CGameplayEntity {
  protected editable var level_fact: name;
  hint level_fact = "name of the fact that should be used to get the level of this upgrade";

  protected editable var upgrade_cost_base: int;
  hint upgrade_cost_base = "crowns needed for the first level";
  default upgrade_cost_base = 50;

  protected editable var upgrade_cost_per_level: int;
  hint upgrade_cost_per_level = "additional crowns needed to upgade for each levels already unlocked";
  default upgrade_cost_per_level = 50;

  private editable var upgrade_title: string;
  hint upgrade_title = "name of the upgrade, to describe it";

  private editable var upgrade_description: string;
  hint upgrade_description = "description of what the upgrade does when interacting with";

  private editable var oneliner_offset: Vector;

  private var prompt: WMH_CampUpgradeYesNoPrompt;
  private var oneliner: WMH_GameplayOnelinerEntity;

  event OnInteraction(actionName: string, activator: CEntity) {
    WMHINFO("on interact: " + actionName);
    if (actionName != "Use") {
      return false;
    }

    if (this.isUnlocked() && !theGame.IsFocusModeActive()) {
      this.tryApply();
    }
    else {
      this.prompt = new WMH_CampUpgradeYesNoPrompt in this;
      prompt.entity = this;
      prompt.display();
    }
  }

  event OnInteractionActivated(
    interactionComponentName: string,
    activator: CEntity
  ) {
    if (activator != thePlayer) {
      return false;
    }

    WMHINFO("OnInteractionActivated");

    if (!this.oneliner) {
      this.setupOneliner();
    }
    else {
      this.oneliner.register();
    }
  }

  event OnInteractionDeactivated(
    interactionComponentName: string,
    activator: CEntity
  ) {
    if (activator != thePlayer) {
      return false;
    }

    WMHINFO("OnInteractionDeactivated");

    if (this.oneliner) {
      this.oneliner.unregister();
    }
  }

  event OnInteractionActivationTest(
    interactionComponentName: string,
    activator: CEntity
  ) {
    if (activator != thePlayer) {
      return false;
    }

    return interactionComponentName == "interactionUse";
  }


  public function isUnlocked(): bool {
    return this.getLevel() > 0;
  }

  public function tryApply() {
    var level: int = this.getLevel();

    if (level <= 0) {
      return;
    }

    this.onApply(level);
  }

  public function tryUpgrade(): bool {
    var cost: int = this.getUpgradeCost();

    if (thePlayer.GetMoney() < cost) {
      WMHHUD(GetLocStringByKeyExt("wmh_insufficient_funds"));
      return false;
    }

    WMH_transferMoneyToSmithMerchant(cost);
    theSound.SoundEvent("gui_inventory_buy");
    this.addLevel();
    this.onUpgrade(cost);
    this.setupOneliner();

    return true;
  }

  public function getUpgradeCost(): int {
    return this.upgrade_cost_per_level * this.getLevel()
      + this.upgrade_cost_base;
  }


  public function getLevel(): int {
    return FactsQueryLatestValue(this.level_fact);
  }

  public function title(): string {
    return this.upgrade_title;
  }

  public function description(): string {
    return this.upgrade_description;
  }

  protected function addLevel() {
    FactsSet(
      this.level_fact,
      this.getLevel() + 1
    );
  }

  protected function setupOneliner() {
    if (this.oneliner) {
      this.oneliner.unregister();
    }

    this.oneliner = WMH_gameplayOnelinerEntity(
      StrReplace(
        StrReplace(
          StrReplace(
            GetLocStringByKeyExt("wmh_camp_upgrade_oneliner"),
            "{{title}}",
            this.title()
          ),
          "{{level}}",
          this.getLevel()
        ),
        "{{description}}",
        this.description()
      ),
      this
    );

    this.oneliner.offset = this.oneliner_offset;
    this.oneliner.visible_outside_focus_mode = true;
  }

  // OVERRIDE to perform custom action when entity was successfully upgraded
  protected function onUpgrade(money_spent: int) {
    theSound.SoundEvent('gui_inventory_repair');
    WMHHUD(
      StrReplace(
        StrReplace(
          GetLocStringByKeyExt("wmh_camp_upgrade_on_upgrade_hud"),
          "{{title}}",
          this.title()
        ),
        "{{level}}",
        this.getLevel()
      )
    );
  }

  // OVERRIDE to apply bonus when used
  protected function onApply(level: int) {
    theSound.SoundEvent("gui_character_synergy_effect");
  }
}

class WMH_CampUpgradeYesNoPrompt extends WMH_YesNoPrompt {
  var entity: WMH_CampUpgradeBase;

  public function title(): string {
    return StrReplace(
      GetLocStringByKeyExt("wmh_camp_upgrade_yesno_prompt_title"),
      "{{title}}",
      this.entity.title()
    );
  }

  public function description(): string {
    var price: int = this.entity.getUpgradeCost();

    return StrReplace(
      StrReplace(
        GetLocStringByKeyExt("wmh_camp_upgrade_yesno_prompt_description"),
        "{{price}}",
        price
      ),
      "{{new_level}}",
      (this.entity.getLevel() + 1)
    );
  }

  public function onResponse(accepted: bool) {
    if (accepted) {
      this.entity.tryUpgrade();
    }
  }
}