// // Proof Of Concept
// // Ability to control where roach goes without any input from the player, could
// // be used to automatically make her move to the target a bit like MH:Wilds does
// // with its mount.
@addField(W3HorseComponent)
var wmh_horse_override: WMH_HorseOverride;

@wrapMethod(W3HorseComponent)
function OnInit() {
  this.wmh_horse_override = (new WMH_HorseOverride in this).init(this);

  return wrappedMethod();
}

@wrapMethod(W3HorseComponent)
function OnMountFinished(entity: CEntity) {
  // this.wmh_horse_override.start();
  return wrappedMethod(entity);
}

@wrapMethod(W3HorseComponent)
function OnDismountStarted(entity: CEntity) {
  // this.wmh_horse_override.end();
  return wrappedMethod(entity);
}


@wrapMethod(W3HorseComponent)
function InternalSetSpeed(value: float) {
  if (this.IsPlayerHorse() && this.wmh_horse_override.is_autowalking) {

  }
  else {
    wrappedMethod(value);
  }
}

@wrapMethod(W3HorseComponent)
function InternalSetRotation(value: float) {
  if (this.IsPlayerHorse() && this.wmh_horse_override.is_autowalking) {

  }
  else {
    wrappedMethod(value);
  }
}


@addMethod(W3HorseComponent)
function wmhSetRotation(value: float) {
  this.SetVariable( 'rotation', value );
}

@addMethod(W3HorseComponent)
function wmhSetDirection(value: float) {
  this.SetVariable( 'direction', value );
}

@addMethod(W3HorseComponent)
function wmhSetSpeed(value: float) {
  (GetEntity() as CActor).GetMovingAgentComponent().SetGameplayRelativeMoveSpeed( value ); 
  SetVariable('speed', value);
}

statemachine class WMH_HorseOverride {
  private var component: W3HorseComponent;

  private var autowalk_destination: Vector;
  
  public var is_autowalking: bool;

  public function init(component: W3HorseComponent): WMH_HorseOverride {
    this.component = component;

    return this;
  }

  public function start() {
    this.is_autowalking = true;

    // if (this.GetCurrentStateName() == 'Idle') {
    //   this.GotoState('Riding');
    // }
    // this.GotoState('Riding');
  }

  public function end() {
    this.is_autowalking = false;
    // if (this.GetCurrentStateName() == 'Riding') {
    //   this.GotoState('Idle');
    // }
  }

  public function moveTo(destination: Vector) {
    this.setSpeed(2.0);

    var direction: float = VecHeading(
      destination - component.GetEntity().GetWorldPosition()
    );
    
    this.setRotation(direction);
  }

  public function setSpeed(value: float) {
    this.component.wmhSetSpeed(value);
  }

  public function setRotation(value: float) {
    this.component.wmhSetDirection(value);
    // this.component.wmhSetRotation(value);

  }
}

state Riding in WMH_HorseOverride {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.Riding_main();
  }

  entry function Riding_main() {
    // Sleep(5.0);


    // while (true) {
    //   parent.setRotation(0);
    //   parent.setSpeed(3);
    //   Sleep(5.0);
    //   parent.setSpeed(0);
    //   parent.setRotation(0.5);
    // }
  }
}

state Idle in WMH_HorseOverride {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.Idle_main();
  }

  entry function Idle_main() {
    parent.is_autowalking = false;
  }
}