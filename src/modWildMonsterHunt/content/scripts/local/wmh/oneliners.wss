/// Base class for oneliners that need a common set of settings for gameplay
/// 3D markers.
class WMH_GameplayOneliner extends SU_Oneliner {
  function getVisible(player_position: Vector): bool {
    return theGame.IsFocusModeActive() && super.getVisible(player_position);
  }
}

class WMH_GameplayOnelinerEntity extends SU_OnelinerEntity {
  function getVisible(player_position: Vector): bool {
    return theGame.IsFocusModeActive() && super.getVisible(player_position);
  }
}

/// A oneliner that sits to the side of an entity
class WMH_GameplayOnelinerEntitySide extends WMH_GameplayOnelinerEntity {
  public function WMH_OnelinerEntitySide(
    entity: CEntity
  ): WMH_GameplayOnelinerEntitySide {
    this.offset = Vector(1.0);

    return this;
  }
}

function WMH_gameplayOneliner(
  text: string,
  position: Vector
): WMH_GameplayOneliner {
  var oneliner: WMH_GameplayOneliner;

  oneliner = new WMH_GameplayOneliner in thePlayer;
  oneliner.text = text;
  oneliner.position = position;
  oneliner.register();

  return oneliner;
}

function WMH_gameplayOnelinerEntity(
  text: string,
  entity: CEntity
): WMH_GameplayOnelinerEntity {
  var oneliner: WMH_GameplayOnelinerEntity;

  oneliner = new WMH_GameplayOnelinerEntity in thePlayer;
  oneliner.text = text;
  oneliner.entity = entity;
  oneliner.register();

  return oneliner;
}
