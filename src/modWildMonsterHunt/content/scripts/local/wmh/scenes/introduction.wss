exec function wmhsceneintroduction() {
  var player: CR4Player = thePlayer;
  player.wmh_scene = new WMH_SceneIntroduction in player;
  player.wmh_scene.start();
}

quest function wmhsceneintroduction_start() {
  var player: CR4Player = thePlayer;
  player.wmh_scene = new WMH_SceneIntroduction in player;
  player.wmh_scene.start();
}

@addField(CR4Player) 
var wmh_scene: WMH_SceneIntroduction;

statemachine class WMH_SceneIntroduction {
  var milestones: array<WMH_CameraMilestone>;
  var processing: array<WMH_CameraMilestone>;


  public function start() {
    var world: string = theGame.GetWorld().GetDepotPath();

    var cancel: bool = FactsDoesExist("wmh_scene_introduction")
      || world != "levels\wmh_lv1\wmh_lv1.w2w";

    if (cancel) {
      return;
    }

    this.GotoState('Starting');
  }

  latent function onStart() {
    theGame.FadeOut(0.5);
    FactsSet('wmh_hunt_disabled', 1);
    var can_play: bool = this.setupScene();
    if (can_play) {
      theInput.SetContext( 'Scene' );
      theGame.SetIsDialogOrCutscenePlaying(true);
      hud.OnCutsceneStarted();

      todo!("no music, REDkit sound events are broken atm")
      // theSound.SoundEvent("play_music_kaer_morhen");


      this.playScenePlayer();

      var hud : CR4ScriptedHud;
      theInput.SetContext(thePlayer.GetExplorationInputContext());
      theGame.SetIsDialogOrCutscenePlaying(false);

      hud = theGame.GetHud() as CR4ScriptedHud;
      if(hud) {
        hud.OnCutsceneEnded();
      }
    }
    else {
      theGame.FadeInAsync(0.8);
    }

    this.endScene();
  }

  latent function endScene() {
    FactsSet('wmh_scene_introduction', 1);
    FactsSet('q001_nightmare_ended', 1);
    FactsSet('tut_killed_ghouls', 1);
    FactsSet('q001_ghouls_dead', 1);
    FactsSet('tut_before_ghoul_fight', 1);
    FactsSet('q001_vesemir_char_entry', 1);
    FactsRemove('wmh_hunt_disabled');
    Sleep(1.0);
    theGame.SaveGame(SGT_QuickSave, -1);
  }

  latent function setupScene(): bool {
    WMH_instantMountRoach();
    
    while (true) {
      var mount: CEntity = thePlayer.GetHorseCurrentlyMounted();

      if (mount) {
        break;
      }

      SleepOneFrame();
    }

    // 1.1 setup mount
    var spawn_p: Vector;
    var spawn_r: EulerAngles;
    var success: bool = this.getPositionByTag(
      'WMH_scene_introduction_geralt_spawn_0',
      spawn_p,
      spawn_r
    );

    if (!success) {
      WMHERROR("WMH_SceneIntroduction::SetupScene, missing mount spawn entity");
      return false;
    }
    
    mount.TeleportWithRotation(spawn_p, spawn_r);
    thePlayer.TeleportWithRotation(spawn_p, spawn_r);

    // 1.2 setup camera
    var camera_p: Vector;
    var camera_r: EulerAngles;
    success = this.getPositionByTag(
      'WMH_scene_welcome_camera_spawn_0',
      camera_p,
      camera_r
    );
    if (!success) {
      WMHERROR("WMH_SceneIntroduction::SetupScene, missing camera spawn entity");
      return false;
    }

    return true;
  }

  latent function playScenePlayer() {
    var r: EulerAngles;
    var r1: EulerAngles;
    var p: Vector;
    var p1: Vector;

    var ts_0_seconds: float = 5;
    var ts_1_seconds: float = 5;

    var horse: W3HorseComponent = thePlayer.GetUsedHorseComponent();
    var mount: CNewNPC = horse.GetEntity() as CNewNPC;

    
    this.getPositionByTag('WMH_scene_introduction_geralt_spawn_1', p, r);
    mount.TeleportWithRotation(p, r);

    // in forest above bridge, looking at geralt
    this.getPositionByTag('WMH_scene_welcome_camera_spawn_0', p, r);
    var camera: WMH_StaticCamera = WMH_getStaticCamera();
    var position: Vector = p;
    var rotation: EulerAngles = r;
    camera.TeleportWithRotation(p, r);
    camera.activationDuration = 0;
    camera.deactivationDuration = 0;
    camera.start();


    this.processing.PushBack((new WMH_CameraMilestone_Smoother in thePlayer)
      .initSmoother(0, 100)
    );
    

    if (true) {
      // this.addMilestoneAtTag('WMH_scene_welcome_camera_spawn_0', 0, 10);
      this.addMilestoneAtTag('WMH_scene_welcome_camera_spawn_1', 0, 15);
      var follow_rotation: WMH_CameraMilestone_FollowRotation;
      follow_rotation = (new WMH_CameraMilestone_FollowRotation in thePlayer)
        .initFollowRotation(
          0,
          500,
          thePlayer,
          , // offset
          1 // speed
        );
      this.milestones.PushBack(follow_rotation);

      RequestWeatherChangeTo('WT_Fog', 0, true);
      var hpm: float = theGame.GetHoursPerMinute();
      theGame.SetGameTime(GameTimeCreate(1, 0), false);
      theGame.SetHoursPerMinute(hpm * 150);

      // looking at the horizon, above bridge
      horse.wmh_horse_override.start();
      Sleep(0.5); // give time for roach to start
      theGame.FadeInAsync(3);
      this.tick(6, camera, position, rotation);
      WMH_showLogo(true, 1.5, 125, 125);
      this.tick(6, camera, position, rotation);
      WMH_showLogo(false, 2, 125, 125);
      this.addMilestoneAtTag('WMH_scene_welcome_camera_spawn_2', 0, 12.5);
      theGame.SetHoursPerMinute(hpm * 1);
      this.tick(1.0, camera, position, rotation);
      horse.wmh_horse_override.setSpeed(1.0);
      this.tick(1.0, camera, position, rotation);

      // 0.1) start to move the camera below the bridge
      this.addMilestoneAtTag('WMH_scene_welcome_camera_spawn_3', 0.5, 22.0);
      // tick for a bit, then teleport roach in front of the camp
      follow_rotation.intensity_target = 0;
    }
    else {
      theGame.FadeInAsync(0.5);
    }

    if (true) {
      // 0.2) go towards the camp
      this.tick(15.75, camera, position, rotation);
      WMHTUTOFACT(
        'WMH_IntroductionWelcomeCamp',
        "Witcher Camp",
        "Welcome to the <font color='#CD7D03'>Witcher Camp</font>, your main base of operations in <font color='#CD7D03'>Wild Monster Hunt</font>.<br/><br/>The neighbouring region is overrun by monsters, and this modest bastion is the last line of defence. Use it to organize hunting expeditions in the hope of clearing out the area."
      );

      // 1) look at camp manager, explain unlocking upgrades
      horse.wmh_horse_override.setSpeed(0);
      this.addMilestoneAtTag('WMH_scene_welcome_camera_spawn_4', 0.5, 10);
      this.addCurveAtTag('WMH_scene_welcome_camera_spawn_4_curve', 0.5, 8.0, 7.5);
      this.addLookAtTag('WMH_scene_welcome_camera_lookat_camp_manager', 0, 8.0);
      this.addLookAtTag('WMH_scene_welcome_camera_lookat_camp_manager', 0.5, 10);
      this.addLookAtTag('WMH_scene_welcome_camera_lookat_camp_manager', 0.5, 12.5);
      this.tick(9.5, camera, position, rotation);
      WMHTUTOFACT(
        'WMH_IntroductionWelcomeCampMaster',
        "Camp Master",
        "Need to upgrade the camp or recruit new craftsmen? The <font color='#CD7D03'>Camp Master</font> can arrange the Witcher Camp by adding new upgrades and by hiring people who can get you better gear.<br/><br/>Additionally, if you look around the camp, you will find different furnitures that he set up for you. They provide various advantages for your hunts and can be improved for greater & longer effects."
      );
    }

    if (true) {
      // 2) look at entrance, explain going out when ready
      this.addMilestoneAtTag('WMH_scene_welcome_camera_spawn_5', 1.0, 5);
      this.addLookAtTag('WMH_scene_welcome_camera_lookat_camp_exit', 1.5, 7);
      this.tick(6, camera, position, rotation);
      WMHTUTOFACT(
        'WMH_IntroductionWelcomeLeavingCamp',
        "On the Path",
        "The world beyond the camp is your <font color='#CD7D03'>hunting ground</font>. Explore the surrounding lands, gather, loot, and track down monstrous threats."
      );
    }

    if (true) {
      // 3) look at noticeboard, explain prepare for targets
      this.getPositionByTag('WMH_scene_introduction_geralt_spawn_2', p, r);
      thePlayer.TeleportWithRotation(p, r);
      mount.TeleportWithRotation(p, r);
      horse.wmh_horse_override.setSpeed(0.25);

      this.addMilestoneAtTag('WMH_scene_welcome_camera_spawn_6', 1.0, 5);
      this.addCurveAtTag('WMH_scene_welcome_camera_spawn_6_curve', 1.0, 3.25, 4.0);
      this.addLookAtTag('WMH_scene_welcome_camera_lookat_noticeboard', 1.5, 5);
      this.tick(6, camera, position, rotation);
      WMHTUTOFACT(
        'WMH_IntroductionWelcomeNoticeboard',
        "A Witcher's Duty",
        "Contracts offer a <font color='#CD7D03'>steady income and valuable experience</font>, the noticeboard lists the active threats that are roaming around. Make them your primary targets in order to afford better gear and upgrades."
      );
    }
    else {
      this.getPositionByTag(
        'WMH_scene_welcome_camera_spawn_6',
        position,
        rotation
      );

      camera.TeleportWithRotation(position, rotation);
      Sleep(2.0);
    }

    // 4) look at home, explain getting ready
    horse.wmh_horse_override.setSpeed(0.25);
    // this.addMilestoneAtTag('WMH_scene_welcome_camera_spawn_7', 0.5, 5);
    this.addMilestoneAtTag('WMH_scene_welcome_camera_spawn_8', 1.0, 17,, true);
    this.addLookAtTag(
      'WMH_scene_welcome_camera_lookat_home_camp',
      0.25, 5.5, Vector(0, 0, 3.0), 0.005
    );
    this.addLookAtTag('WMH_scene_welcome_camera_lookat_home_bed', 1.5, 22, , 0.05);
    this.addCurveAtTag('WMH_scene_welcome_camera_spawn_7_curve', 1.0, 8.5, 14);
    this.tick(14, camera, position, rotation);

    // 4.1) look inside home, Geralt comes walking, tutorial ends
    this.getPositionByTag('WMH_scene_introduction_geralt_spawn_3', p, r);
    thePlayer.TeleportWithRotation(p, r);
    mount.TeleportWithRotation(p, r);
    horse.wmh_horse_override.setSpeed(0.0);
    this.tick(1, camera, position, rotation);
    WMHTUTOFACT(
      'WMH_IntroductionWelcomeGettingReady',
      "Prepare for the Hunt",
      "Before venturing in the wild, ensure you're well-rested and equipped. Use this place to sharpen your skills and <font color='#CD7D03'>ready yourself for the trials that await</font>."
    );

    this.tick(2, camera, position, rotation);
    theGame.FadeOut();
    horse.wmh_horse_override.end();
    WMH_instantDismountInternal(false);
    Sleep(0.25);
    this.getPositionByTag('WMH_scene_welcome_camera_lookat_home_camp', p, r);
    thePlayer.TeleportWithRotation(p, r);
    camera.deactivationDuration = 2.0;
    camera.Stop();
    Sleep(1.5);
    theGame.FadeIn(1.0);
  }

  function addMilestoneAtTag(
    tag: name,
    start_after: float,
    blendin_seconds: float,
    optional speed: float,
    optional disable_rotation: bool
  ) {
    var p: Vector;
    var r: EulerAngles;

    this.getPositionByTag(tag, p, r);
    this.milestones.PushBack((new WMH_CameraMilestone in thePlayer).init(
      start_after,// start_after,
      blendin_seconds,// blendin_seconds,
      p,// target_position,
      r,// target_rotation,
      speed,
      disable_rotation
    ));
  }

  function addMagnetAtTag(
    tag: name,
    start_after: float,
    blendin_seconds: float,
    radius: float,
    pull: float
  ) {
    var p: Vector;
    var r: EulerAngles;

    this.getPositionByTag(tag, p, r);
    this.processing.PushBack(
      (new WMH_CameraMilestone_Magnet in thePlayer)
      .initMagnet(start_after, blendin_seconds, p, r, radius, pull)
    );
  }

  function addLookAtTag(
    tag: name,
    start_after: float,
    blendin_seconds: float,
    optional offset: Vector,
    optional speed: float
  ) {
    var p: Vector;
    var r: EulerAngles;

    this.getPositionByTag(tag, p, r);
    this.milestones.PushBack(
      (new WMH_CameraMilestone_LookAt in thePlayer)
        .initLookAt(start_after, blendin_seconds, p, offset, speed)
    );
  }

  function addCurveAtTag(
    tag: name,
    start_after: float,
    blendin_seconds: float,
    optional strength: float
  ) {
    var p: Vector;
    var r: EulerAngles;

    this.getPositionByTag(tag, p, r);
    this.milestones.PushBack(
      (new WMH_CameraMilestone_Curve in thePlayer)
        .initCurve(start_after, blendin_seconds, p, r, strength)
    );
  }

  latent function tick(duration: float,camera: WMH_StaticCamera, out position: Vector, out rotation: EulerAngles) {
    var previous_time: float = theGame.GetEngineTimeAsSeconds();
    

    WMHINFO("Running_main");
    camera.TeleportWithRotation(
      position,
      rotation
    );

    
    SleepOneFrame();

    while (duration >= 0) {
      var now: float = theGame.GetEngineTimeAsSeconds();
      var delta: float = now - previous_time;
      previous_time = theGame.GetEngineTimeAsSeconds();
      duration -= delta;

      var has_updated: bool = false;

      // loop through all milestones and apply the currently active ones
      var i: int = 0;
      var max: int = this.milestones.Size();
      for (i = 0; i < max; i += 1) {
        var blendratio: float = this.milestones[i].applyDelta(delta);
        
        if (blendratio > 0) {
          has_updated = true;

          this.milestones[i].applyPosition(position, blendratio, delta);
          this.milestones[i].applyRotation(rotation, blendratio, delta, position);
        }
      }

      for (i = 0; i < max; i += 1) {
        var blendratio: float = this.processing[i].applyDelta(delta);
        
        if (blendratio > 0) {
          has_updated = true;

          this.processing[i].applyPosition(position, blendratio, delta);
          this.processing[i].applyRotation(rotation, blendratio, delta, position);
        }
      }

      camera.TeleportWithRotation(position, rotation);
      SleepOneFrame();
    }
  }
  
  private function getPositionByTag(
    tag: name,
    out position: Vector,
    out rotation: EulerAngles
  ): bool {
    var node: CEntity = theGame.GetEntityByTag(tag);

    if (node) {
      position = node.GetWorldPosition();
      rotation = node.GetWorldRotation();

      return true;
    }

    return false;
  }

  private function getPositionByTagUnsafe(tag: name): Vector {
    return theGame.GetEntityByTag(tag).GetWorldPosition();
  }
}

state Waiting in WMH_SceneIntroduction {}
state Starting in WMH_SceneIntroduction {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    parent.GotoState('Running');
  }
}
state Running in WMH_SceneIntroduction {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.Running_main();
  }

  entry function Running_main() {
    parent.onStart();
    // parent.GotoState('Waiting');
  }
}
