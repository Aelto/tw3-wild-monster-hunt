

statemachine class WMH_Bestiary {
  private var master: WMH_Master;

  // the sub-components are public but only access them directly to submit
  // events from the master class.
  public var active_view: WMH_BestiaryActiveView;
  public var spawn_points: WMH_SpawnPointManager;
  public var biomes: WMH_BiomeManager;

  public var entries: array<WMH_BestiaryEntry>;
  public var entries_wildlife: array<WMH_BestiaryEntry>;

  protected var spawn_requests: array<WMH_SpawnRequest>;

  public function init(master: WMH_Master): WMH_Bestiary {
    this.master = master;

    this.spawn_points = (new WMH_SpawnPointManager in this).init();
    this.active_view = (new WMH_BestiaryActiveView in this).init();
    this.biomes = (new WMH_BiomeManager in this).init();

    this.initEntries();
    this.GotoState('Waiting');

    return this;
  }

  public function onSpawn(contract: WMH_ContractManager, hunt_seed: int) {
    this.maybeRefresh(contract);
    // this.spawnRandomEntry(contract, hunt_seed);
    // this.spawnRandomWildlife(hunt_seed + 1);

    this.spawnNearbyAvailableSpawnPoints(contract, hunt_seed);
  }

  public function onSpawnContractTarget(
    bentry: WMH_BestiaryEntry,
    location: WMH_BiomeSpawnPoint,
    affix_manager: WMH_AffixManager,
    seed: int
  ) {
    this.requestSpawn(
      (new WMH_SpawnRequest in this)
        .withBestiaryEntry(bentry)
        .withSpawnPoint(location)
        .withAffixes(affix_manager)
        .withSeed(seed)
    );
  }

  public function onSpawnClues(
    bentry: WMH_BestiaryEntry,
    location: WMH_BiomeSpawnPoint,
    clues_heading: float,
    seed: int
  ) {
    var request: WMH_SpawnRequestClues = new WMH_SpawnRequestClues in this;

    // do it in multiple lines to avoid downcasting it
    request.withBestiaryEntry(bentry.buildCluesEntry());
    request.withSpawnPoint(location);
    request.withHeading(clues_heading);
    request.withSeed(seed);

    this.requestSpawn(request);
  }

  // The elite entries are the closest ones to the given WMH_Level
  public function getEliteEntries(level: WMH_Level): array<WMH_BestiaryEntry> {
    var output: array<WMH_BestiaryEntry>;
    var fallback: WMH_BestiaryEntry;

    while (output.Size() < 5) {
      for bentry: WMH_BestiaryEntry in this.entries {
        if (!fallback) {
          fallback = bentry;
        }

        if (bentry.canBeTarget(level)) {
          output.PushBack(bentry);
        }
        // the target could no be target, but it's stored as a possible fallback
        // if after looping through all targets we couldn't get 5 valid entries
        //
        // over time this should get us the strongest target below the WMH_Level
        else if (
          fallback.strength < level.value 
          && fallback.strength > bentry.strength
        ) {
          fallback = bentry;
        }
      }

      if (fallback) {
        // adjust the level to be around the fallback's strength, that should
        // open the door to new elite targets.
        level.value = fallback.strength;
      } else {
        break;
      }
    }

    return output;
  }

  // returns all of the spawn points (from the entire map) that would allow the
  // entry to spawn.
  public function getAvailableRegionSpawnPoints(
    bentry: WMH_BestiaryEntry
  ): array<WMH_BiomeSpawnPoint> {
    return this
      .getAvailableSpawnPointsForEntry(
        bentry,
        this.spawn_points.getRegionValidSpawnPoints()
      );
  }

  // returns the nearby spawn points that would allow the entry to spawn
  public function getAvailableNearbySpawnPoints(
    bentry: WMH_BestiaryEntry, optional ignore_respawn: bool
  ): array<WMH_BiomeSpawnPoint> {
    return this
      .getAvailableSpawnPointsForEntry(
        bentry,
        this.spawn_points.getValidSpawnPoints(ignore_respawn)
      );
  }

  private function spawnNearbyAvailableSpawnPoints(
    contract: WMH_ContractManager,
    hunt_seed: int
  ) {
    var spawn_points: array<WMH_BiomeSpawnPoint> = this.spawn_points
      .getValidSpawnPoints();

    for spawn_point: WMH_BiomeSpawnPoint in spawn_points {
      var position: Vector = spawn_point.GetWorldPosition();
      var point_seed: int = hunt_seed + (position.X as int) - (position.Y as int);

      // regular nearby spawn points have a chance to be disabled for the hunt,
      var can_spawn_monsters: bool = RandNoiseF(point_seed + 0, 1.0) <= 0.5;

      // if a point isn't allowed to spawn creatures, it may spawn wildlife
      var can_spawn_wildlife: bool = !can_spawn_monsters
                                  && RandNoiseF(point_seed + 1, 1.0) <= 0.5;

      if (can_spawn_monsters) {
        var bentry: WMH_BestiaryEntry = this.active_view.getRandomEntry(
          contract,
          this.biomes,
          spawn_point.biome_tags,
          spawn_point.biome_tags_bypass,
          point_seed
        );

        if (bentry) {
          var request: WMH_SpawnRequest = (new WMH_SpawnRequest in this)
            .init()
            .withSpawnPoint(spawn_point)
            .withBestiaryEntry(bentry)
            .withSeed(point_seed);

          this.requestSpawn(request);
          spawn_point.consume();
        }
        else {
          WMHINFO("WMH_Bestiary::spawnRandomEntry() - no valid bestiary entry");
        }
      }

      if (can_spawn_wildlife) {
        var bentry: WMH_BestiaryEntry = this.active_view.getRandomEntryWildlife(
          this.biomes,
          spawn_point.biome_tags,
          spawn_point.biome_tags_bypass,
          point_seed
        );

        if (bentry) {
          var request: WMH_SpawnRequest = (new WMH_SpawnRequest in this)
            .init()
            .withSpawnPoint(spawn_point)
            .withBestiaryEntry(bentry)
            .withSeed(point_seed);

          this.requestSpawn(request);
          spawn_point.consume();
        }
        else {
          WMHINFO("WMH_Bestiary::spawnRandomEntry() - no valid bestiary entry");
        }
      }
    }
  }

  private function requestSpawn(request: WMH_SpawnRequest) {
    this.spawn_requests.PushBack(request);

    if (this.GetCurrentStateName() == 'Waiting') {
      this.GotoState('Spawning');
    }
  }

  private function maybeRefresh(contract: WMH_ContractManager) {
    this.spawn_points.maybeRefresh();
    this.active_view.maybeRefresh(
      this.entries,
      this.entries_wildlife,
      this.biomes,
      contract
    );
  }

  private function initEntries() {
    var index: int = 0;

    index = this.initEntries_0(index);
    index = this.initEntries_1(index);
  }

  private function initEntries_0(index: int): int {
    #define function registerBestiaryEntry(entry_name) {
      var bentry_entry_name: WMH_BestiaryEntryentry_name =
        (new WMH_BestiaryEntryentry_name in this);
      bentry_entry_name.init(WMH_BestiaryId(index));
      this.entries.PushBack(bentry_entry_name);
      index += 1;
    };
    registerBestiaryEntry!(Alghoul)
    registerBestiaryEntry!(Arachas)
    registerBestiaryEntry!(Barghest)
    registerBestiaryEntry!(Basilisk)
    registerBestiaryEntry!(Bear)
    registerBestiaryEntry!(Berserker)
    registerBestiaryEntry!(Boar)
    registerBestiaryEntry!(Bruxa)
    registerBestiaryEntry!(Bruxacity)
    registerBestiaryEntry!(Centipede)
    registerBestiaryEntry!(Chort)
    registerBestiaryEntry!(Cockatrice)
    registerBestiaryEntry!(Cyclop)
    registerBestiaryEntry!(Detlaff)
    registerBestiaryEntry!(Dracolizard)
    registerBestiaryEntry!(Drowner)
    registerBestiaryEntry!(Echinops)
    registerBestiaryEntry!(Ekimmara)
    registerBestiaryEntry!(Elemental)
    registerBestiaryEntry!(Endrega)
    registerBestiaryEntry!(Fiend)
    registerBestiaryEntry!(Fleder)
    registerBestiaryEntry!(Fogling)
    registerBestiaryEntry!(Forktail)
    registerBestiaryEntry!(Gargoyle)
    registerBestiaryEntry!(Garkain)
    registerBestiaryEntry!(Ghoul)
    registerBestiaryEntry!(Giant)
    registerBestiaryEntry!(Golem)
    registerBestiaryEntry!(GolemIce)
    registerBestiaryEntry!(Gravier)
    registerBestiaryEntry!(Griffin)
    registerBestiaryEntry!(Hag)
    registerBestiaryEntry!(Harpy)
    registerBestiaryEntry!(Human)
    registerBestiaryEntry!(Katakan)
    registerBestiaryEntry!(Kikimore)
    registerBestiaryEntry!(Leshen)
    registerBestiaryEntry!(LeshenGrotto)
    registerBestiaryEntry!(Nekker)
    registerBestiaryEntry!(Nightwraith)
    registerBestiaryEntry!(Noonwraith)
    registerBestiaryEntry!(Panther)
    registerBestiaryEntry!(Rotfiend)
    registerBestiaryEntry!(Sharley)
    registerBestiaryEntry!(Siren)
    registerBestiaryEntry!(Skelbear)
    registerBestiaryEntry!(Skeleton)
    registerBestiaryEntry!(Skeltroll)
    registerBestiaryEntry!(Skelwolf)
    registerBestiaryEntry!(Spider)
    registerBestiaryEntry!(Troll)
    registerBestiaryEntry!(Werewolf)
    registerBestiaryEntry!(Wight)
    registerBestiaryEntry!(Wildhunt)
    registerBestiaryEntry!(Wolf)
    registerBestiaryEntry!(Wraith)
    registerBestiaryEntry!(Wyvern)

    return index;
  }

  private function initEntries_1(index: int): int {
    #define function registerBestiaryEntryWildlife(entry_name) {
      var bentry_entry_name: WMH_BestiaryEntryentry_name =
        (new WMH_BestiaryEntryentry_name in this);
      bentry_entry_name.init(WMH_BestiaryId(index));
      this.entries_wildlife.PushBack(bentry_entry_name);
      index += 1;
    };

    // wildlife
    registerBestiaryEntryWildlife!(Bat)
    registerBestiaryEntryWildlife!(Cat)
    registerBestiaryEntryWildlife!(Chicken)
    registerBestiaryEntryWildlife!(Cow)
    registerBestiaryEntryWildlife!(Deer)
    registerBestiaryEntryWildlife!(Deer_roe)
    registerBestiaryEntryWildlife!(Dog)
    registerBestiaryEntryWildlife!(Goat)
    registerBestiaryEntryWildlife!(Guard_dog)
    registerBestiaryEntryWildlife!(Hare)
    registerBestiaryEntryWildlife!(Mountain_goat)
    registerBestiaryEntryWildlife!(Mouse)
    registerBestiaryEntryWildlife!(Pig)
    registerBestiaryEntryWildlife!(Pigeon)
    registerBestiaryEntryWildlife!(Ram)
    registerBestiaryEntryWildlife!(Rat)
    registerBestiaryEntryWildlife!(Rooster)
    registerBestiaryEntryWildlife!(Sheep)
    registerBestiaryEntryWildlife!(Snow_deer)
    registerBestiaryEntryWildlife!(Snow_rabbit)
    /*
    registerBestiaryEntryWildlife!(Crab)
    registerBestiaryEntryWildlife!(Crow)
    registerBestiaryEntryWildlife!(Fish_kingfish)
    registerBestiaryEntryWildlife!(Fish_mackerel)
    registerBestiaryEntryWildlife!(Fish_roach)
    registerBestiaryEntryWildlife!(Fish_tuna)
    registerBestiaryEntryWildlife!(Goose)
    registerBestiaryEntryWildlife!(Goose_leader)
    registerBestiaryEntryWildlife!(Owl)
    registerBestiaryEntryWildlife!(Seagull)
    registerBestiaryEntryWildlife!(Sparrow)
    registerBestiaryEntryWildlife!(Swallow)
    registerBestiaryEntryWildlife!(Toad)
    */

    return index;
  }

  
  private function getAvailableSpawnPointsForEntry(
    bentry: WMH_BestiaryEntry,
    spawn_points: array<WMH_BiomeSpawnPoint>
  ): array<WMH_BiomeSpawnPoint> {
    var output: array<WMH_BiomeSpawnPoint>;

    var day_hour: int = this.biomes.getDayHour();
    var weather: WMH_WeatherType = this.biomes.getWeatherType();
    var global_biome: WMH_BiomeTags = this.biomes.getGlobalBiome();

    var point: WMH_BiomeSpawnPoint;
    for point: WMH_BiomeSpawnPoint in spawn_points {
      // if the point has empty tags then everything can spawn there
      var can_spawn: bool = WMH_biomeTagsEmpty(point.biome_tags);

      can_spawn = can_spawn || bentry.canSpawn(
        WMH_mergeBiomeTags(point.biome_tags, global_biome),
        day_hour,
        weather,
        point.biome_tags_bypass,
      );

      if (can_spawn) {
        output.PushBack(point);
      }
    }

    return output;
  }
}

state Waiting in WMH_Bestiary {
  event OnEnterState(previous_state_name: name) {
		super.OnEnterState(previous_state_name);
    this.Waiting_main();
	}

  entry function Waiting_main() {
    // WMHINFO("WMH_BestiaryStateWaiting::Waiting_main()");
  }
}

state Spawning in WMH_Bestiary {
  event OnEnterState(previous_state_name: name) {
		super.OnEnterState(previous_state_name);
    this.Spawning_main();
	}

  entry function Spawning_main() {
    // WMHINFO("WMH_BestiaryStateSpawning::Spawning_main()");

    while (parent.spawn_requests.Size() > 0) {
      var request: WMH_SpawnRequest = parent.spawn_requests.PopBack();

      if (request) {
        this.performSpawnRequest(request);
        SleepOneFrame();
      }
    }

    parent.GotoState('Waiting');
  }

  latent function performSpawnRequest(request: WMH_SpawnRequest) {
    var bentry: WMH_BestiaryEntry;
    var entities: array<CEntity>;

    for bentry: WMH_BestiaryEntry in request.entries {
      this.spawnTemplates(
        bentry,
        request.GetWorldPosition(),
        request.heading,
        request.affix_manager,
        request.seed,
        /*out*/ entities
      );
    }

    request.onRequestFinished(entities);
  }

  latent function spawnTemplates(
    bentry: WMH_BestiaryEntry,
    position: Vector,
    heading: float,
    affix_manager: WMH_AffixManager,
    seed: int,
    out entities: array<CEntity>
  ) {
    var templates: array<WMH_SpawnTemplateAndCount> = bentry.buildSpawnList(seed);

    var group_positions: array<Vector> = WMH_getGroupPositions(
      position,
      templates.Size(),
      /*density*/ 0.01
    );

    var tags_array: array<name>;
    tags_array.PushBack('WildMonsterHuntEntity');

    var i: int;
    for (i = 0; i < templates.Size(); i += 1) {
      var template_path: string = templates[i].template;

      WMHINFO("template = " + template_path);

      // todo: it will load the same templates multiple times
      var entity_template: CEntityTemplate = LoadResourceAsync(
        template_path, true
      ) as CEntityTemplate;
      SleepOneFrame();

      WMH_FixZAxis(/*out*/ group_positions[i]);

      var current_rotation: EulerAngles;

      if (heading != 0) {
        current_rotation = VecToRotation(
          // with a +5/-5 variation
          VecFromHeading(heading + RandRangeF(10.0, 0.0) - 5.0)
        );
      }
      else {
        current_rotation = VecToRotation(VecRingRand(1, 2));
      }

      var persistance: EPersistanceMode = PM_DontPersist;

      var i_1: int = 0;
      for (i_1 = 0; i_1 < templates[i].count; i_1 += 1) {
        var created_entity: CEntity = theGame.CreateEntity(
          entity_template,
          group_positions[i],
          current_rotation,,,,
          persistance,
          tags_array
        );

        bentry.onEntitySpawned(created_entity);

        var npc: CNewNPC = created_entity as CNewNPC;
        if (npc) {
          if (affix_manager) {
            affix_manager.applyToNpc(npc);
          }
        }

        entities.PushBack(created_entity);
      }
    }
  }
}

struct WMH_SpawnTemplateAndCount {
  var template: string;
  var count: int;
}


function WMH_getGroupPositions(initial_position: Vector, count: int, density: float): array<Vector> {
  var s, r, x, y: float;
  var pos_fin: Vector;
  var output_positions: array<Vector>;
  
  var i: int;
  var sign: int;

  //const values used in the loop
  pos_fin.Z = initial_position.Z;
  s = count / density; // maintain a constant density of `density` unit per m2
  r = SqrtF(s/Pi());

  for (i = 0; i < count; i += 1) {
    x = RandF() * r;        // add random value within range to X
    y = RandF() * (r - x);  // add random value to Y so that the point is within the disk

    if(RandRange(2)) {       // randomly select the sign for misplacement
      sign = 1;
    }
    else {
      sign = -1;
    }
      
    pos_fin.X = initial_position.X + sign * x;  //final X pos
    
    if(RandRange(2)) {        // randomly select the sign for misplacement
      sign = 1;
    }
    else {
      sign = -1;
    }
      
    pos_fin.Y = initial_position.Y + sign * y;  //final Y pos

    // return false means it could not find ground position
    // in this case, take the default position
    // if return true, then pos_fin is updated with the correct position
    if (!WMH_getGroundPosition(pos_fin)) {
      pos_fin = initial_position;
    }

    output_positions.PushBack(pos_fin);
  }

  return output_positions;
}

function WMH_getGroundPosition(out input_position: Vector, optional personal_space: float, optional radius: float): bool {
  var found_viable_position: bool;
  var collision_normal: Vector;
  var max_height_check: float;
  var output_position: Vector;
  var point_z: float;
  var attempts: int;

  attempts = 10;
  output_position = input_position;
  personal_space = MaxF(personal_space, 1.0);
  max_height_check = 30.0;

  if (radius == 0) {
    radius = 10.0;
  }

  do {
    attempts -= 1;

    // first search for ground based on navigation data.
    theGame
    .GetWorld()
    .NavigationComputeZ(
      output_position,
      output_position.Z - max_height_check,
      output_position.Z + max_height_check,
      point_z
    );

    output_position.Z = point_z;

    if (!theGame.GetWorld().NavigationFindSafeSpot(output_position, personal_space, radius, output_position)) {
      continue;
    }

    // then do a static trace to find the position on ground
    // ... okay i'm not sure anymore, is the static trace needed?
    // theGame
    // .GetWorld()
    // .StaticTrace(
    //   output_position + Vector(0,0,1.5),// + 5,// Vector(0,0,5),
    //   output_position - Vector(0,0,1.5),// - 5,//Vector(0,0,5),
    //   output_position,
    //   collision_normal
    // );

    // finally, return if the position is above water level
    if (output_position.Z < theGame.GetWorld().GetWaterLevel(output_position, true)) {
      continue;
    }

    found_viable_position = true;
    break;
  } while (attempts > 0);


  if (found_viable_position) {
    input_position = output_position;

    return true;
  }

  return false;
}

function WMH_FixZAxis(out pos : Vector) {
  var world : CWorld;
  var z : float;

  world = theGame.GetWorld();

  if (world.NavigationComputeZ(pos, pos.Z - 128, pos.Z + 128, z)) {
    pos.Z = z;
  }
  else if (world.PhysicsCorrectZ(pos, z)) {
    pos.Z = z;
  }
}