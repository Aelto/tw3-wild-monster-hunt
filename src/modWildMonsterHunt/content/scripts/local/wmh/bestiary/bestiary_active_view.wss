// Acts as a dynamic view (like in databases) of the list of active bestiary
// entries. A bestiary entry can be considered active or inactive depending on
// the time of day, or the surrounding biomes for example.
//
// As the player moves around the maps the view is adjusted to match the new
// data.
class WMH_BestiaryActiveView {
  private var entries: array<WMH_BestiaryEntry>;
  private var entries_wildlife: array<WMH_BestiaryEntry>;

  private var refresh_ticker: WMH_Ticker;

  public function init(): WMH_BestiaryActiveView {
    this.refresh_ticker = (new WMH_Ticker in this).init(60); // seconds

    return this;
  }

  public function maybeRefresh(
    out entries: array<WMH_BestiaryEntry>,
    out entries_wildlife: array<WMH_BestiaryEntry>,
    biome_manager: WMH_BiomeManager,
    contract: WMH_ContractManager
  ) {
    if (!this.refresh_ticker.validate()) {
      return;
    }

    this.updateView(entries, entries_wildlife, biome_manager, contract);
  }

  private function updateView(
    out entries: array<WMH_BestiaryEntry>,
    out entries_wildlife: array<WMH_BestiaryEntry>,
    biome_manager: WMH_BiomeManager,
    contract: WMH_ContractManager,
  ) {
    var weather: WMH_WeatherType = biome_manager.getWeatherType();
    var biome: WMH_BiomeTags = biome_manager.getGlobalBiome();
    var day_hour: int = biome_manager.getDayHour();
    var current: WMH_BestiaryEntry;

    this.entries.Clear();

    // build a list with just the entries that we allow to spawn
    for current: WMH_BestiaryEntry in entries {

      // targetted entries have more chances to spawn
      var is_targetted_f: float = contract.isTargetted(current.id) as float;
      
      // this is where additional filtering can be done, for example based on
      // the player's progression through the game or if the species are in
      // the player's bestiary.
      //
      // at the moment there is no filtering done at all.
      this.entries.PushBack(current);
    }

    for current: WMH_BestiaryEntry in entries_wildlife {
      this.entries_wildlife.PushBack(current);
    }
  }

  public function getRandomEntry(
    contract: WMH_ContractManager,
    biome_manager: WMH_BiomeManager,
    biome_tags: WMH_BiomeTags,
    biome_tags_bypass: array<name>,
    seed: int,
    optional options: WMH_getRandomEntryOptions
  ): WMH_BestiaryEntry {
    var weather: WMH_WeatherType = biome_manager.getWeatherType();
    var day_hour: int = biome_manager.getDayHour();
    var biome: WMH_BiomeTags = WMH_mergeBiomeTags(
      biome_tags,
      biome_manager.getGlobalBiome()
    );

    var roller: WMH_RatiosRoller = new WMH_RatiosRoller in this;
    var pseudo_rng_buffer: WMH_PseudoRngBuffer = 
      WMH_getHuntManagerSpawnratesPseudoRng()

    // 1.
    // start by building a list of the entries that could spawn from the
    // provided biome tags.
    var i: int;
    for (i = 0; i < this.entries.Size(); i += 1) {
      var current: WMH_BestiaryEntry = this.entries[i];

      var ratio: float = current.getSpawnRatio(
        biome,
        weather,
        day_hour
      ) as float;

      if (contract.isTargetted(current.id)) {
        ratio *= 10;
      }

      if (current.isBiomeBypassed(biome_tags_bypass)) {
        ratio *= 20;
      } else {
        // the stronger a creature is the lower its chances of appearing
        ratio = ratio / MaxF(1.0, current.strength * 0.1);

        // if the creature is not bypassed and the strong targets are excluded,
        // ensure it cannot spawn if it's a strong target
        if (options.exclude_strong_target && current.isStrongTarget()) {
          ratio = 0;
        }
      }

      // note: the roll is not given to the pseudo_rng_buffer here but once the
      // spawn request is fulfilled, this allows to keep this function somewhat
      // pure with no side effects.
      roller
        .addRatio(pseudo_rng_buffer.getAlteredRatio(current.id.value, ratio));
    }

    var index: int = roller.roll(seed);

    if (index < 0) {
      return NULL;
    }

    return this.entries[index];
  }

  public function getRandomEntryWildlife(
    biome_manager: WMH_BiomeManager,
    biome_tags: WMH_BiomeTags,
    biome_tags_bypass: array<name>,
    seed: int
  ): WMH_BestiaryEntry {
    var weather: WMH_WeatherType = biome_manager.getWeatherType();
    var day_hour: int = biome_manager.getDayHour();
    var biome: WMH_BiomeTags = WMH_mergeBiomeTags(
      biome_tags,
      biome_manager.getGlobalBiome()
    );

    var roller: WMH_RatiosRoller = new WMH_RatiosRoller in this;

    // 1.
    // start by building a list of the entries that could spawn from the
    // provided biome tags.
    var i: int;
    for (i = 0; i < this.entries_wildlife.Size(); i += 1) {
      var current: WMH_BestiaryEntry = this.entries_wildlife[i];

      // todo: the biome_tags_bypass is not verified during this step.
      //  ~> what ratio should a bypassed entry get?

      var ratio: float = current.getSpawnRatio(
        biome,
        weather,
        day_hour
      ) as float;

      roller.addRatio(ratio);
    }

    var index: int = roller.roll(seed);

    if (index < 0) {
      return NULL;
    }

    return this.entries_wildlife[index];
  }
}

// if fields are added to the struct make sure their default value wouldn't
// change the filtering as the getRandomEntry functions have the options as
// optional arguments
struct WMH_getRandomEntryOptions {
  var exclude_strong_target: bool;
}