class WMH_SpawnPreferences {
  private var time_range: WMH_TimeRangeScaling;
  private var biome_tags_mandatory: WMH_BiomeTags;
  private var biome_tags_forbidden: WMH_BiomeTags;

  // A tag unique to this scaling that can be assigned to various POIs and that
  // allows the biome_tags requirements to be ignored
  private var biome_tags_bypass: name;

  private var weather_type: WMH_WeatherType;
  default weather_type = WMH_WeatherType_None;

  public function from(other: WMH_SpawnPreferences): WMH_SpawnPreferences {
    this.time_range = other.time_range;
    this.biome_tags_mandatory = other.biome_tags_mandatory;
    this.biome_tags_forbidden = other.biome_tags_forbidden;
    this.biome_tags_bypass = other.biome_tags_bypass;
    this.weather_type = other.weather_type;

    return this;
  }

  public function withTimeRange(range: WMH_TimeRangeScaling): WMH_SpawnPreferences {
    this.time_range = range;

    return this;
  }

  public function withMandatoryBiomeTags(tags: WMH_BiomeTags): WMH_SpawnPreferences {
    this.biome_tags_mandatory = tags;
    
    return this;
  }

  public function withForbiddenBiomeTags(tags: WMH_BiomeTags): WMH_SpawnPreferences {
    this.biome_tags_forbidden = tags;
    
    return this;
  }

  public function withBiomeTagsBypass(tag: name): WMH_SpawnPreferences {
    this.biome_tags_bypass = tag;
    
    return this;
  }

  public function withWeatherType(weather: WMH_WeatherType): WMH_SpawnPreferences {
    this.weather_type = weather;

    return this;
  }

  public function getTimeRangeScaling(hours: float): float {
    return WMH_getScaling(this.time_range, hours);
  }

  public function isTimeValid(hours: float): bool {
    return this.getTimeRangeScaling(hours) > 0;
  }

  public function isBiomeValid(
    tags: WMH_BiomeTags,

    // global tags that can be merged into the normal tags, if a value is
    // `true` in the global tags and `false` in the original then the merge
    // will be `true`.
    optional global: WMH_BiomeTags
  ): bool {
    if (
      this.biome_tags_forbidden.roomWide
      && (tags.roomWide || global.roomWide) ||

      this.biome_tags_forbidden.altitudeHigh
      && (tags.altitudeHigh || global.altitudeHigh) ||

      this.biome_tags_forbidden.humidityHigh
      && (tags.humidityHigh || global.humidityHigh) ||

      this.biome_tags_forbidden.vegetationHigh
      && (tags.vegetationHigh || global.vegetationHigh) ||


      this.biome_tags_forbidden.lightLow
      && (tags.lightLow || global.lightLow) ||

      this.biome_tags_forbidden.structuresHigh
      && (tags.structuresHigh || global.structuresHigh) ||

      this.biome_tags_forbidden.underground
      && (tags.underground || global.underground)

    ) {
      return false;
    }

    if (
      this.biome_tags_mandatory.roomWide
      && !(tags.roomWide || global.roomWide) ||

      this.biome_tags_mandatory.altitudeHigh
      && !(tags.altitudeHigh || global.altitudeHigh) ||

      this.biome_tags_mandatory.humidityHigh
      && !(tags.humidityHigh || global.humidityHigh) ||

      this.biome_tags_mandatory.vegetationHigh
      && !(tags.vegetationHigh || global.vegetationHigh) ||


      this.biome_tags_mandatory.lightLow
      && !(tags.lightLow || global.lightLow) ||

      this.biome_tags_mandatory.structuresHigh
      && !(tags.structuresHigh || global.structuresHigh) ||

      this.biome_tags_mandatory.underground
      && !(tags.underground || global.underground)

    ) {
      return false;
    }

    return true;
  }

  public function isBiomeBypassed(biome_tags_bypass: array<name>): bool {
    return IsNameValid(this.biome_tags_bypass)
        && biome_tags_bypass.Contains(this.biome_tags_bypass);
  }

  public function isWeatherValid(weather: WMH_WeatherType): bool {
    return this.weather_type == WMH_WeatherType_None
        || this.weather_type == weather;
  }
}

struct WMH_TimeRangeScaling {
  // from 04:00 to 12:00
  var multiplier_morning: float;
  default multiplier_morning = 1.0;

  // from 12:00 to 20:00
  var multiplier_afternoon: float;
  default multiplier_afternoon = 1.0;

  // from 20:00 to 04:00
  var multiplier_night: float;
  default multiplier_night = 1.0;
}

struct WMH_TimeRangeFlags {
  editable var morning: bool;
  default morning = true;

  editable var afternoon: bool;
  default afternoon = true;

  editable var night: bool;
  default night = true;
}

function WMH_getScaling(range: WMH_TimeRangeScaling, hours: float): float {
  // if these values are changed, make sure to edit the
  // `pref_rule` macro as well
  if (hours > 20 || hours < 4) {
    return range.multiplier_night;
  }

  if (hours > 4 && hours < 12) {
    return range.multiplier_morning;
  }

  return range.multiplier_afternoon;
}

function WMH_getTimeFlag(flags: WMH_TimeRangeFlags, hours: float): bool {
  return WMH_getScaling(
    WMH_TimeRangeScaling(
      flags.morning as float,
      flags.afternoon as float,
      flags.night as float
    ),
    hours
  ) > 0;
}

enum WMH_WeatherType {
  WMH_WeatherType_None = 0,
  WMH_WeatherType_Clear = 1,
  WMH_WeatherType_Rain = 2,
  WMH_WeatherType_Snow = 3,
}

function WMH_getWeatherType(): WMH_WeatherType {
  var weather: name = GetWeatherConditionName();
  var output: WMH_WeatherType = WMH_WeatherType_None;

  switch (weather) {
    case 'WT_Clear':
    case 'WT_Light_Clouds':
    case 'WT_Mid_Clouds':
    case 'WT_Mid_Clouds_Dark':
    case 'WT_Heavy_Clouds':
    case 'WT_Heavy_Clouds_Dark':
      output = WMH_WeatherType_Clear;
      break;

    case 'WT_Rain_Storm':
      output = WMH_WeatherType_Rain;
      break;

    case 'WT_Snow':
    case 'WT_Fog':
      output = WMH_WeatherType_Snow;
      break;
  }

  return output;
}