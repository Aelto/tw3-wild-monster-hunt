class WMH_SpawnRequest {
  public var entries: array<WMH_BestiaryEntry>;
  public var spawn_point: WMH_BiomeSpawnPoint;
  public var aggression_target: CGameplayEntity;
  public var runes_of_power_chance: float;
  public var runes_of_power_count: int;
  public var aggression_delay: float; // currently unused
  public var spawn_position: Vector;
  public var encounter_tag: WMH_EncounterTag;
  public var heading: float;
  public var seed: int;

  public var affix_manager: WMH_AffixManager;

  public function init(): WMH_SpawnRequest {
    return this;
  }

  public function withSpawnPoint(spawn_point: WMH_BiomeSpawnPoint): WMH_SpawnRequest {
    this.spawn_point = spawn_point;

    return this;
  }

  public function withSpawnPosition(position: Vector): WMH_SpawnRequest {
    this.spawn_position = position;

    return this;
  }

  public function withBestiaryEntry(bentry: WMH_BestiaryEntry): WMH_SpawnRequest {
    this.entries.PushBack(bentry);

    return this;
  }

  public function withSeed(seed: int): WMH_SpawnRequest {
    this.seed = seed;

    return this;
  }

  public function withHeading(heading: float): WMH_SpawnRequest {
    this.heading = heading;

    return this;
  }

  public function withAffixes(affix_manager: WMH_AffixManager): WMH_SpawnRequest {
    this.affix_manager = affix_manager;

    return this;
  }

  public function withEncounterTag(
    encounter_tag: WMH_EncounterTag
  ): WMH_SpawnRequest {
    this.encounter_tag = encounter_tag;

    return this;
  }

  // make the spawned creatures target the supplied `target` after the
  // given `delay`
  public function withAggressionTarget(
    target: CGameplayEntity,
    optional delay: float,
  ): WMH_SpawnRequest {
    this.aggression_target = target;
    this.aggression_delay = delay;

    return this;
  }

  public function withRunesOfPowerChance(
    quantity: int,
    chance_per_roll: float
  ): WMH_SpawnRequest {
    this.runes_of_power_chance = chance_per_roll;
    this.runes_of_power_count = quantity;

    return this;
  }

  public function onRequestFinished(entities: array<CEntity>) {
    // WMHINFO("WMH_SpawnRequest::onRequestFinished, entities.Size() = " + entities.Size());

    thePlayer.wmh.submitOnEncounterSpawned(
      this,
      this.spawn_point,
      this.entries,
      this.encounter_tag,
      entities
    );
  }

  public function GetWorldPosition(): Vector {
    if (this.spawn_point) {
      return this.spawn_point.GetWorldPosition();
    }

    return this.spawn_position;
  }

  public function tryPromoteToContractTargets(
    contract_manager: WMH_ContractManager
  ): bool {
    var is_contract: bool = this.encounter_tag == WMH_EncounterTag_ContractRegular
      || this.encounter_tag == WMH_EncounterTag_ContractMilestone;

    // already marked as a contract better not tweak anything
    if (is_contract) {
      return true;
    }

    var target_contracts: array<WMH_PendingContract>;
    for bentry: WMH_BestiaryEntry in this.entries {
      contract_manager.getTargettingContracts(
        target_contracts,
        bentry.id,
        WMH_PendingContractType_MILESTONE
      );
    }

    // no milestone contracts target the bentries, look for regular ones
    if (target_contracts.Size() <= 0) {
      for bentry: WMH_BestiaryEntry in this.entries {
        contract_manager.getTargettingContracts(
          target_contracts,
          bentry.id,
          WMH_PendingContractType_DEFAULT
        );
      }
    }

    // at least one milestone contract targets the b_entries
    if (target_contracts.Size() > 0) {
      var seed: int = this.seed;

      if (seed <= 0) {
        seed = WMH_seedPositionOffset(
          WMH_getHuntSeedFact(),
          this.GetWorldPosition()
        );
      }

      if (seed <= 0) {
        seed = SUH_now() as int;
      }

      var index: int = RandNoiseF(seed, target_contracts.Size()) as int;
      var contract: WMH_PendingContract = target_contracts[index];

      this.withAffixes(contract.affix_manager);
      this.withEncounterTag(WMH_EncounterTag_ContractMilestone);

      return true;
    }

    return false;
  }

  public function canCorrectPositionZ(): bool {
    if (this.spawn_point) {
      return !this.spawn_point.biome_tags.underground;
    }

    return false;
  }
}

class WMH_SpawnRequestClues extends WMH_SpawnRequest {
  private var pending_contract: WMH_PendingContract;

  public function onRequestFinished(entities: array<CEntity>) {
    WMHINFO("WMH_SpawnRequestClues::onRequestFinished, entities.Size() = " + entities.Size());

    var encounter: WMH_EncounterClues = (new WMH_EncounterClues in this)
      .initClues(
        this.spawn_point,
        this.entries,
        entities,
        this.pending_contract
      );

    WMH_getEncounterManager().onCluesSpawned(encounter);
  }

  public function withPendingContract(pending: WMH_PendingContract) {
    this.pending_contract = pending;
  }
}

class WMH_SpawnRequestLure extends WMH_SpawnRequest {
  public function onRequestFinished(entities: array<CEntity>) {
    WMHINFO("WMH_SpawnRequestLure::onRequestFinished, entities.Size() = " + entities.Size());

    thePlayer.wmh.submitOnLureSpawned(
      this,
      this.GetWorldPosition(),
      this.entries,
      entities
    );
  }
}

class WMH_SpawnRequestEventHorde extends WMH_SpawnRequest {
  public var event_npc: WMH_EventNpc_EventProtectHordeStateSpawning;
  public function onRequestFinished(entities: array<CEntity>) {
    for entity: CEntity in entities {
      this.event_npc.entities.PushBack(entity);
    }
  }
}

class WMH_SpawnRequestGuardedTreasure extends WMH_SpawnRequest {
  public var guarded_treasure: WMH_GuardedTreasure;
  public function onRequestFinished(entities: array<CEntity>) {
    var encounter: WMH_EncounterGuardedTreasure;

    encounter = (new WMH_EncounterGuardedTreasure in this.guarded_treasure)
      .initGuardedTreasure(
        this.guarded_treasure.origin,
        this.entries,
        entities,
        this.guarded_treasure,
        this.encounter_tag
      );

    this.guarded_treasure.onEncounterSpawned(encounter);
  }
}

class WMH_SpawnRequestAreaSpawnPoint extends WMH_SpawnRequest {
  // uses the default `onRequestFinished`
}