class WMH_SpawnRequest {
  public var entries: array<WMH_BestiaryEntry>;
  public var spawn_point: WMH_BiomeSpawnPoint;
  public var aggression_target: CGameplayEntity;
  public var aggression_delay: float; // currently unused
  public var spawn_position: Vector;
  public var encounter_tag: name;
  public var heading: float;
  public var seed: int;

  public var affix_manager: WMH_AffixManager;

  public function init(): WMH_SpawnRequest {
    return this;
  }

  public function withSpawnPoint(spawn_point: WMH_BiomeSpawnPoint): WMH_SpawnRequest {
    this.spawn_point = spawn_point;

    return this;
  }

  public function withSpawnPosition(position: Vector): WMH_SpawnRequest {
    this.spawn_position = position;

    return this;
  }

  public function withBestiaryEntry(bentry: WMH_BestiaryEntry): WMH_SpawnRequest {
    this.entries.PushBack(bentry);

    return this;
  }

  public function withSeed(seed: int): WMH_SpawnRequest {
    this.seed = seed;

    return this;
  }

  public function withHeading(heading: float): WMH_SpawnRequest {
    this.heading = heading;

    return this;
  }

  public function withAffixes(affix_manager: WMH_AffixManager): WMH_SpawnRequest {
    this.affix_manager = affix_manager;

    return this;
  }

  public function withEncounterTag(encounter_tag: name): WMH_SpawnRequest {
    this.encounter_tag = encounter_tag;

    return this;
  }

  // make the spawned creatures target the supplied `target` after the
  // given `delay`
  public function withAggressionTarget(
    target: CGameplayEntity,
    optional delay: float,
  ): WMH_SpawnRequest {
    this.aggression_target = target;
    this.aggression_delay = delay;

    return this;
  }

  public function onRequestFinished(entities: array<CEntity>) {
    // WMHINFO("WMH_SpawnRequest::onRequestFinished, entities.Size() = " + entities.Size());

    thePlayer.wmh.submitOnEncounterSpawned(
      this,
      this.spawn_point,
      this.entries,
      this.encounter_tag,
      entities
    );
  }

  public function GetWorldPosition(): Vector {
    if (this.spawn_point) {
      return this.spawn_point.GetWorldPosition();
    }

    return this.spawn_position;
  }
}

class WMH_SpawnRequestClues extends WMH_SpawnRequest {
  public function onRequestFinished(entities: array<CEntity>) {
    WMHINFO("WMH_SpawnRequestClues::onRequestFinished, entities.Size() = " + entities.Size());

    thePlayer.wmh.submitOnCluesSpawned(
      this,
      this.spawn_point,
      this.entries,
      entities
    );
  }
}

class WMH_SpawnRequestLure extends WMH_SpawnRequest {
  public function onRequestFinished(entities: array<CEntity>) {
    WMHINFO("WMH_SpawnRequestLure::onRequestFinished, entities.Size() = " + entities.Size());

    thePlayer.wmh.submitOnLureSpawned(
      this,
      this.GetWorldPosition(),
      this.entries,
      entities
    );
  }
}