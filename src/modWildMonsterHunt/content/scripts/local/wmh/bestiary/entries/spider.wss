class WMH_BestiaryEntrySpider extends WMH_BestiaryEntry {
  public function init(id: WMH_BestiaryId) {
    super.init(id);

    this.templates.PushBack(
      WMH_EnemyTemplate(
        "characters\npc_entities\monsters\nekker_lvl1.w2ent",,
        "gameplay\journal\bestiary\nekker.journal"
      )
    );

    this.templates.PushBack(
      WMH_EnemyTemplate(
        "characters\npc_entities\monsters\nekker_lvl2.w2ent",,
        "gameplay\journal\bestiary\nekker.journal"
      )
    );

    this.templates.PushBack(
      WMH_EnemyTemplate(
        "characters\npc_entities\monsters\nekker_lvl2_customize.w2ent",,
        "gameplay\journal\bestiary\nekker.journal"
      )
    );

    this.templates.PushBack(
      WMH_EnemyTemplate(
        "characters\npc_entities\monsters\nekker_lvl3_customize.w2ent",,
        "gameplay\journal\bestiary\nekker.journal"
      )
    );

    this.templates.PushBack(
      WMH_EnemyTemplate(
        "characters\npc_entities\monsters\nekker_lvl3__warrior.w2ent",2,
        "gameplay\journal\bestiary\nekker.journal"
      )
    );

    this.templates.PushBack(
      WMH_EnemyTemplate(
        "characters\npc_entities\monsters\nekker_mh__warrior.w2ent",1,
        "gameplay\journal\bestiary\bestiarymonsterhuntmh202.journal"
      )
    );

    this.templates.PushBack(
      WMH_EnemyTemplate(
        "dlc\ep1\data\characters\npc_entities\monsters\black_spider.w2ent",,
        "gameplay\journal\bestiary\bestiarycrabspider.journal"
      )
    );

    this.templates.PushBack(
      WMH_EnemyTemplate(
        "dlc\ep1\data\characters\npc_entities\monsters\black_spider_large.w2ent",2,
        "gameplay\journal\bestiary\bestiarycrabspider.journal"
      )
    );

    this.difficulty_scaling.minimum_count_easy = 2;
    this.difficulty_scaling.maximum_count_easy = 3;
    this.difficulty_scaling.minimum_count_medium = 2;
    this.difficulty_scaling.maximum_count_medium = 3;
    this.difficulty_scaling.minimum_count_hard = 3;
    this.difficulty_scaling.maximum_count_hard = 4;

    this.strength = 4;
    this.biome_tag_bypass = 'Spider';
  }

  public function getSpawnRatio(
    tags: WMH_BiomeTags,
    weather: WMH_WeatherType,
    day_hour: float
  ): float {
    pref_time!({{
      if (vegetation) += 0.1,
      if (humidity) += 0.1,
      if (underground) += 0.1,
      if (lightlow) += 0.1,
      if (structures) -= 0.1,

      morning *= 0.5,
      afternoon nospawn
      night *= 1.5,
    }});
  }

  public function getLocName(): string {
    return GetLocStringByKey("wmh_spider");
  }

  public function onContractCompleted(
    provider: WMH_RewardProvider,
    out contract: WMH_Contract,
    seed: int
  ) {
    super.onContractCompleted(provider, contract, seed);
    provider.appendItem(
      'Quicksilver solution',
      (RandNoiseF(seed, 1.0 + contract.level.value * 0.1) as int) + 1
    );
  }
}
