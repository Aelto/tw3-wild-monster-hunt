class WMH_BestiaryEntry {
  protected var preferences: WMH_SpawnPreferences;
  protected var difficulty_scaling: WMH_DifficultyScaling;
  protected var templates: array<WMH_EnemyTemplate>;

  public function init() {}

  public function canSpawn(biome: WMH_BiomeTags, day_hour: float): bool {
    return this.preferences.isTimeValid(day_hour)
        && this.preferences.isBiomeValid(biome);
  }

  public function buildSpawnList(seed: int): array<string> {
    var spawn_count: int = RandNoiseF(
      seed,
      // todo: use other difficulties than medium
      this.difficulty_scaling.maximum_count_medium,
      this.difficulty_scaling.minimum_count_medium
    ) as int;

    // 1.
    // make a copy of the templates from this entry
    var active_templates: array<WMH_EnemyTemplate>;
    var i: int;

    for (i = 0; i < this.templates.Size(); i += 1) {
      active_templates.PushBack(this.templates[i]);
    }

    var output_templates: array<string>;

    while (output_templates.Size() <= spawn_count) {
      var index: int = RandNoiseF(
        seed + spawn_count,
        active_templates.Size()
      ) as int;

      var selected_template: WMH_EnemyTemplate = active_templates[index];

      var i: int = 0;
      for (i = 0; i < selected_template.count; i += 1) {
        output_templates.PushBack(selected_template.template);

        active_templates[index].max -= 1;

        // reached the limit of this template per group
        if (active_templates[index].max <= 0) {
          // remove it from the available templates
          active_templates.Erase(index);
          break;
        }
      }
    }

    return output_templates;
  }

  // Entries can override this function to tweak the newly spawned entities
  public function onEntitySpawned(entity: CEntity) {
    this.addCustomLoot((entity as CActor).GetInventory());
    (entity as CNewNPC).SetLevel(thePlayer.GetLevel());
  }

  // Entries can override this function to add custom loot to their entities
  public function addCustomLoot(inventory: CInventoryComponent) {
    // inventory.AddMoney(1);
  }
}

struct WMH_EnemyTemplate {
  var template : string;

  // the maximum amount of this template per group
  var max      : int;

  // the amount of this template spawned on a successful roll
  var count    : int;

  var bestiary_entry: string;
}

struct WMH_DifficultyScaling {
  var minimum_count_easy: int;
  var maximum_count_easy: int;
  
  var minimum_count_medium: int;
  var maximum_count_medium: int;
  
  var minimum_count_hard: int;
  var maximum_count_hard: int;
}