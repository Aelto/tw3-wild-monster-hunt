struct WMH_BestiaryId {
  var value: int;
}

class WMH_BestiaryEntry {
  public var id: WMH_BestiaryId;

  protected var difficulty_scaling: WMH_DifficultyScaling;
  protected var templates: array<WMH_EnemyTemplate>;

  public var biome_tag_bypass: name;

  public var strength: float;

  public function init(id: WMH_BestiaryId) {
    this.id = id;
  }

  public function getLocName(): string {
    return "Unknown";
  }

  public function isStrongTarget(): bool {
    return this.strength > NoonWraithStrength!;
  }

  public function canBeTarget(level: WMH_Level): bool {
    if (this.strength <= 0) {
      return false;
    }
     
    // in the early levels we only target the small monsters
    if (level.value < NoonWraithStrength! && !this.isStrongTarget()) {
      return true;
    }

    return this.strength >= level.value - 1 && this.strength <= level.value + 1;
  }

  // This can also be used to determine if an entry can spawn. If the ratio is
  // greater than 0 than it can potentially spawn.
  public function canSpawn(
    biome: WMH_BiomeTags,
    day_hour: float,
    weather: WMH_WeatherType,
    optional biome_tags_bypass: array<name>
  ): bool {
    if (this.isBiomeBypassed(biome_tags_bypass)) {
      return true;
    }

    return this.getSpawnRatio(
      biome,
      weather,
      day_hour
    ) > 0;
  }

  public function isBiomeBypassed(out biome_tags_bypass: array<name>): bool {
    return IsNameValid(this.biome_tag_bypass)
        && biome_tags_bypass.Contains(this.biome_tag_bypass);
  }

  public function getSpawnRatio(
    tags: WMH_BiomeTags,
    weather: WMH_WeatherType,
    day_hour: float
  ): float {
    return 0.0;
  }

  public function buildSpawnList(seed: int): array<WMH_SpawnTemplateAndCount> {
    var spawn_count: int = RandNoiseF(
      seed,
      // todo: use other difficulties than medium
      this.difficulty_scaling.maximum_count_medium,
      this.difficulty_scaling.minimum_count_medium
    ) as int;

    // 1.
    // make a copy of the templates from this entry
    var active_templates: array<WMH_EnemyTemplate>;
    var i: int;

    for (i = 0; i < this.templates.Size(); i += 1) {
      active_templates.PushBack(this.templates[i]);
    }

    var output_templates: array<WMH_SpawnTemplateAndCount>;
    var active_templates_size: int = active_templates.Size();

    var attempts: int = Max(active_templates_size * 2, 10);
    while (attempts > 0) {
      attempts -= 1;
      active_templates_size = active_templates.Size();
      if (active_templates_size <= 0) {
        break;
      }

      if (spawn_count <= 0) {
        break;
      }

      var index: int = RandNoiseF(
        seed + spawn_count,
        active_templates_size
      ) as int;

      var selected_template: WMH_EnemyTemplate = active_templates[index];
      WMHINFO("buildSpawnList() - adding " + selected_template.template);

      var found: bool = false;
      var should_erase: bool = false;
      for (i = 0; i < output_templates.Size(); i += 1) {
        if (!found && output_templates[i].template == selected_template.template) {
          found = true;

          if (output_templates[i].count < selected_template.max) {
            output_templates[i].count += 1;
          }
          else {
            should_erase = true;
          }
        }
      }

      if (!found) {
        output_templates.PushBack(
          WMH_SpawnTemplateAndCount(selected_template.template, 1)
        );
      }

      // reached the limit of this template per group
      if (should_erase) {
        active_templates.EraseFast(index);
      }

      spawn_count -= 1;
    }

    return output_templates;
  }

  // Entries can override this function to tweak the newly spawned entities
  public function onEntitySpawned(entity: CEntity) {
    this.addCustomLoot((entity as CActor).GetInventory());

    var npc: CNewNPC = entity as CNewNPC;
    if (npc) {
      npc.SetLevel(thePlayer.GetLevel());
      npc.abilityManager.SetStatPointMax(
        BCS_Vitality,
        npc.GetMaxHealth() * MaxF(this.strength * 0.5, 1.0)
      );
    }
  }

  public function onContractCompleted(
    provider: WMH_RewardProvider,
    out contract: WMH_Contract,
    seed: int
  ) {
    var prefix: string;

    if (contract.type == WMH_PendingContractType_MILESTONE) {
      prefix = " milestone";
    }

    provider.startGroup(this.getLocName() + prefix + " contract");
  }

  // Entries can override this function to add custom loot to their entities
  public function addCustomLoot(inventory: CInventoryComponent) {
    // todo!("inventory.AddMoney(1)")
  }

  // returns a bestiary entry that is able to spawn clues for the current
  // species
  public function buildCluesEntry(): WMH_BestiaryEntry {
    var bentry: WMH_BestiaryClues = new WMH_BestiaryClues in this;
    bentry.init(WMH_BestiaryId(-1));
    bentry.parent_bentry = this;

    return bentry;
  }
}

struct WMH_EnemyTemplate {
  var template : string;

  // the maximum amount of this template per group
  var max      : int;

  var bestiary_entry: string;
}

struct WMH_DifficultyScaling {
  var minimum_count_easy: int;
  var maximum_count_easy: int;
  
  var minimum_count_medium: int;
  var maximum_count_medium: int;
  
  var minimum_count_hard: int;
  var maximum_count_hard: int;
}