class WMH_AffixManager {
  public var health_modifier: float;
  default health_modifier = 1.0;

  public var damage_modifier: float;
  default damage_modifier = 1.0;

  // %hp per minute
  public var health_regen_percent: float;
  default health_regen_percent = 0.0;

  // @deprecated
  public var durability_loss_modifier: float;
  default durability_loss_modifier = 1.0;

  public var armor_modifier: float;
  default armor_modifier = 1.0;

  public var lifesteal_percent: float;
  default lifesteal_percent = 0.0;

  public function init(level: WMH_Level, seed: int): WMH_AffixManager {
    var difficulty: int = WMH_getDifficulty();
    var count: int = 0;

    // at level 25 (value for a shaelmar), the creature should have 50% chance
    // to get at least one affix.
    var base_chance: float = WMH_difficultyScaleUpPreF(
      0.5 * (1 + level.value / 25),
      // small chance increase as difficulty level goes up
      0.05,
      difficulty
    );

    // every time an affix is added, `count` is increased. Then current_chance
    // is updated to slowly decrease
    var current_chance: float = base_chance / (1 + count);
    if (RandNoiseF(seed + 1, current_chance) > 0.5) {
      count += 1;

      this.health_modifier = 1 + RandNoiseF(
        seed + 2,
        // at level 25, difficulty 1:
        // the creature can have a maximum bonus of 50% health
        WMH_difficultyScaleUpPreF(
          (level.value / 25) * 0.5,
          // affix can be 10% stronger per difficulty level
          0.1,
          difficulty
        )
      );
    }

    var current_chance: float = base_chance / (1 + count);
    if (RandNoiseF(seed + 3, current_chance) > 0.5) {
      count += 1;

      this.damage_modifier = 1 + RandNoiseF(
        seed + 4,
        // at level 25, difficulty 1:
        // the creature can have a maximum bonus of 25% damage
        WMH_difficultyScaleUpPreF(
          (level.value / 25) * 0.25,
          // affix can be 10% stronger per difficulty level
          0.1,
          difficulty
        )
      );
    }

    var current_chance: float = base_chance / (1 + count);
    if (RandNoiseF(seed + 5, current_chance) > 0.5) {
      count += 1;

      this.health_regen_percent = RandNoiseF(
        seed + 6,
        // at level 25 difficulty 1:
        // the creature can have a maximum of 5% HP per minute
        WMH_difficultyScaleUpPreF(
          (level.value / 25) * 0.05,
          // affix can be 10% stronger per difficulty level
          0.1,
          difficulty
        )
      );
    }

    // var current_chance: float = base_chance / (1 + count);
    // if (RandNoiseF(seed + 7, current_chance) > 0.5) {
    //   count += 1;

    //   this.durability_loss_modifier = 1 + RandNoiseF(
    //     seed + 8,
    //     // at level 25, the creature can have a maximum bonus of 50% durability
    //     // loss
    //     WMH_difficultyScaleUpPreF(
    //       (level.value / 25) * 0.5,
    //       // affix can be 10% stronger per difficulty level
    //       0.1,
    //       difficulty
    //     )
    //   );
    // }

    var current_chance: float = base_chance / (1 + count);
    if (RandNoiseF(seed + 9, current_chance) > 0.5) {
      count += 1;

      this.lifesteal_percent = RandNoiseF(
        seed + 10,
        // at level 25, difficulty 1:
        // the creature can have a maximum of 10% lifesteal
        WMH_difficultyScaleUpPreF(
          (level.value / 25) * 0.10,
          // affix can be 10% stronger per difficulty level
          0.1,
          difficulty
        )
      );
    }

    var current_chance: float = base_chance / (1 + count);
    if (RandNoiseF(seed + 11, current_chance) > 0.5) {
      count += 1;

      this.armor_modifier = 1 + RandNoiseF(
        seed + 12,
        // at level 25, the creature can have a maximum bonus of 50% armor
        WMH_difficultyScaleUpPreF(
          (level.value / 25) * 0.5,
          // affix can be 10% stronger per difficulty level
          0.1,
          difficulty
        )
      );
    }

    return this;
  }

  /// Absord the values from the other affix manager to mutate the ones in this
  /// instance. Perform a merge and not a full replacement of the values,
  /// usually by multiplying the values rather than setting them.
  public function absorb(other: WMH_AffixManager) {
    this.health_modifier *= other.health_modifier;
    this.damage_modifier *= other.damage_modifier;
    this.durability_loss_modifier *= other.durability_loss_modifier;
    this.armor_modifier *= other.armor_modifier;

    // percents are also multiplied, but since they're usually in the [0;1]
    // range, multiplying them together would decrease the values which is
    // why we're temporarily adding 1 to the other's value.
    this.health_regen_percent *= (1 + other.health_regen_percent);
    this.lifesteal_percent *= (1 + other.lifesteal_percent);

  }

  /// the `amplifier` value can be used to amplify some of the affixes by the
  /// given amount. Nothing changes unless `amplifier > 1`
  public function applyToNpc(npc: CNewNPC, optional amplifier: int) {
    if (amplifier < 1) {
      amplifier = 0;
    }

    if (this.health_modifier != 1.0 || amplifier > 1) {
      npc.abilityManager.SetStatPointMax(
        BCS_Vitality,
        npc.GetMaxHealth() * this.health_modifier + amplifier * 0.80
      );
    }

    if (this.damage_modifier != 1.0) {
      var su_modifier: SU_BaseDamageModifier;

      su_modifier.damage_dealt_modifier = this.damage_modifier;

      npc.sharedutils_damage_modifiers.PushBack(su_modifier);
    }

    if (this.health_regen_percent > 0) {
      var params: SCustomEffectParams;

      params.effectType = EET_AutoEssenceRegen;
      params.creator = NULL;

      params.effectValue.valueMultiplicative = (this.health_regen_percent) / (60);
      params.sourceName = "wmh_regenerative_affix";
      params.duration = -1;
      
      npc.AddEffectCustom(params);
    }

    if (this.durability_loss_modifier > 1.0) {
      // npc.WMH_addEffect(
      //   (new WMH_HardenedEffect in npc)
      //   .initHardened(-1, this.durability_loss_modifier)
      // );
    }

    if (this.armor_modifier != 1.0) {
      // 
      npc.wmh_armor_bonus = SAbilityAttributeValue(
        0.0,
        // it's a bonus that's added to the vanilla value, see the comment
        // on the wrapMethod for more info.
        this.armor_modifier - 1,
        0.0
      );
    }
  }

  public function toLocString(): string {
    var output: string;

    if (this.damage_modifier != 1.0) {
      if (this.damage_modifier >= 1.5) {
        output += "Deadly ";
      }
      else {
        output += "Vicious ";
      }
    }

    if (this.health_modifier != 1.0) {
      if (this.health_modifier > 1.5) {
        output += "Invincible ";
      }
      else {
        output += "Hearty ";
      }
    }

    if (this.health_regen_percent > 0) {
      if (this.health_regen_percent > 0.1) {
        output += "Immortal ";
      }
      else {
        output += "Regenerating ";
      }
    }

    if (this.armor_modifier > 1.0) {
      output += "Armored ";
    }
    else if (this.armor_modifier < 1.0) {
      output += "Exposed ";
    }

    if (this.durability_loss_modifier > 1.0) {
      output += "Hardened ";
    }

    if (this.lifesteal_percent > 0) {
      output += "Bloodthirsty ";
    }

    return output;
  }
}