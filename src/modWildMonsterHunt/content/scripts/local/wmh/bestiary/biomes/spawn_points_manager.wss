function WMH_getSpawnPointManager(): WMH_SpawnPointManager {
  return thePlayer.wmh.bestiary.spawn_points;
}

// Keeps track of the spawn points around the player, and which of them are
// available for respawn.
class WMH_SpawnPointManager {
  private var region_spawn_points: array<WMH_BiomeSpawnPoint>;
  private var nearby_spawn_points: array<WMH_BiomeSpawnPoint>;
  private var occupied_spawn_points: array<WMH_BiomeSpawnPoint>;

  private var nearby_refresh_ticker: WMH_Ticker;
  private var region_refresh_ticker: WMH_Ticker;

  public function init(): WMH_SpawnPointManager {
    this.nearby_refresh_ticker = (new WMH_Ticker in this).init(25); // seconds
    this.region_refresh_ticker = (new WMH_Ticker in this).init(180); // seconds

    return this;
  }

  public function onHuntStarted() {
    this.maybeRefresh(true);
    this.occupied_spawn_points.Clear();
  }

  public function onBiomeSpawnPointConsumed(point: WMH_BiomeSpawnPoint) {
    this.occupied_spawn_points.PushBack(point);
  }

  public function onBiomeSpawnPointLiberated(point: WMH_BiomeSpawnPoint) {
    this.occupied_spawn_points.Remove(point);
  }

  public function maybeRefresh(optional ignore_tickers: bool) {
    // only refresh the regional spawn points if the list is empty, it is a
    // waste of resources to refresh the list constantly.
    if (this.region_spawn_points.Size() <= 0) {
      if (ignore_tickers || this.region_refresh_ticker.validate()) {
        var radius: float = 4000;
        var max: int = 1000;
        this.region_spawn_points = this.findGlobalSpawnPoints(radius, max);
        // WMHINFO("WMH_SpawnPointManager, nearby_spawn_points.Size() = " + this.nearby_spawn_points.Size());
      }
    }

    if (ignore_tickers || this.nearby_refresh_ticker.validate()) {
      var radius: float = 500;
      var max: int = 250;

      this.nearby_spawn_points.Clear();
      this.findNearbySpawnPoints(
        this.nearby_spawn_points,
        radius,
        max
      );

      WMHINFO("WMH_SpawnPointManager, nearby_spawn_points.Size() = " + this.nearby_spawn_points.Size());
    }
  }

  public function UNUSED_getRandomNearbyValidSpawnPoint(seed: int): WMH_BiomeSpawnPoint {
    var valid_spawn_points: array<WMH_BiomeSpawnPoint> = this
      .getValidSpawnPoints();

    var size: int = valid_spawn_points.Size();

    if (size <= 0) {
      return NULL;
    }

    var index: int = RandNoiseF(seed, size) as int;

    return valid_spawn_points[index];
  }

  public function getRegionValidSpawnPoints(optional ignore_respawn: bool): array<WMH_BiomeSpawnPoint> {
    var output: array<WMH_BiomeSpawnPoint>;

    var point: WMH_BiomeSpawnPoint;
    for point: WMH_BiomeSpawnPoint in this.region_spawn_points {
      if (ignore_respawn || point.canRespawn()) {
        output.PushBack(point);
      }
    }

    return output;
  }

  public function getRegionSpawnPointsCount(): int {
    return this.region_spawn_points.Size();
  }

  public function getValidSpawnPoints(optional ignore_respawn: bool): array<WMH_BiomeSpawnPoint> {
    var output: array<WMH_BiomeSpawnPoint>;

    var point: WMH_BiomeSpawnPoint;
    for point: WMH_BiomeSpawnPoint in this.nearby_spawn_points {
      var position: Vector = point.GetWorldPosition();

      if (ignore_respawn || point.canRespawn()) {
        output.PushBack(point);
      }
    }

    return output;
  }

  public function getNearbyEventNpcSpawnPoints(
    out output: array<WMH_EventNpcSpawnPoint>
  ) {
    var entities: array<CGameplayEntity>;
    var radius: float = 250;

    FindGameplayEntitiesInRange(
      entities,
      thePlayer as CNode,
      radius,
      20, // max results
      'WMH_EventNpcSpawnPoint'
    );

    for entity: CGameplayEntity in entities {
      var point: WMH_EventNpcSpawnPoint = entity as WMH_EventNpcSpawnPoint;

      if (point) {
        output.PushBack(point);
      }
    }
  }

  public function getNearbyGuardedTreasureSpawnPoints(
    out output: array<WMH_GuardTreasureSpawnPoint>
  ) {
    var entities: array<CGameplayEntity>;
    var radius: float = 250;

    FindGameplayEntitiesInRange(
      entities,
      thePlayer as CNode,
      radius,
      20, // max results
      'WMH_GuardTreasureSpawnPoint'
    );

    for entity: CGameplayEntity in entities {
      var point: WMH_GuardTreasureSpawnPoint = entity as WMH_GuardTreasureSpawnPoint;

      if (point) {
        output.PushBack(point);
      }
    }
  }

  public function getNearbyValidSpawnPointFallbacks(
    out output: array<WMH_BiomeSpawnPointFallback>
  ) {
    var entities: array<CGameplayEntity>;
    var radius: float = 250;

    FindGameplayEntitiesInRange(
      entities,
      thePlayer as CNode,
      radius,
      20, // max results
      'WMH_BiomeSpawnPointFallback'
    );

    for entity: CGameplayEntity in entities {
      var point: WMH_BiomeSpawnPointFallback = entity as WMH_BiomeSpawnPointFallback;

      if (point) {
        if (point.canRespawn()) {
          output.PushBack(point);
        }
      }
    }
  }

  public function countNearbyOccupiedSpawnPoints(
    position: Vector,
    radius: float
  ): int {
    var count: int = 0;
    var radius_sq: float = radius * radius;

    for point: WMH_BiomeSpawnPoint in this.occupied_spawn_points {
      var distance: float = VecDistanceSquared2D(
        position,
        point.GetWorldPosition()
      );

      if (distance <= radius_sq) {
        count += 1;
      }
    }

    return count;
  }

  public function countNearbyWaitingForRespawnSpawnPoints(
    position: Vector,
    radius: float
  ): int {
    var count: int = 0;
    var radius_sq: float = radius * radius;

    for point: WMH_BiomeSpawnPoint in this.nearby_spawn_points {
      if (!point.isWaitingForRespawn()) {
        continue;
      }

      var distance: float = VecDistanceSquared2D(
        position,
        point.GetWorldPosition()
      );

      if (distance <= radius_sq) {
        count += 1;
      }
    }

    return count;
  }

  private function findNearbySpawnPoints(
    out output: array<WMH_BiomeSpawnPoint>,
    radius: float,
    optional count: int
  ) {

    if (count < 0) {
      count = 100;
    }

    var entities: array<CGameplayEntity>;
    FindGameplayEntitiesInRange(
      entities,
      thePlayer as CNode,
      radius,
      count, // max results
      'WMH_BiomeSpawnPoint'
    );

    for entity: CGameplayEntity in entities {
      var point: WMH_BiomeSpawnPoint = entity as WMH_BiomeSpawnPoint;

      if (point) {
        output.PushBack(point);
      }
    }
  }

  private function findGlobalSpawnPoints(
    radius: float,
    count: int
  ): array<WMH_BiomeSpawnPoint> {
    var entities: array<CEntity>;

    theGame.GetEntitiesByTag('WMH_BiomeSpawnPoint', entities);

    var output: array<WMH_BiomeSpawnPoint>;
    var i: int;

    // square the radius
    radius *= radius;
    var position: Vector = thePlayer.GetWorldPosition();

    for (i = 0; i < entities.Size(); i += 1) {
      var current: WMH_BiomeSpawnPoint = entities[i] as WMH_BiomeSpawnPoint;

      if (current) {
        if (
          radius <= 0
          || VecDistanceSquared2D(position, current.GetWorldPosition()) <= radius
        ) {
          output.PushBack(current);
        }
      }
    }

    return output;
  }
}