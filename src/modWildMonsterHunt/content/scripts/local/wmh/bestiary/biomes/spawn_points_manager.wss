// Keeps track of the spawn points around the player, and which of them are
// available for respawn.
class WMH_SpawnPointManager {
  private var region_spawn_points: array<WMH_BiomeSpawnPoint>;
  private var nearby_spawn_points: array<WMH_BiomeSpawnPoint>;

  private var nearby_refresh_ticker: WMH_Ticker;
  private var region_refresh_ticker: WMH_Ticker;

  public function init(): WMH_SpawnPointManager {
    this.nearby_refresh_ticker = (new WMH_Ticker in this).init(60); // seconds
    this.region_refresh_ticker = (new WMH_Ticker in this).init(180); // seconds

    return this;
  }

  public function onHuntStarted() {
    this.maybeRefresh(true);
  }

  public function maybeRefresh(optional ignore_tickers: bool) {
    if (ignore_tickers || this.nearby_refresh_ticker.validate()) {
      var radius: float = 500;
      var max: int = 500;
      this.nearby_spawn_points = this.findNearbySpawnPoints(radius, max);
      WMHINFO("WMH_SpawnPointManager, nearby_spawn_points.Size() = " + this.nearby_spawn_points.Size());
    }

    WMHINFO("WMH_SpawnPointManager, refreshing nearby spawn points");

    if (ignore_tickers || this.region_refresh_ticker.validate()) {
      var radius: float = 4000;
      var max: int = 500;
      this.region_spawn_points = this.findNearbySpawnPoints(radius, max);
      WMHINFO("WMH_SpawnPointManager, nearby_spawn_points.Size() = " + this.nearby_spawn_points.Size());
    }
  }

  public function getRandomNearbyValidSpawnPoint(seed: int): WMH_BiomeSpawnPoint {
    var valid_spawn_points: array<WMH_BiomeSpawnPoint> = this
      .getValidSpawnPoints();

    var size: int = valid_spawn_points.Size();

    if (size <= 0) {
      return NULL;
    }

    var index: int = RandNoiseF(seed, size) as int;

    return valid_spawn_points[index];
  }

  public function getRegionValidSpawnPoints(): array<WMH_BiomeSpawnPoint> {
    var output: array<WMH_BiomeSpawnPoint>;

    var point: WMH_BiomeSpawnPoint;
    for point: WMH_BiomeSpawnPoint in this.region_spawn_points {
      if (point.canRespawn()) {
        output.PushBack(point);
      }
    }

    return output;
  }

  private function getValidSpawnPoints(): array<WMH_BiomeSpawnPoint> {
    var output: array<WMH_BiomeSpawnPoint>;

    var point: WMH_BiomeSpawnPoint;
    for point: WMH_BiomeSpawnPoint in this.nearby_spawn_points {
      if (point.canRespawn()) {
        output.PushBack(point);
      }
    }

    return output;
  }

  private function findNearbySpawnPoints(
    radius: float,
    count: int
  ): array<WMH_BiomeSpawnPoint> {
    var entities: array<CGameplayEntity>;

    FindGameplayEntitiesInRange(
      entities,
      thePlayer,
      radius,
      count,
      '',
      FLAG_ExcludePlayer,
      , // target
      'WMH_BiomeSpawnPoint'
    );

    var output: array<WMH_BiomeSpawnPoint>;
    var i: int;

    for (i = 0; i < entities.Size(); i += 1) {
      var current: WMH_BiomeSpawnPoint = entities[i] as WMH_BiomeSpawnPoint;

      if (current) {
        output.PushBack(current);
      }
    }

    return output;
  }
}