@addMethod(WMH_Master)
function submitOnMeldCauldron() {
  var entity: CEntity = theGame.GetEntityByTag('WMH_HerbalistCauldron');
  var cauldron: WMH_HerbalistCauldron = entity as WMH_HerbalistCauldron;

  if (cauldron) {
    cauldron.onMeldCauldron();
  }
}

class WMH_HerbalistCauldron extends W3Container {
  protected var popup_data: W3ItemSelectionPopupData;

  // used to display real time information about what's in the cauldron,
  protected var oneliner: SU_OnelinerEntity;

  event OnSpawned( spawnData : SEntitySpawnData )
  {
    super.OnSpawned( spawnData );
    
    // always mark this container as quest container
    SetIsQuestContainer( true );
    this.AddTimer('RefreshOnelinerTimer', 2.0);
  }

  event OnInteraction( actionName : string, activator : CEntity ) {
    this.openItemSelectionMenu();
  }

  event OnInteractionActivated(actionName : string, activator : CEntity) {
    // do not call super as it will probably disable the interaction.
    // super.OnInteractionActivated(actionName, activator);
    this.Enable(true, false, true);
  }

  event OnInteractionActivationTest(
    interactionComponentName: string,
    activator : CEntity
  ) {
    this.Enable(true, false, true);
    return true;
  }

  // Called when an item is taken from the container
  event OnItemTaken(itemId: SItemUniqueId, quantity: int) {}
  event OnAreaEnter( area : CTriggerAreaComponent, activator : CComponent ) {
    this.updateOneliner();
  }

  public function onMeldCauldron() {
    var yields_count: int = this.getYieldsCount();

    if (yields_count > 0) {
      var cost: int = this.getCostPerYield();
      var items_melded: int = 0;
      while (yields_count > 0 && thePlayer.GetMoney() > cost) {
        yields_count -= 1;

        thePlayer.RemoveMoney(cost);
        thePlayer.wmh.submitOnMeldItem();
        items_melded += 1;
      }

      if (items_melded > 0) {
        WMHHUD(
          "" 
          + (cost * items_melded)
          + " Crowns were used to meld "
          + items_melded
          + " items."
        );

        this.GetInventory().RemoveAllItems();
      }
    }

    this.Enable( true, false, true );
    this.updateOneliner();
  }

  private function openItemSelectionMenu() {
    var itemSelectionPopup: CR4ItemSelectionPopup;  
    var tags: array<name>;  
    var firstTag: name;
    
    theGame.GetGuiManager().SetLastOpenedCommonMenuName( 'None' );

    // UI popup requires entity tag to be unique, decoration should not work if
    // it's not  
    tags = GetTags();
    firstTag = tags[0];
  
    this.popup_data = new W3ItemSelectionPopupData in theGame.GetGuiManager();
    this.popup_data.targetInventory = this.GetInventory();
    this.popup_data.collectorTag = firstTag;
    this.popup_data.overrideQuestItemRestrictions = true;
    
    // Following filter settings are modified per child class type
    var tags: array<name>;
    tags.PushBack('CraftingIngredient');
    tags.PushBack('AlchemyIngredient');
    tags.PushBack('alchemy_ingredient');

    var forbidden: array<name>;
    forbidden.PushBack('NoShow');
    forbidden.PushBack('Body');
    forbidden.PushBack('Quest');

    var empty: array<name>;
  
    this.popup_data.filterTagsList = tags;
    this.popup_data.filterForbiddenTagsList = forbidden;
    this.popup_data.selectionMode = EISPM_Painting;
    this.popup_data.checkTagsOR = true;
    this.popup_data.categoryFilterList = empty;
    
    theGame.RequestPopup('ItemSelectionPopup', this.popup_data);
    AddTimer( 'RefreshOnelinerTimer', 0.1 );
  }

  timer function RefreshOnelinerTimer(delta: float , id: int) {
    if (this.popup_data) {
      this.AddTimer( 'RefreshOnelinerTimer', 0.1 );
    }
    else {
      this.updateOneliner();
    }
  }

  private function getPointsPerYield(): int {
    return 450;
  }

  private function getCostPerYield(): int {
    return this.getPointsPerYield();
  }

  private function getCurrentTotalPoints(): int {
    var inventory: CInventoryComponent = this.GetInventory();
    var items: array<SItemUniqueId>;

    this.GetInventory().GetAllItems(items);

    var output: int;
    for item: SItemUniqueId in items {
      WMHINFO("item in cauldron: " + inventory.GetItemName(item));
      WMHINFO("item price = " + inventory.GetItemPrice(item));

      output += inventory.GetItemPrice(item) * inventory.GetItemQuantity(item);
    }

    return output;
  }

  private function getYieldsCount(): int {
    return this.getCurrentTotalPoints() / this.getPointsPerYield();
  }

  private function updateOneliner() {
    if (!this.oneliner) {
      this.oneliner = SU_onelinerEntity("", this);
    }

    var inventory: CInventoryComponent = this.GetInventory();
    var items: array<SItemUniqueId>;

    inventory.GetAllItems(items);

    var message: string;
    var total_prices: int = this.getCurrentTotalPoints();
    var points_per_product: int = this.getPointsPerYield();
    var yields_count: int = total_prices / points_per_product;
    var points_til_next: int = total_prices - points_per_product * yields_count;
    
    if (items.Size() > 0) {
      var next_item: name = thePlayer.wmh.loot.getNextMeldItem(yields_count);
      var next_item_loc: string = GetLocStringByKeyExt(
        theGame.GetDefinitionsManager()
        .GetItemLocalisationKeyName(next_item)
      );

      var crowns_icon: string = "<img src='img://"
                      + inventory.GetItemIconPathByName('Crowns')
                      + "' height='18' width='18' />";

      message = "<font size='28'>" + next_item_loc + "</font>"
              + "<br/>Next yield: "
              + points_til_next + "/"
              + "<font size='18'>" + points_per_product + "</font>"
              + "<br/>Cost: " + this.getCostPerYield() + crowns_icon
              + "/<font size='18'>yield</font>";

      if (yields_count > 0) {
        message += "<br/>Products in queue: " + yields_count;
      }
    }
    else {
      message = "<u>The pot is empty</u><br/>Drop alchemy items for unique rewards."
              + "<br/><font size='18'>Meld the items by completing contracts</font>"
              + "<br/><font size='18'>Products are stored in the barrel nearby</font>";
    }

    this.oneliner.text = message;
    this.oneliner.offset = Vector(0, 0, 1.8, 0);
    this.oneliner.render_distance = 5;
    this.oneliner.update();
  }
}