@addMethod(WMH_Master)
function submitOnMeldCauldron() {
  var entity: CEntity = theGame.GetEntityByTag('WMH_HerbalistCauldron');
  var cauldron: WMH_HerbalistCauldron = entity as WMH_HerbalistCauldron;

  if (cauldron) {
    cauldron.onMeldCauldron();
  }
}

/// If set to true, the CR4ItemSelectionPopup class will display a quantity
/// select modal after the item is selected.
@addField(W3ItemSelectionPopupData)
var wmh_quantity_selection: bool;

// it's an event OnCallSelectItem,
@wrapMethod(CR4ItemSelectionPopup)
function OnCallSelectItem(item: SItemUniqueId) {
  if (
    this.m_DataObject.wmh_quantity_selection
    && m_DataObject.selectionMode == EISPM_Painting
    && thePlayer.GetInventory().GetItemQuantity(item) > 2
  ) {
    this.ClosePopup();

    var cauldron: WMH_HerbalistCauldron;
    cauldron = this.m_containerOwner as WMH_HerbalistCauldron;

    if (cauldron) {
      cauldron.onItemTransferSelectQuantity(item);
    }
  }
  else {
    return wrappedMethod(item);
  }
}


class WMH_CauldronModuleDialog extends CR4HudModuleDialog {
  var container_inventory: CInventoryComponent;
  var item_id: SItemUniqueId;
  var cauldron: WMH_HerbalistCauldron;
  
  function DialogueSliderDataPopupResult(value: float, optional isItemReward: bool) {
    super.DialogueSliderDataPopupResult(0,false);

    theGame.CloseMenu('PopupMenu');
    theInput.SetContext(thePlayer.GetExplorationInputContext());
    theGame.SetIsDialogOrCutscenePlaying(false);
    theGame.GetGuiManager().RequestMouseCursor(false);
    
    if (value >= 1) {
      thePlayer.GetInventory()
        .GiveItemTo(this.cauldron.GetInventory(), this.item_id, value as int);

      theSound.SoundEvent("gui_pick_up_herbs");
    }

    cauldron.RemoveTimer('RefreshOnelinerTimer');
    cauldron.RemoveTimer('RefreshMeldingPointsTimer');
    cauldron.AddTimer('RefreshOnelinerTimer', 0.1);
    cauldron.AddTimer('RefreshMeldingPointsTimer', 5.0);
  }

  function openItemQuantitySelectorWindow(
    cauldron: WMH_HerbalistCauldron,
    item_to_transfer: SItemUniqueId
  ) {
    this.cauldron = cauldron;
    this.item_id = item_to_transfer;

    var data: BettingSliderData;
    data = new BettingSliderData in this;
    data.ScreenPosX = 0.62;
    data.ScreenPosY = 0.65;

    // var item_name: string = thePlayer.GetInventory()
    //   .GetItemLocalizedNameByUniqueID(item_to_transfer);

    var item_name: string = "<img src='img://"
      + thePlayer.GetInventory().GetItemIconPathByUniqueID(item_to_transfer)
      + "' height='18' width='18' />";

    data.SetMessageTitle("Amount of " + item_name + " to drop in the cauldron?");
		data.dialogueRef = this;
		data.BlurBackground = false;

    data.minValue = 0;
		data.maxValue = thePlayer.GetInventory().GetItemQuantity(item_to_transfer);
    data.currentValue = Max(1, data.maxValue - 5);

    theGame.RequestMenu('PopupMenu', data);
  }
}

class WMH_HerbalistCauldron extends W3Container {
  protected var popup_data: W3ItemSelectionPopupData;
  protected var quantity_dialog: WMH_CauldronModuleDialog;

  // used to display real time information about what's in the cauldron,
  protected var oneliner: SU_OnelinerEntity;

  event OnSpawned( spawnData : SEntitySpawnData )
  {
    super.OnSpawned( spawnData );
    
    // always mark this container as quest container
    SetIsQuestContainer( true );
    this.AddTimer('RefreshOnelinerTimer', 2.0);
  }

  event OnInteraction( actionName : string, activator : CEntity ) {
    this.openItemSelectionMenu();
  }

  event OnInteractionActivated(actionName : string, activator : CEntity) {
    // do not call super as it will probably disable the interaction and update
    // the inventory's content.
    // super.OnInteractionActivated(actionName, activator);

    WMHTUTOFACT(
      'WMH_HerbalistCauldron',
      "Melding Cauldron",
      "Shupe the Troll beckons you to find rare and unique delicacies for his bubbling <font color='#CD7D03'>Melting Cauldron</font>. In return, he'll offer you a taste of his... delightful concoction. Impress Shupe with truly rare ingredients, and he might reward you with ancient recipes and schematics he snatched from his adventurous days.<br/><br/>But don't try to fool him with common items like Drowner hair, shells, or stones - Shupe's refined palate demands the extraordinary. And remember, a hearty stock needs plenty of bones, so be generous with those if you want the best reward !"
    );

    this.Enable(true, false, true);
  }

  event OnInteractionActivationTest(
    interactionComponentName: string,
    activator : CEntity
  ) {
    this.Enable(true, false, true);
    return true;
  }

  // Called when an item is taken from the container
  event OnItemTaken(itemId: SItemUniqueId, quantity: int) {}
  event OnAreaEnter( area : CTriggerAreaComponent, activator : CComponent ) {
    this.updateMeldPointsAndOneliner();
  }

  public function onMeldCauldron() {
    var yields_count: int = this.getYieldsCount();
    var provider: WMH_RewardProvider = new WMH_RewardProvider in this;

    var loot_manager: WMH_LootManager = WMH_getLootManager();
    var items_melded: int = 0;
    while (this.getYieldsCount() > 0) {
      var seed: int = (thePlayer.wmh.storage.herbalist.melding_level.value as int);
      loot_manager.onMeldItem(seed, provider);
      thePlayer.wmh.submitOnMeldingLevelIncrease(1);

      var new_points: int = this.getCurrentTotalPoints();
      new_points -= this.getPointsPerYield();
      this.setCurrentTotalPoints(new_points);

      items_melded += 1;
    }

    if (items_melded > 0) {
      theSound.SoundEvent("gui_inventory_potion_attach");
      provider.transferItems(thePlayer.GetInventory());
      WMHPOPUP(provider.toHtml(thePlayer.GetInventory()));
    }

    this.Enable( true, false, true );
    this.updateMeldPointsAndOneliner();
  }

  public function onItemTransferSelectQuantity(item: SItemUniqueId) {
    this.quantity_dialog = new WMH_CauldronModuleDialog in this;
    this.quantity_dialog.openItemQuantitySelectorWindow(this, item);
  }

  private function openItemSelectionMenu() {
    var itemSelectionPopup: CR4ItemSelectionPopup;  
    var tags: array<name>;  
    var firstTag: name;
    
    theGame.GetGuiManager().SetLastOpenedCommonMenuName( 'None' );

    // UI popup requires entity tag to be unique, decoration should not work if
    // it's not  
    tags = GetTags();
    firstTag = tags[0];
  
    this.popup_data = new W3ItemSelectionPopupData in theGame.GetGuiManager();
    this.popup_data.targetInventory = this.GetInventory();
    this.popup_data.collectorTag = firstTag;
    this.popup_data.overrideQuestItemRestrictions = true;
    
    // Following filter settings are modified per child class type
    var tags: array<name>;
    tags.PushBack('CraftingIngredient');
    tags.PushBack('crafting_ingredient');
    tags.PushBack('AlchemyIngredient');
    tags.PushBack('alchemy_ingredient');
    tags.PushBack('mod_crafting');
    tags.PushBack('mod_alchemy');

    var forbidden: array<name>;
    forbidden.PushBack('NoShow');
    forbidden.PushBack('Body');
    forbidden.PushBack('Quest');

    var empty: array<name>;
  
    this.popup_data.filterTagsList = tags;
    this.popup_data.filterForbiddenTagsList = forbidden;
    this.popup_data.selectionMode = EISPM_Painting;
    this.popup_data.checkTagsOR = true;
    this.popup_data.categoryFilterList = empty;
    this.popup_data.wmh_quantity_selection = true;
    
    theGame.RequestPopup('ItemSelectionPopup', this.popup_data);
    this.AddTimer('RefreshOnelinerTimer', 0.1);
    this.AddTimer('RefreshMeldingPointsTimer', 5.0);
  }

  timer function RefreshOnelinerTimer(delta: float , id: int) {
    if (this.popup_data) {
      this.AddTimer( 'RefreshOnelinerTimer', 0.1 );
    }
    else {
      this.updateMeldPointsAndOneliner();
    }
  }

  timer function RefreshMeldingPointsTimer(delta: float , id: int) {
    if (this.popup_data) {
      this.AddTimer('RefreshMeldingPointsTimers', 5.0);
    }
    else {
      this.consumeInventoryForMeldPoints();
      this.onMeldCauldron();
    }
  }

  private function getPointsPerYield(): int {
    return Min(
      100 + (thePlayer.wmh.storage.herbalist.melding_level.value as int) * 35,
      500
    );
  }

  private function getCostPerYield(): int {
    return 0; // used to cost crowns per yield, but no longer the case
  }

  private function getCurrentTotalPoints(): int {
    return Max(FactsQueryLatestValue("WMH_HerbalistCauldron_meldingPoints"), 0);
  }

  private function setCurrentTotalPoints(value: int) {
    FactsSet("WMH_HerbalistCauldron_meldingPoints", value);
  }

  private function getInventoryItemsTotalCost(): int {
    var inventory: CInventoryComponent = this.GetInventory();
    var items: array<SItemUniqueId>;

    this.GetInventory().GetAllItems(items);

    var output: int;
    for item: SItemUniqueId in items {
      WMHINFO("item in cauldron: " + inventory.GetItemName(item));
      WMHINFO("item price = " + inventory.GetItemPrice(item));

      if (inventory.ItemHasTag(item, 'WMH_CauldronIngredient_One')) {
        output += 10 * inventory.GetItemQuantity(item);
      }
      else {
        output += inventory.GetItemPrice(item) * inventory.GetItemQuantity(item);
      }
    }

    return output;
  }

  private function getYieldsCount(): int {
    return this.getCurrentTotalPoints() / this.getPointsPerYield();
  }

  private function consumeInventoryForMeldPoints() {
    var new_points: int = this.getInventoryItemsTotalCost();

    this.setCurrentTotalPoints(this.getCurrentTotalPoints() + new_points);
    this.GetInventory().RemoveAllItems();
  }

  /// update the meld points fact from any new item that's in the inventory.
  /// Then update the oneliner to reflect the new amount of points
  private function updateMeldPointsAndOneliner() {
    if (!this.oneliner) {
      this.oneliner = SU_onelinerEntity("", this);
    }

    var message: string;
    var total_prices: int = this.getCurrentTotalPoints() + this.getInventoryItemsTotalCost();
    var points_per_product: int = this.getPointsPerYield();
    var yields_count: int = total_prices / points_per_product;
    var points_til_next: int = total_prices - points_per_product * yields_count;
    
    if (total_prices > 0) {
      var next_item: name = thePlayer.wmh.loot.getNextMeldItem(yields_count);
      var next_item_loc: string = GetLocStringByKeyExt(
        theGame.GetDefinitionsManager()
        .GetItemLocalisationKeyName(next_item)
      );

      message = "<font size='28'>" + next_item_loc + "</font>"
              + "<br/>Next yield: "
              + points_til_next + "/"
              + "<font size='18'>" + points_per_product + "</font>";

      if (yields_count > 0) {
        message += "<br/>Products in queue: " + yields_count;
      }
    }
    else {
      message = "<u>The pot is empty</u><br/>Drop alchemy items for unique rewards.";
    }

    this.oneliner.text = message;
    this.oneliner.offset = Vector(0, 0, 1.8, 0);
    this.oneliner.render_distance = 5;
    this.oneliner.update();
  }
}