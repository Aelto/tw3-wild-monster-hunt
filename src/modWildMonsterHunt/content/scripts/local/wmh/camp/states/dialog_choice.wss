state DialogChoice in WMH_CampManager {
  var camera: WMH_StaticCamera;

  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.DialogChoice_main();
  }

  entry function DialogChoice_main() {
    parent.dialog_hover_camera_0 = WMH_getStaticCamera();
    parent.dialog_hover_camera_1 = WMH_getStaticCamera();
    this.camera = WMH_getStaticCamera();
    this.displayChoicesMain();
    parent.GotoState('Waiting');
  }

  latent function displayChoicesMain() {
    var choices: array<SSceneChoice>;

    choices.PushBack(SSceneChoice(
      "Improve Witcher camp",
      true, // emphasis
      false, // previouslyChoosen
      false, // disabled
      DialogAction_HOUSE,
      'ImproveWitcherCamp'
    ));

    choices.PushBack(SSceneChoice(
      "Farewell.",
      false,
      true,
      false,
      DialogAction_EXIT,
      'Cancel'
    ));

    while (true) {
      this.camera.teleportAndLookAt(
        Vector(732.089, 627.481, 505.123),
        Vector(
          724.006,
          624.475,
          499.528
        )
      );
      this.camera.SetFov(40.0);

      var position: Vector = thePlayer.GetWorldPosition();
      var rotation: EulerAngles = rotation;
      rotation.Yaw = 210;

      theGame.FadeOut(0.5);
      thePlayer.TeleportWithRotation(
        Vector(724.10, 624.88, 500.05, position.W),
        rotation
      );
      this.camera.start();
      theGame.FadeInAsync(0.8);

      var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
      SU_closeDialogChoiceInterface();

      if (response.playGoChunk == 'ImproveWitcherCamp') {
        this.displayChoicesImproveWitcherCamp();
      }
      else {
        this.camera.Stop();
        Sleep(0.25);
        parent.GotoState('Waiting');
        return;
      }
    }
  }

  private latent function displayChoicesImproveWitcherCamp() {
    var choices: array<SSceneChoice>;

    choices.PushBack(SSceneChoice(
      StrReplace(
        "Hire herbalist ({{price}})",
        "{{price}}",
        parent.unlockHerbalistPrice()
      ),
      true, // emphasis
      parent.isHerbalistUnlocked(), // previouslyChoosen
      false, // disabled
      DialogAction_SHOPPING,
      'UnlockHerbalist'
    ));

    choices.PushBack(SSceneChoice(
      StrReplace(
        "Hire Merchant ({{price}})",
        "{{price}}",
        parent.unlockMerchantPrice()
      ),
      true, // emphasis
      parent.isMerchantUnlocked(), // previouslyChoosen
      false, // disabled
      DialogAction_SHOPPING,
      'UnlockMerchant'
    ));

    choices.PushBack(SSceneChoice(
      StrReplace(
        "Small garden plot ({{price}})",
        "{{price}}",
        parent.unlockGarden0Price()
      ),
      true, // emphasis
      parent.isGarden0Unlocked(), // previouslyChoosen
      false, // disabled
      DialogAction_SHOPPING,
      'UnlockGarden0'
    ));

    choices.PushBack(SSceneChoice(
      StrReplace(
        "Large garden plot ({{price}})",
        "{{price}}",
        parent.unlockGarden1Price()
      ),
      true, // emphasis
      parent.isGarden1Unlocked(), // previouslyChoosen
      false, // disabled
      DialogAction_SHOPPING,
      'UnlockGarden1'
    ));

    choices.PushBack(SSceneChoice(
      StrReplace(
        "Armor tools ({{price}})",
        "{{price}}",
        parent.unlockArmorsPrice()
      ),
      true, // emphasis
      parent.isArmorsUnlocked(), // previouslyChoosen
      false, // disabled
      DialogAction_SHOPPING,
      'UnlockArmors'
    ));

    choices.PushBack(SSceneChoice(
      StrReplace(
        "Weapon tools ({{price}})",
        "{{price}}",
        parent.unlockWeaponsPrice()
      ),
      true, // emphasis
      parent.isWeaponsUnlocked(), // previouslyChoosen
      false, // disabled
      DialogAction_SHOPPING,
      'UnlockWeapons'
    ));

    choices.PushBack(SSceneChoice(
      "Cancel",
      false,
      true,
      false,
      DialogAction_GETBACK,
      'Cancel'
    ));

    while (true) {
      // simulate right away a hover on the first choice:
      parent.onDialogHover(choices[0]);

      var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
      SU_closeDialogChoiceInterface();

      if (response.playGoChunk == 'UnlockHerbalist') {}
      else if (response.playGoChunk == 'UnlockMerchant') {}
      else if (response.playGoChunk == 'UnlockArmors') {}
      else if (response.playGoChunk == 'UnlockWeapons') {}
      else if (response.playGoChunk == 'unlockGarden0') {}
      else if (response.playGoChunk == 'unlockGarden1') {}
      else {
        parent.dialog_hover_camera_0.Stop();
        parent.dialog_hover_camera_1.Stop();
        return;
      }
    }

  }
}