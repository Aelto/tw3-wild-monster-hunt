state DialogChoice in WMH_CampManager {
  var camera: WMH_StaticCamera;

  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.DialogChoice_main();
  }

  entry function DialogChoice_main() {
    parent.dialog_hover_camera_0 = WMH_getStaticCamera();
    parent.dialog_hover_camera_1 = WMH_getStaticCamera();
    this.camera = WMH_getStaticCamera();

    parent.conversation = (new WMH_ConversationManager in this)
      .init()
      .registerActor(parent.camp_manager_npc as CActor)
      .registerActor(thePlayer as CActor);

    this.displayChoicesMain();
    parent.conversation
      .playLine(
        thePlayer,
        452638, // Geralt choice: Farewell
        WMH_AnimationCategory_Goodbye,
        WMH_AnimationCategory_Goodbye
      );

    parent.GotoState('Waiting');
  }

  latent function displayChoicesMain() {
    var choices: array<SSceneChoice>;

    choices.PushBack(SSceneChoice(
      "Improve Witcher camp",
      true, // emphasis
      false, // previouslyChoosen
      false, // disabled
      DialogAction_HOUSE,
      'ImproveWitcherCamp'
    ));

    choices.PushBack(SSceneChoice(
      "Farewell.",
      false,
      true,
      false,
      DialogAction_EXIT,
      'Cancel'
    ));

    var say_greetings: bool = true;

    while (true) {
      this.camera.teleportAndLookAt(
        Vector(732.089, 627.481, 505.123),
        Vector(
          724.006,
          624.475,
          499.528
        )
      );
      this.camera.SetFov(40.0);

      var position: Vector = thePlayer.GetWorldPosition();
      var rotation: EulerAngles = rotation;
      rotation.Yaw = 210;

      theGame.FadeOut(0.5);
      thePlayer.TeleportWithRotation(
        Vector(724.10, 624.88, 500.05, position.W),
        rotation
      );
      this.camera.start();
      theGame.FadeInAsync(0.8);

      if (say_greetings) {
        say_greetings = false;

        parent.conversation.playLine(
          thePlayer,
          1127230, // 0x0011333e  Geralt: Greetings
          WMH_AnimationCategory_Greetings,
          // listeners play agreeing animation
          WMH_AnimationCategory_Greetings
        );
      }

      var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
      SU_closeDialogChoiceInterface();

      if (response.playGoChunk == 'ImproveWitcherCamp') {
        parent.conversation.startSimulatingConversation();
        this.displayChoicesImproveWitcherCamp();
        parent.conversation.stopSimulatingConversation();
      }
      else {
        this.camera.Stop();
        Sleep(0.25);
        return;
      }
    }
  }

  private latent function displayChoicesImproveWitcherCamp() {
    var choices: array<SSceneChoice>;

    choices.PushBack(SSceneChoice(
      StrReplace(
        "Hire herbalist ({{price}})",
        "{{price}}",
        parent.unlockHerbalistPrice()
      ),
      true, // emphasis
      parent.isHerbalistUnlocked(), // previouslyChoosen
      false, // disabled
      DialogAction_SHOPPING,
      'UnlockHerbalist'
    ));

    choices.PushBack(SSceneChoice(
      StrReplace(
        "Hire Merchant ({{price}})",
        "{{price}}",
        parent.unlockMerchantPrice()
      ),
      true, // emphasis
      parent.isMerchantUnlocked(), // previouslyChoosen
      false, // disabled
      DialogAction_SHOPPING,
      'UnlockMerchant'
    ));

    choices.PushBack(SSceneChoice(
      StrReplace(
        "Small garden plot ({{price}})",
        "{{price}}",
        parent.unlockGarden0Price()
      ),
      true, // emphasis
      parent.isGarden0Unlocked(), // previouslyChoosen
      false, // disabled
      DialogAction_SHOPPING,
      'UnlockGarden0'
    ));

    choices.PushBack(SSceneChoice(
      StrReplace(
        "Large garden plot ({{price}})",
        "{{price}}",
        parent.unlockGarden1Price()
      ),
      true, // emphasis
      parent.isGarden1Unlocked(), // previouslyChoosen
      false, // disabled
      DialogAction_SHOPPING,
      'UnlockGarden1'
    ));

    choices.PushBack(SSceneChoice(
      StrReplace(
        "Armor tools ({{price}})",
        "{{price}}",
        parent.unlockArmorsPrice()
      ),
      true, // emphasis
      parent.isArmorsUnlocked(), // previouslyChoosen
      false, // disabled
      DialogAction_SHOPPING,
      'UnlockArmors'
    ));

    choices.PushBack(SSceneChoice(
      StrReplace(
        "Weapon tools ({{price}})",
        "{{price}}",
        parent.unlockWeaponsPrice()
      ),
      true, // emphasis
      parent.isWeaponsUnlocked(), // previouslyChoosen
      false, // disabled
      DialogAction_SHOPPING,
      'UnlockWeapons'
    ));

    choices.PushBack(SSceneChoice(
      "Cancel",
      false,
      true,
      false,
      DialogAction_GETBACK,
      'Cancel'
    ));

    while (true) {
      // simulate right away a hover on the first choice:
      parent.onDialogHover(choices[0]);

      var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
      SU_closeDialogChoiceInterface();

      if (response.playGoChunk == 'UnlockHerbalist') {
        if (parent.isHerbalistUnlocked()) {
          WMHHUD("You already have an Herbalist in your camp");
          continue;
        }

        var cost: int = parent.unlockHerbalistPrice();

        if (thePlayer.GetMoney() < cost) {
          WMHHUD("Insufficient funds");
          continue;
        }

        thePlayer.RemoveMoney(cost);
        parent.unlockHerbalist();
        WMHHUD("Herbalist hired");
      }
      else if (response.playGoChunk == 'UnlockMerchant') {
        if (parent.isMerchantUnlocked()) {
          WMHHUD("You already have a Merchant in your camp");
          continue;
        }

        var cost: int = parent.unlockMerchantPrice();

        if (thePlayer.GetMoney() < cost) {
          WMHHUD("Insufficient funds");
          continue;
        }

        thePlayer.RemoveMoney(cost);
        parent.unlockMerchant();
        WMHHUD("Merchant hired");
      }
      else if (response.playGoChunk == 'UnlockArmors') {
        if (parent.isArmorsUnlocked()) {
          WMHHUD("You already have armor tools in your camp");
          continue;
        }

        var cost: int = parent.unlockArmorsPrice();

        if (thePlayer.GetMoney() < cost) {
          WMHHUD("Insufficient funds");
          continue;
        }

        thePlayer.RemoveMoney(cost);
        parent.unlockArmors();
        WMHHUD("Armor tools unlocked");
      }
      else if (response.playGoChunk == 'UnlockWeapons') {
        if (parent.isWeaponsUnlocked()) {
          WMHHUD("You already have weapon tools in your camp");
          continue;
        }

        var cost: int = parent.unlockWeaponsPrice();

        if (thePlayer.GetMoney() < cost) {
          WMHHUD("Insufficient funds");
          continue;
        }

        thePlayer.RemoveMoney(cost);
        parent.unlockWeapons();
        WMHHUD("Weapon tools unlocked");
      }
      else if (response.playGoChunk == 'unlockGarden0') {
        if (parent.isGarden0Unlocked()) {
          WMHHUD("You are already cultivating the small garden plot");
          continue;
        }

        var cost: int = parent.unlockGarden0Price();

        if (thePlayer.GetMoney() < cost) {
          WMHHUD("Insufficient funds");
          continue;
        }

        thePlayer.RemoveMoney(cost);
        parent.unlockGarden0();
        WMHHUD("Small garden plot unlocked");
      }
      else if (response.playGoChunk == 'unlockGarden1') {
        if (parent.isGarden1Unlocked()) {
          WMHHUD("You are already cultivating the large garden plot");
          continue;
        }

        var cost: int = parent.unlockGarden1Price();

        if (thePlayer.GetMoney() < cost) {
          WMHHUD("Insufficient funds");
          continue;
        }

        thePlayer.RemoveMoney(cost);
        parent.unlockGarden1();
        WMHHUD("Large garden plot unlocked");
      }
      else {
        parent.dialog_hover_camera_0.Stop();
        parent.dialog_hover_camera_1.Stop();
        return;
      }
    }

  }
}