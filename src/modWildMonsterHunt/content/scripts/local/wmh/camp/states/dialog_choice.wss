state DialogChoice in WMH_CampManager {
  var camera: WMH_StaticCamera;

  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.DialogChoice_main();
  }

  entry function DialogChoice_main() {
    parent.dialog_hover_camera_0 = WMH_getStaticCamera();
    parent.dialog_hover_camera_1 = WMH_getStaticCamera();
    this.camera = WMH_getStaticCamera();

    parent.conversation = (new WMH_ConversationManager in this)
      .init()
      .registerActor(parent.camp_manager_npc as CActor)
      .registerActor(thePlayer as CActor);

    this.displayChoicesMain();
    parent.conversation
      .playLine(
        thePlayer,
        452638, // Geralt choice: Farewell
        WMH_AnimationCategory_Goodbye,
        WMH_AnimationCategory_Goodbye
      );

    parent.GotoState('Waiting');
  }

  latent function displayChoicesMain() {
    var choices: array<SSceneChoice>;

    choices.PushBack(SSceneChoice(
      GetLocStringByKey("wmh_camp_improve"),
      true, // emphasis
      false, // previouslyChoosen
      false, // disabled
      DialogAction_HOUSE,
      'ImproveWitcherCamp'
    ));

    choices.PushBack(SSceneChoice(
      GetLocStringByKey("wmh_farewell"),
      false,
      true,
      false,
      DialogAction_EXIT,
      'Cancel'
    ));

    var say_greetings: bool = true;

    while (true) {
      this.camera.teleportAndLookAt(
        Vector(732.089, 627.481, 105.123),
        Vector(
          724.006,
          624.475,
          99.528
        )
      );
      this.camera.SetFov(40.0);

      var position: Vector = thePlayer.GetWorldPosition();
      var rotation: EulerAngles = rotation;
      rotation.Yaw = 210;

      theGame.FadeOut(0.5);
      thePlayer.TeleportWithRotation(
        Vector(724.10, 624.88, 100.05, position.W),
        rotation
      );
      this.camera.start();
      theGame.FadeInAsync(0.8);

      if (say_greetings) {
        say_greetings = false;

        parent.conversation.playLine(
          thePlayer,
          1127230, // 0x0011333e  Geralt: Greetings
          WMH_AnimationCategory_Greetings,
          // listeners play agreeing animation
          WMH_AnimationCategory_Greetings
        );
      }

      var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
      SU_closeDialogChoiceInterface();

      if (response.playGoChunk == 'ImproveWitcherCamp') {
        parent.conversation.startSimulatingConversation();
        FactsSet('WMH_CampLayerQuickLoop', 1, 120);
        this.displayChoicesImproveWitcherCamp();
        parent.conversation.stopSimulatingConversation();
        FactsRemove('WMH_CampLayerQuickLoop');
      }
      else {
        this.camera.Stop();
        Sleep(0.25);
        return;
      }
    }
  }

  private latent function displayChoicesImproveWitcherCamp() {
    var choices: array<SSceneChoice>;

    while (true) {
      choices.Clear();
      choices.PushBack(SSceneChoice(
        GetLocStringByKey("wmh_camp_merchant")
          +" ("+parent.unlockMerchantPrice()+")",
        true, // emphasis
        parent.isMerchantUnlocked(), // previouslyChoosen
        false, // disabled
        DialogAction_SHOPPING,
        'UnlockMerchant'
      ));

      choices.PushBack(SSceneChoice(
        GetLocStringByKey("wmh_camp_garden_plot_small")
          +" ("+parent.unlockGarden0Price()+")",
        true, // emphasis
        parent.isGarden0Unlocked(), // previouslyChoosen
        false, // disabled
        DialogAction_SHOPPING,
        'UnlockGarden0'
      ));

      choices.PushBack(SSceneChoice(
        GetLocStringByKey("wmh_camp_barber")
          +" ("+parent.unlockBarberPrice()+")",
        true, // emphasis
        parent.isBarberUnlocked(), // previouslyChoosen
        false, // disabled
        DialogAction_SHOPPING,
        'UnlockBarber'
      ));

      choices.PushBack(SSceneChoice(
        GetLocStringByKey("wmh_camp_herbalist")
          +" ("+parent.unlockHerbalistPrice()+")",
        true, // emphasis
        parent.isHerbalistUnlocked(), // previouslyChoosen
        false, // disabled
        DialogAction_SHOPPING,
        'UnlockHerbalist'
      ));

      choices.PushBack(SSceneChoice(
        GetLocStringByKey("wmh_camp_garden_plot_large")
          +" ("+parent.unlockGarden1Price()+")",
        true, // emphasis
        parent.isGarden1Unlocked(), // previouslyChoosen
        false, // disabled
        DialogAction_SHOPPING,
        'UnlockGarden1'
      ));

      choices.PushBack(SSceneChoice(
        GetLocStringByKey("wmh_camp_armor_tools")
          +" ("+parent.unlockArmorsPrice()+")",
        true, // emphasis
        parent.isArmorsUnlocked(), // previouslyChoosen
        false, // disabled
        DialogAction_SHOPPING,
        'UnlockArmors'
      ));

      choices.PushBack(SSceneChoice(
        GetLocStringByKey("wmh_camp_weapon_tools")
          +" ("+parent.unlockWeaponsPrice()+")",
        true, // emphasis
        parent.isWeaponsUnlocked(), // previouslyChoosen
        false, // disabled
        DialogAction_SHOPPING,
        'UnlockWeapons'
      ));

      choices.PushBack(SSceneChoice(
        GetLocStringByKey("wmh_cancel"),
        false,
        true,
        false,
        DialogAction_GETBACK,
        'Cancel'
      ));

      // simulate right away a hover on the first choice:
      parent.onDialogHover(choices[0]);

      var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
      SU_closeDialogChoiceInterface();

      if (response.playGoChunk == 'UnlockHerbalist') {
        if (parent.isHerbalistUnlocked()) {
          WMHPOPUP(GetLocStringByKey("wmh_camp_herbalist_already_in_camp"));
          continue;
        }

        var cost: int = parent.unlockHerbalistPrice();

        if (thePlayer.GetMoney() < cost) {
          WMHPOPUP(GetLocStringByKey("wmh_insufficient_funds"));
          continue;
        }

        thePlayer.RemoveMoney(cost);
        WMH_addFundsToSmithMerchants(cost);
        parent.unlockHerbalist();
        WMHPOPUP(StrReplace(
          GetLocStringByKey("wmh_camp_hired"),
          "{{thing}}",
          GetLocStringByKey("wmh_camp_herbalist")
        ));
      }
      else if (response.playGoChunk == 'UnlockMerchant') {
        if (parent.isMerchantUnlocked()) {
          WMHPOPUP(GetLocStringByKey("wmh_camp_merchant_already_in_camp"));
          continue;
        }

        var cost: int = parent.unlockMerchantPrice();

        if (thePlayer.GetMoney() < cost) {
          WMHPOPUP(GetLocStringByKey("wmh_insufficient_funds"));
          continue;
        }

        thePlayer.RemoveMoney(cost);
        WMH_addFundsToSmithMerchants(cost);
        parent.unlockMerchant();
        WMHPOPUP(StrReplace(
          GetLocStringByKey("wmh_camp_hired"),
          "{{thing}}",
          GetLocStringByKey("wmh_camp_merchant")
        ));
      }
      else if (response.playGoChunk == 'UnlockBarber') {
        if (parent.isBarberUnlocked()) {
          WMHPOPUP(GetLocStringByKey("wmh_camp_barber_already_in_camp"));
          continue;
        }

        var cost: int = parent.unlockBarberPrice();

        if (thePlayer.GetMoney() < cost) {
          WMHPOPUP(GetLocStringByKey("wmh_insufficient_funds"));
          continue;
        }

        thePlayer.RemoveMoney(cost);
        WMH_addFundsToSmithMerchants(cost);
        parent.unlockBarber();
        WMHPOPUP(StrReplace(
          GetLocStringByKey("wmh_camp_hired"),
          "{{thing}}",
          GetLocStringByKey("wmh_camp_barber")
        ));
      }
      else if (response.playGoChunk == 'UnlockArmors') {
        if (parent.isArmorsUnlocked()) {
          WMHPOPUP(GetLocStringByKey("wmh_camp_armor_tools_already_in_camp"));
          continue;
        }

        var cost: int = parent.unlockArmorsPrice();

        if (thePlayer.GetMoney() < cost) {
          WMHPOPUP(GetLocStringByKey("wmh_insufficient_funds"));
          continue;
        }

        thePlayer.RemoveMoney(cost);
        WMH_addFundsToSmithMerchants(cost);
        parent.unlockArmors();
        WMHPOPUP(StrReplace(
          GetLocStringByKey("wmh_camp_unlocked"),
          "{{thing}}",
          GetLocStringByKey("wmh_camp_armor_tools")
        ));
      }
      else if (response.playGoChunk == 'UnlockWeapons') {
        if (parent.isWeaponsUnlocked()) {
          WMHPOPUP(GetLocStringByKey("wmh_camp_weapon_tools_already_in_camp"));
          continue;
        }

        var cost: int = parent.unlockWeaponsPrice();

        if (thePlayer.GetMoney() < cost) {
          WMHPOPUP(GetLocStringByKey("wmh_insufficient_funds"));
          continue;
        }

        thePlayer.RemoveMoney(cost);
        WMH_addFundsToSmithMerchants(cost);
        parent.unlockWeapons();
        WMHPOPUP(StrReplace(
          GetLocStringByKey("wmh_camp_unlocked"),
          "{{thing}}",
          GetLocStringByKey("wmh_camp_weapon_tools")
        ));
      }
      else if (response.playGoChunk == 'UnlockGarden0') {
        if (parent.isGarden0Unlocked()) {
          WMHPOPUP(GetLocStringByKey("wmh_camp_garden_plot_already_cultivating"));
          continue;
        }

        var cost: int = parent.unlockGarden0Price();

        if (thePlayer.GetMoney() < cost) {
          WMHPOPUP(GetLocStringByKey("wmh_insufficient_funds"));
          continue;
        }

        thePlayer.RemoveMoney(cost);
        WMH_addFundsToSmithMerchants(cost);
        parent.unlockGarden0();
        WMHPOPUP(StrReplace(
          GetLocStringByKey("wmh_camp_unlocked"),
          "{{thing}}",
          GetLocStringByKey("wmh_camp_garden_plot_small")
        ));
      }
      else if (response.playGoChunk == 'UnlockGarden1') {
        if (parent.isGarden1Unlocked()) {
          WMHPOPUP(GetLocStringByKey("wmh_camp_garden_plot_already_cultivating"));
          continue;
        }

        var cost: int = parent.unlockGarden1Price();

        if (thePlayer.GetMoney() < cost) {
          WMHPOPUP(GetLocStringByKey("wmh_insufficient_funds"));
          continue;
        }

        thePlayer.RemoveMoney(cost);
        WMH_addFundsToSmithMerchants(cost);
        parent.unlockGarden1();
        WMHPOPUP(StrReplace(
          GetLocStringByKey("wmh_camp_unlocked"),
          "{{thing}}",
          GetLocStringByKey("wmh_camp_garden_plot_large")
        ));
      }
      else {
        parent.dialog_hover_camera_0.Stop();
        parent.dialog_hover_camera_1.Stop();
        return;
      }
    }
  }

  event OnLeaveState( nextStateName : name ) {
    parent.removeTemporaryUnlocks();
  }
}