function WMH_getSmithMerchants(): array<WMH_SmithMerchant> {
  var entities: array<CEntity>;

  theGame.GetEntitiesByTag('WMH_SmithMerchant', entities);

  var output: array<WMH_SmithMerchant>;

  for entity: CEntity in entities {
    var smith: WMH_SmithMerchant = entity as WMH_SmithMerchant;

    if (smith) {
      output.PushBack(smith);
    }
  }

  return output;
}

function WMH_transferMoneyToSmithMerchant(quantity: int) {
  var merchants: array<WMH_SmithMerchant> = WMH_getSmithMerchants();

  if (merchants.Size() < 0) {
    WMHINFO("transferMoneyToSmithMerchant(), merchant not found");
    return;
  }

  var merchant: WMH_SmithMerchant = merchants[0];

  thePlayer.RemoveMoney(quantity);
  WMH_addFundsToSmithMerchants(quantity);
  theSound.SoundEvent("gui_inventory_buy");
}

/// Extra funds: next time the merchant is interacted with, he gets additional
/// money based on this value. The fact is reset once the money is added
function WMH_addFundsToSmithMerchants(quantity: int) {
  WMH_setSmithMerchantExtraFunds(WMh_getSmithMerchantExtraFunds() + quantity);
}


function WMH_setSmithMerchantExtraFunds(quantity: int) {
  FactsSet("WMH_SmithMerchant_extra_funds", quantity);
}

function WMh_getSmithMerchantExtraFunds(): int {
  return FactsQueryLatestValue("WMH_SmithMerchant_extra_funds");
}

exec function wmhsmithmerchantextrafunds(qty: int) {
  WMH_setSmithMerchantExtraFunds(qty);
}

class WMH_SmithMerchant extends WMH_QuickMerchant {
  private var previous_refill_seed: int;
	default previous_refill_seed = 0;

  event OnSpawned(spawnData: SEntitySpawnData) {
    super.OnSpawned(spawnData);

    if (!spawnData.restored) {
      this.setupInventory();
    }
  }

  event OnInteraction(actionName: string, activator: CEntity) {
    super.OnInteraction(actionName, activator);
    this.setupInventory();
  }

  public function onContractCompleted() {
    this.GetInventory().AddMoney(5);
  }

  public function addFunds(quantity: int) {
    this.GetInventory().AddMoney(quantity);
  }

  private function setupInventory() {
    var hunt_seed: int = WMH_getHuntSeedFact();
    if (this.previous_refill_seed > 0 && hunt_seed == this.previous_refill_seed) {
      return;
    }

    this.previous_refill_seed = hunt_seed;

    var inventory: CInventoryComponent = this.GetInventory();

    var initial_money: int = inventory.GetMoney();
    var extra_funds: int = WMh_getSmithMerchantExtraFunds();

    inventory.RemoveAllItems();
    inventory.SetMoney(initial_money + extra_funds);
    WMH_setSmithMerchantExtraFunds(0);

    var general: WMH_StorageGeneral = WMH_getStorageGeneral();

    var every80Levels: int = general.level.value * 0.0125 as int;
    var every40Levels: int = general.level.value * 0.025 as int;
    var every20Levels: int = general.level.value * 0.05 as int;
    var every10Levels: int = general.level.value * 0.1 as int;
    var every5Levels: int = general.level.value * 0.2 as int;

    inventory.AddAnItem('Clearing Potion', 1);
    inventory.AddAnItem('Geralt Shirt');
    inventory.AddAnItem('Bottled water', 1 + every10Levels);
    inventory.AddAnItem('Apple', 1 + every5Levels);
    inventory.AddAnItem('Potatoes', 1 + every5Levels);
    inventory.AddAnItem('Honeycomb', 2 + every10Levels);

    inventory.AddAnItem('Blunt Bolt Legendary', 5 + every10Levels * 5); // ~10dmg
    inventory.AddAnItem('Local pepper vodka', 1 + every20Levels);
    inventory.AddAnItem('Temerian Rye', 1 + every20Levels);

    inventory.AddAnItem('Whetstone', 1 + every20Levels);
    inventory.AddAnItem('Whetstone elven', 1 + every40Levels);
    inventory.AddAnItem('Whetstone dwarven', 1 + every80Levels);
    inventory.AddAnItem('Whetstone gnomish', 1);

    inventory.AddAnItem('Smithing tools', 1 + every20Levels);
    inventory.AddAnItem('Smithing tools elven', 1 + every40Levels);
    inventory.AddAnItem('Smithing tools dwarven', 1 + every80Levels);
    inventory.AddAnItem('Smithing tools gnomish', 1);

    inventory.AddAnItem('modwmh_melding_reagent', 10);
    inventory.AddAnItem('modwmh_trap_repair_tools', 1 + every10Levels);
    inventory.AddAnItem('modwmh_lure_container', 1 + every20Levels);
    inventory.AddAnItem('modwmh_trap_device', 1 + every20Levels);

    if (every20Levels > 0) {
      inventory.AddAnItem('Split Bolt Legendary', 0 + every20Levels * 3); // ~14dmg
    }

    if (every40Levels > 0) {
      inventory.AddAnItem('Tracking Point Bolt Legendary', 0 + every40Levels * 2); // ~20dmg
      inventory.AddAnItem('Explosive Bolt Legendary', 0 + every40Levels * 2); // ~20dmg
      inventory.AddAnItem('Broadhead Bolt Legendary', 0 + every40Levels * 2); // bleed
      
      inventory.AddAnItem('Dwarven spirit', 0 + every40Levels);
      inventory.AddAnItem('Cherry Cordial', 0 + every40Levels);
      inventory.AddAnItem('Alcohest', 0 + every80Levels);
      inventory.AddAnItem('Mandrake cordial', 0 + every80Levels);
    }
  }
}