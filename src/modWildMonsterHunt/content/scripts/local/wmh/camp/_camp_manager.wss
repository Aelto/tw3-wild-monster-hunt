@wrapMethod(CR4HudModuleDialog)
function OnDialogOptionSelected(index: int) {
  var result: bool;

  result = wrappedMethod(index);
  if (thePlayer.wmh) {
    if (thePlayer.wmh.camp) {
      var choice: SSceneChoice = this.lastSetChoices[index];

      thePlayer.wmh.camp.onDialogHover(choice);
    }
  }

  return result;
}


statemachine class WMH_CampManager {
  private var master: WMH_Master;

  private var herbalist: WMH_HerbalistManager;

  // TODO:
  // all of the DialogChoice logic could be moved into the [WMH_CampManagerNPC]
  // class instead
  protected var dialog_hover_camera_0: WMH_StaticCamera;
  protected var dialog_hover_camera_1: WMH_StaticCamera;
  protected var camera_index: int;

  protected var camp_manager_npc: WMH_CampManagerNPC;
  protected var conversation: WMH_ConversationManager;

  // temporarily unlock upgrade to showcase them during the dialogue
  private var temporary_unlocks: array<name>;

  public function init(master: WMH_Master): WMH_CampManager {
    this.herbalist = (new WMH_HerbalistManager in this).init(this);
    this.GotoState('Waiting');

    return this;
  }

  public function onDialogHover(choice: SSceneChoice) {
    if (this.GetCurrentStateName() != 'DialogChoice') {
      return;
    }

    this.removeTemporaryUnlocks();

    if (choice.playGoChunk == 'UnlockHerbalist') {
      this.swapAndMoveCamera(
        Vector(738.371, 635.173, 99.505, 0),
        EulerAngles(-362.055, 15400.5, 0),
        45.0
      );
      this.unlockHerbalist(true);
    }
    if (choice.playGoChunk == 'UnlockBarber') {
      this.swapAndMoveCamera(
        Vector(748.434, 639.394, 97.2683, 0),
        EulerAngles(-1071.19, 13336.9, 0),
        45.0
      );
      this.unlockBarber(true);
    }
    if (choice.playGoChunk == 'UnlockMerchant') {
      this.swapAndMoveCamera(
        Vector(723.572, 630.203, 99.606, 0),
        EulerAngles(-355.014, 15355.1, 0),
        25.0
      );
      this.unlockMerchant(true);
    }
    if (choice.playGoChunk == 'UnlockGarden0') {
      this.swapAndMoveCamera(
        Vector(750.008, 627.179, 109.439, 0),
        EulerAngles(-387.015, 15238.9, 0),
        45.0
      );
      this.unlockGarden0(true);
    }
    if (choice.playGoChunk == 'UnlockGarden1') {
      this.swapAndMoveCamera(
        Vector(730.812, 674.511, 107.323),
        EulerAngles(-393.415, 15240.6, 0),
        40.0
        // Vector(730.378, 681.878, 206.585, 0),
        // EulerAngles(-381.575, 15263.5, 0),
        // 40.0
      );
      this.unlockGarden1(true);
    }
    if (choice.playGoChunk == 'UnlockArmors') {
      this.swapAndMoveCamera(
        Vector(729.304, 632.865, 100.714, 0),
        EulerAngles(-368.454, 15291.4, 0),
        25.0
      );
      this.unlockArmors(true);
    }
    if (choice.playGoChunk == 'UnlockWeapons') {
      this.swapAndMoveCamera(
        Vector(726.204, 625.454, 101.816, 0),
        EulerAngles(-378.054, 15403.1, 0),
        25.0
      );
      this.unlockWeapons(true);
    }
  }

  public function startDialog(camp_manager_npc: WMH_CampManagerNPC) {
    this.camp_manager_npc = camp_manager_npc;
    this.GotoState('DialogChoice');
  }

  private function swapAndMoveCamera(position: Vector, rotation: EulerAngles, fov: float) {
    var camera: WMH_StaticCamera;
    var other: WMH_StaticCamera;

    if (this.camera_index <= 0) {
      camera = this.dialog_hover_camera_0;
      other = this.dialog_hover_camera_1;
      this.camera_index = 1;
    }
    else {
      camera = this.dialog_hover_camera_1;
      other = this.dialog_hover_camera_0;
      this.camera_index = 0;
    }

    camera.activationDuration = 1.5;
    camera.deactivationDuration = 20;
    camera.TeleportWithRotation(position, rotation);
    camera.start();
  }

  protected function removeTemporaryUnlocks() {
    for unlock: name in this.temporary_unlocks {
      FactsRemove(unlock);
    }

    this.temporary_unlocks.Clear();
  }

  protected function unlockGarden0(optional temporarily: bool) {
    if (temporarily && !FactsDoesExist('WMH_Garden0Unlocked')) {
      this.temporary_unlocks.PushBack('WMH_Garden0Unlocked');
    }
    else {
      this.temporary_unlocks.Remove('WMH_Garden0Unlocked');
    }

    FactsSet('WMH_Garden0Unlocked', 1);
  }

  protected function unlockGarden0Price(): int {
    return 350;
  }

  protected function isGarden0Unlocked(): bool {
    return FactsDoesExist('WMH_Garden0Unlocked')
        && !this.temporary_unlocks.Contains('WMH_Garden0Unlocked');
  }

  //--

  protected function isGarden1Unlocked(): bool {
    return FactsDoesExist('WMH_Garden1Unlocked')
        && !this.temporary_unlocks.Contains('WMH_Garden1Unlocked');
  }

  protected function unlockGarden1Price(): int {
    return 600;
  }

  protected function unlockGarden1(optional temporarily: bool) {
    if (temporarily && !FactsDoesExist('WMH_Garden1Unlocked')) {
      this.temporary_unlocks.PushBack('WMH_Garden1Unlocked');
    }
    else {
      this.temporary_unlocks.Remove('WMH_Garden1Unlocked');
    }

    FactsSet('WMH_Garden1Unlocked', 1);
  }

  //--

  // armor repair bench
  protected function unlockArmors(optional temporarily: bool) {
    if (temporarily && !FactsDoesExist('WMH_ArmorsUnlocked')) {
      this.temporary_unlocks.PushBack('WMH_ArmorsUnlocked');
    }
    else {
      this.temporary_unlocks.Remove('WMH_ArmorsUnlocked');
    }

    FactsSet('WMH_ArmorsUnlocked', 1);
  }

  protected function unlockArmorsPrice(): int {
    return 325;
  }

  protected function isArmorsUnlocked(): bool {
    return FactsDoesExist('WMH_ArmorsUnlocked')
        && !this.temporary_unlocks.Contains('WMH_ArmorsUnlocked');
  }

  //--

  protected function unlockWeapons(optional temporarily: bool) {
    if (temporarily && !FactsDoesExist('WMH_WeaponsUnlocked')) {
      this.temporary_unlocks.PushBack('WMH_WeaponsUnlocked');
    }
    else {
      this.temporary_unlocks.Remove('WMH_WeaponsUnlocked');
    }

    FactsSet('WMH_WeaponsUnlocked', 1);
  }

  protected function unlockWeaponsPrice(): int {
    return 325;
  }

  protected function isWeaponsUnlocked(): bool {
    return FactsDoesExist('WMH_WeaponsUnlocked')
        && !this.temporary_unlocks.Contains('WMH_WeaponsUnlocked');
  }
  
  //--

  protected function unlockMerchant(optional temporarily: bool) {
    if (temporarily && !FactsDoesExist('WMH_MerchantUnlocked')) {
      this.temporary_unlocks.PushBack('WMH_MerchantUnlocked');
    }
    else {
      this.temporary_unlocks.Remove('WMH_MerchantUnlocked');
    }

    FactsSet('WMH_MerchantUnlocked', 1);
  }

  protected function unlockMerchantPrice(): int {
    return 25;
  }

  protected function isMerchantUnlocked(): bool {
    return FactsDoesExist('WMH_MerchantUnlocked')
        && !this.temporary_unlocks.Contains('WMH_MerchantUnlocked');
  }

  //--

  protected function unlockHerbalist(optional temporarily: bool) {
    if (temporarily && !FactsDoesExist('WMH_HerbalistUnlocked')) {
      this.temporary_unlocks.PushBack('WMH_HerbalistUnlocked');
    }
    else {
      this.temporary_unlocks.Remove('WMH_HerbalistUnlocked');
    }

    FactsSet('WMH_HerbalistUnlocked', 1);
  }

  protected function unlockHerbalistPrice(): int {
    return 50;
  }

  protected function isHerbalistUnlocked(): bool {
    return FactsDoesExist('WMH_HerbalistUnlocked')
        && !this.temporary_unlocks.Contains('WMH_HerbalistUnlocked');
  }

  //--

  protected function unlockBarber(optional temporarily: bool) {
    if (temporarily && !FactsDoesExist('WMH_BarberUnlocked')) {
      this.temporary_unlocks.PushBack('WMH_BarberUnlocked');
    }
    else {
      this.temporary_unlocks.Remove('WMH_BarberUnlocked');
    }

    FactsSet('WMH_BarberUnlocked', 1);
  }

  protected function unlockBarberPrice(): int {
    return 50;
  }

  protected function isBarberUnlocked(): bool {
    return FactsDoesExist('WMH_BarberUnlocked')
        && !this.temporary_unlocks.Contains('WMH_BarberUnlocked');
  }
}