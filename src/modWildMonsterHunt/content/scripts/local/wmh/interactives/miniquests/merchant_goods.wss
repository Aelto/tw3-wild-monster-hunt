class WMH_MerchantGoods extends CGameplayEntity {
  private var hunt_lock: WMH_HuntLock;

  event OnInteractionActivationTest(
    interactionComponentName: string,
    activator : CEntity
  ) {
    return WMH_huntLockIsAvailable(this.hunt_lock);
  }

  event OnInteraction(actionName: string, activator: CEntity) {
    println!("WMH_MerchantGoods, onInteraction, {actionName}, {this.hunt_lock.hunt_seed}");

    if (!WMH_huntLockTryUse(this.hunt_lock)) {
      return false;
    }

    WMH_updateMerchantGoodsCarryingFact(1);
    var displayed_fact: bool = WMHTUTOFACT(
      'WMH_MerchantGoods_PickedUp',
      GetLocStringByKey("wmh_tutorial_merchand_goods_picked_up_title"),
      GetLocStringByKey("wmh_tutorial_merchand_goods_picked_up_description")
    );

    if (!displayed_fact) {
      WMHHUD(
        StrReplace(
          StrReplace(
            GetLocStringByKey("wmh_merchant_goods_picked_up_hud"),
            "{{camp_count}}",
            WMH_getMerchantGoodsFacts()
          ),
          "{{carry_count}}",
          WMH_getMerchantGoodsCarryingFacts()
        )
      );
    }

    theSound.SoundEvent('gui_inventory_repair');
    theSound.SoundEvent("gui_journal_track_quest");

    return true;
  }

  function setMeshesVisibility(visible: bool)
	{
		var meshes: array<CComponent> = this
      .GetComponentsByClassName('CStaticMeshComponent');

		var i: int;
    for (i = 0; i < meshes.Size(); i += 1) {
      var static_mesh: CStaticMeshComponent = meshes[i] as CStaticMeshComponent;

      if (static_mesh) {
        static_mesh.SetVisible(visible);
      }
    }
	}
}

function WMH_getMerchantGoodsFacts(): int {
  return FactsQuerySum("WMH_MerchantGoods_count");
}

function WMH_updateMerchantGoodsFact(optional offset: int) {
  FactsSet("WMH_MerchantGoods_count", WMH_getMerchantGoodsFacts() + offset);
}

function WMH_getMerchantGoodsCarryingFacts(): int {
  return FactsQuerySum("WMH_MerchantGoods_carrying_count");
}

function WMH_updateMerchantGoodsCarryingFact(optional offset: int) {
  FactsSet("WMH_MerchantGoods_carrying_count", WMH_getMerchantGoodsCarryingFacts() + offset);
}

function WMH_resetMerchantGoodsCarryingFacts() {
  FactsRemove("WMH_MerchantGoods_carrying_count");
}