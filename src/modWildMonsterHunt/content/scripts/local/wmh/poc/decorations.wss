/*
  NOTES:
  - temporary skills are always considered equipped
  - temporary skills don't seem to trigger the passive abilities
    - if a skill is already learned and equipped and a temporary level is added
      to it then the passive bonus won't change because of the temporary skill
    - if needed have the runes provide passive abilities on top of the perks
  - temporary skills are displayed in orange in the skills UI
  - 
*/ 

@addMethod(CR4Player)
function WMH_DECO_clearDecorationPerks() {
  if (this.abilityManager && this.abilityManager.IsInitialized()) {
    this.abilityManager.WMH_DECO_clearDecorationPerks();
  }
}

@addMethod(W3PlayerAbilityManager)
function WMH_DECO_clearDecorationPerks() {
  this.tempSkills.Clear();
}

@wrapMethod(CR4Player)
function OnEquippedItem(category: name, slot: name) {
  // 1) clear decoration perks,
  WMH_DECO_clearDecorationPerks();
  wrappedMethod(category, slot);

  // 2) iterate through items and apply decoration perks back
  WMH_grantPerksFromEquippedItems();
}

function WMH_grantPerksFromEquippedItems() {
  var witcher: W3PlayerWitcher = GetWitcherPlayer();

  var items: array<SItemUniqueId> = thePlayer.GetEquippedItems();
  var inventory: CInventoryComponent = thePlayer.GetInventory();
  var perks: array<ESkill>;

  for item: SItemUniqueId in items {
    WMH_itemToSkills(item, inventory, /*out*/ perks);
  }

  for perk: ESkill in perks {
    WMH_DECO_addDecorationPerk(perk);
  }
}

function WMH_DECO_addDecorationPerk(skill: ESkill) {
  var is_temporary: bool = true;

  thePlayer.AddSkill(skill, is_temporary);
}

function WMH_itemToSkills(
  item: SItemUniqueId,
  inventory: CInventoryComponent,

  out skills: array<ESkill>
){

  var enhancements: array<name>;
  inventory.GetItemEnhancementItems(item, enhancements);

  for enhancement: name in enhancements {
    var rune: SItemUniqueId = inventory.GetItemId(enhancement);
    var tags: array<name>;

    tags.Clear();
    if (!inventory.GetItemTags(item, tags)) {
      continue;
    }

    for tag: name in tags {
      var skill: ESkill = SkillNameToEnum(tag);

      if (skill  == S_SUndefined) {
        continue;
      }

      skills.PushBack(skill);
    }
  }
}

function WMH_getItemDecorationSeed(
  inventory: CInventoryComponent,
  item: SItemUniqueId
): int {
  return inventory.GetItemModifierInt(item, 'wmh_decoration_seed');
}

function WMH_setItemDecorationSeed(
  inventory: CInventoryComponent,
  item: SItemUniqueId,
  seed: int
) {
  inventory.SetItemModifierInt(item, 'wmh_decoration_seed', seed);
}

function WMH_getItemDecorationCount(
  inventory: CInventoryComponent,
  item: SItemUniqueId
): int {
  
  return Max(
    inventory.GetItemModifierInt(item, 'wmh_decoration_count', 0),
    0
  );
}

function WMH_setItemDecorationCount(
  inventory: CInventoryComponent,
  item: SItemUniqueId,
  count: int
) {
  inventory.SetItemModifierInt(item, 'wmh_decoration_count', count);
}

function WMH_getItemDecorationLevel(
  inventory: CInventoryComponent,
  item: SItemUniqueId
): int {
  return Max(
    inventory.GetItemModifierInt(item, 'wmh_decoration_level', 1),
    1
  );
}