struct WMH_DynDecorationSlotOptions {
  var template: string;
  var max_rotation_randomness: float;
  var slot_chance: float;
}

class WMH_DynDecoration extends CGameplayEntity {
  private var decorations: array<CEntity>;

  protected editable var decorations_templates: array<string>;
  hint decorations_templates = "path to the entity templates this DynDecoration entity may spawn in its CBoxComponents. If more than one is listed then a random one is selected for each slot.";

  protected editable var max_rotation_randomness: float;
  hint max_rotation_randomness = "if enabled, the entity may be randomly rotated around it spawned position.";

  protected editable var slot_chance: float;
  default slot_chance = 1.0;
  hint slot_chance = "Chance for a slot to spawn an object, where 1.0 means 100% and 0.0 means 0%.";

  event OnSpawned(spawnData: SEntitySpawnData ) {
    super.OnSpawned(spawnData);
    this.AddTimer('delayedGeneratedRequest', 5.0);
	}

  timer function delayedGeneratedRequest(delta: float , id: int) {
    this.requestAsynchronousGeneration();
  }

  public function requestAsynchronousGeneration() {
    thePlayer.wmh_dyndeco_orchestrator.requestGeneration(this);
  }

  public latent function generateDynamicDecoration() {
    var components: array<CComponent> = this
      .GetComponentsByClassName('WMH_DyndecoSlot');

    for component: CComponent in components {
      var slot: WMH_DyndecoSlot = component as WMH_DyndecoSlot;

      if (!slot) {
        continue;
      }

      slot.generateDynamicDecoration();
    }
  }

  public function clearDynamicDecorations() {
    var components: array<CComponent> = this
      .GetComponentsByClassName('WMH_DyndecoSlot');

    for component: CComponent in components {
      var slot: WMH_DyndecoSlot = component as WMH_DyndecoSlot;

      if (!slot) {
        continue;
      }

      slot.clearDynamicDecoration();
    }
  }

  public function beforeDestroy() {}
}

@addField(CR4Player)
var wmh_dyndeco_orchestrator: WMH_DynDecoOrchestrator;

@wrapMethod(CR4Player)
function OnSpawned(spawnData : SEntitySpawnData) {
  wrappedMethod(spawnData);

  if (!this.wmh_dyndeco_orchestrator) {
    this.wmh_dyndeco_orchestrator = new WMH_DynDecoOrchestrator in this;
  }

  this.wmh_dyndeco_orchestrator.onLoad();
}

statemachine class WMH_DynDecoOrchestrator {
  protected var requests_buffers: array<array<WMH_DynDecoration>>;

  protected var buffer_index_opened: int;
  protected var buffer_index_closed: int;

  public function onLoad() {
    this.buffer_index_closed = 1;
    this.buffer_index_opened = 0;
    this.requests_buffers.Grow(2);
    this.GotoState('Waiting');
  }

  public function requestGeneration(object: WMH_DynDecoration) {
    this.requests_buffers[this.buffer_index_opened].PushBack(object);
    
    if (this.GetCurrentStateName() != 'Processing') {
      this.GotoState('Processing');
    }
  }
}

state Waiting in WMH_DynDecoOrchestrator {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.Waiting_main();
  }

  entry function Waiting_main() {
    if (parent.requests_buffers[parent.buffer_index_opened].Size() > 0) {
      parent.GotoState('Processing');
    }
  }
}

state Processing in WMH_DynDecoOrchestrator {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.Processing_main();
  }

  entry function Processing_main() {
    Sleep(5.0);

    if (parent.buffer_index_closed == 0) {
      parent.buffer_index_closed = 1;
      parent.buffer_index_opened = 0;
    }
    else {
      parent.buffer_index_closed = 0;
      parent.buffer_index_opened = 1;
    }

    var requests_count: int = parent.requests_buffers[parent.buffer_index_closed].Size();
    var index: int = 0;

    while (requests_count > 0 && index < requests_count) {
      var decoration: WMH_DynDecoration = parent
        .requests_buffers[parent.buffer_index_closed][index];

      decoration.generateDynamicDecoration();
      index += 1;
      
      SleepOneFrame();
    }

    parent.requests_buffers[parent.buffer_index_closed].Clear();
    parent.GotoState('Waiting');
  }
}

exec function dyndeco() {
  var entities: array<CEntity>;
  
  theGame.GetEntitiesByTag('DynDeco', entities);

  for entity: CEntity in entities {
    var dyndeco: WMH_DynDecoration = entity as WMH_DynDecoration;

    if (dyndeco) {
      dyndeco.requestAsynchronousGeneration();
    }
  }
}