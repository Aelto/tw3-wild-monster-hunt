struct WMH_DynDecorationSlotOptions {
  var template: string;
  var max_rotation_randomness: float;
  var slot_chance: float;
}

/// Used as a position for spawning dyndeco by instances of WMH_DynDecoration
class WMH_DyndecoSlot extends CScriptedComponent {
  // stores the entity that was spawned on the slot
  private var decoration: CEntity;

  protected editable var decorations_templates: array<string>;
  hint decorations_templates = "path to the entity templates this DynDecoration entity may spawn in its CBoxComponents. If more than one is listed then a random one is selected for each slot.";

  protected editable var max_rotation_randomness: float;
  hint max_rotation_randomness = "if enabled, the entity may be randomly rotated around its spawned position.";
  default max_rotation_randomness = 360;

  protected editable var slot_chance: float;
  default slot_chance = 0.75;
  hint slot_chance = "Chance for the slot to spawn an object, where 1.0 means 100% and 0.0 means 0%.";

  protected editable var calculate_ground_normal: bool;
  default calculate_ground_normal = true;
  hint calculate_ground_normal = "If enabled, ground normal will be calculated to adjust the decoration's position & rotation.";

  public latent function generateDynamicDecoration(seed: int) {
    this.clearDynamicDecoration();

    var options: WMH_DynDecorationSlotOptions = this.getSlotOptions(seed);

    if (
      options.slot_chance < 1.0
      && RandNoiseF(seed + 1, 1.0) > options.slot_chance
    ) {
      return;
    }

    var position: Vector = this.GetWorldPosition();
    if (this.calculate_ground_normal) {
      var normal: Vector;
      var success: bool;
      var new_position: Vector = position;

      success = theGame.GetWorld().StaticTrace(
        position,
        position + Vector(0, 0, 2.0 * -1),
        new_position,
        normal
      );

      if (success) {
        position = new_position;
        rotation = VecToRotation(normal);
      }
      else {
        success = theGame.GetWorld().StaticTrace(
          position,
          position + Vector(0, 0, 2.0 * 1),
          new_position,
          normal
        );

        if (success) {
          position = new_position;
          rotation = VecToRotation(normal);
        }
      }
    }

    var rotation: EulerAngles = this.GetWorldRotation();      
    if (options.max_rotation_randomness > 0) {
      rotation.Yaw += RandNoiseF(
        seed + 2,
        options.max_rotation_randomness, options.max_rotation_randomness * -1
      );
    }

    var template: CEntityTemplate = LoadResourceAsync(
      options.template,
      true
    ) as CEntityTemplate;

    this.decoration = theGame.CreateEntity(
      template,
      position,
      rotation
    ) as CEntity;
  }

  public function clearDynamicDecoration() {
    if (this.decoration) {
      var decoration: WMH_DynDecoration = this.decoration as WMH_DynDecoration;
      if (decoration) {
        decoration.beforeDestroy();
      }

      this.decoration.Destroy();
    }
  }

  protected function getSlotOptions(seed: int): WMH_DynDecorationSlotOptions {
    var index: int = RandNoiseF(seed, this.decorations_templates.Size()) as int;

    return WMH_DynDecorationSlotOptions(
      this.decorations_templates[index],
      this.max_rotation_randomness,
      this.slot_chance
    );
  }
}