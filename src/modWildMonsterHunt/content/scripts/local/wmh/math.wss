function WMH_either<T>(left: T, right: T, value: bool): T {
  if (value) {
    return left;
  }

  return right;
}

function WMH_vectorToCardinalDescription(input: Vector): string {
  var output: string = (VecLength2D(input) as int) + "m ";
  var normalized: Vector = VecNormalize2D(input);
  var space: bool = false;

  if (normalized.Y > 0.25) {
    output += "North";
    space = true;
  }
  else if (normalized.Y < -0.25) {
    space = true;
    output += "South";
  }

  if (normalized.X > 0.25) {
    if (space) {output += " ";}
    output += "East";
  }
  else if (normalized.X < -0.25) {
    if (space) {output += " ";}
    output += "West";
  }

  return output;
}

/// Rolls a random amount of procs (the returned value) as long as the proc
/// chances are above 0. Each roll the chances are decreased by the supplied
/// `chance_decrease_per_roll`.
///
function WMH_diminishingReturns(
  seed: int,
  /// a value in the ]0; Inf] range that represents a % chance to proc.
  /// A value above 1.0 grants 100% chances for the next roll(s).
  base_proc_chance: float,
  /// for every roll, the chances for the next roll are decreased by this amount
  chance_decrease_per_roll: float,
): int {
  var output: int;
  var rolls: int;

  // fail-safe: if no chance decrease then assign a default equal to the initial
  // chance.
  if (chance_decrease_per_roll <= 0) {
    chance_decrease_per_roll = base_proc_chance;
  }

  while (base_proc_chance > 0) {
    output += (RandNoiseF(seed + rolls, 1.0) <= base_proc_chance) as int;
    base_proc_chance -= chance_decrease_per_roll;
    rolls += 1;
  }

  return output;
}

function WMH_seedPositionOffset(seed: int, position: Vector): int {
  return seed + FloorF(position.X) - FloorF(position.Y);
}