class WMH_Master {
  public var storage: WMH_Storage;
  public var logger: WMH_Logger;

  private var camp: WMH_CampManager;
  private var bestiary: WMH_Bestiary;
  private var hunt: WMH_HuntManager;
  private var loot: WMH_LootManager;

  public function onCreate() {}

  public function onLoad() {
    this.storage = (new WMH_Storage in this).init();
    this.logger = (new WMH_Logger in this).init();
    WMHINFO("WMH_Master::OnLoad()");

    this.camp = (new WMH_CampManager in this).init(this);
    this.bestiary = (new WMH_Bestiary in this).init(this);
    this.hunt = (new WMH_HuntManager in this).init(this);
    this.loot = (new WMH_LootManager in this).init();
    
    // var a: int = "compile_fail";
  }

  public function submitOnSettlementEnter(
    origin: WMH_SettlementAreaTrigger
  ) {
    this.hunt.onHuntFinished(this.bestiary, this.storage);
  }

  public function submitOnSettlementExit(
    origin: WMH_SettlementAreaTrigger
  ) {
    this.hunt.onHuntStarted(this.storage);
    this.bestiary.onHuntStarted();
  }

  public function submitOnSpawn(
    origin: WMH_HuntManager,
    contract: WMH_ContractManager,
    hunt_seed: int,
    instant_seed: int
  ) {
    this.hunt.onSpawn(hunt_seed);
    this.bestiary.onSpawn(contract, hunt_seed);
  }

  public function submitOnSpawnContractTarget(
    origin: WMH_PendingContract,
    bentry: WMH_BestiaryEntry,
    location: WMH_BiomeSpawnPoint,
    seed: int
  ) {
    this.bestiary.onSpawnContractTarget(bentry, location, seed);
  }

  public function submitOnEncounterSpawned(
    origin: WMH_SpawnRequest,
    spawn_point: WMH_BiomeSpawnPoint,
    entries: array<WMH_BestiaryEntry>,
    entities: array<CEntity>
  ) {
    var encounter: WMH_Encounter = (new WMH_Encounter in thePlayer.wmh)
      .init(spawn_point, entries, entities);

    this.hunt.onEncounterSpawned(encounter);
  }

  public function submitOnCreatureKilled(
    origin: WMH_Encounter,
    bentry: WMH_BestiaryEntry
  ) {
    WMHINFO("submitOnCreatureKilled: id=" + bentry.id.value);

    this.hunt.onCreatureKilled(bentry);
  }

  public function submitOnContainerRefill(
    origin: WMH_RefillableContainer,
    inventory: CInventoryComponent,
    seed: int
  ) {
    this.loot.onContainerRefill(inventory, origin.loot_tags, seed);
  }
}

