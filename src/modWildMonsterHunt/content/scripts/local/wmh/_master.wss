class WMH_Master {
  public var storage: WMH_Storage;
  public var logger: WMH_Logger;

  public var camp: WMH_CampManager;
  public var bestiary: WMH_Bestiary;
  public var hunt: WMH_HuntManager;
  public var loot: WMH_LootManager;

  private var exit_debounce: WMH_Ticker;
  private var enter_debounce: WMH_Ticker;


  public function onCreate() {}

  public function onLoad() {
    WMH_initializeStorage(this);
    this.logger = (new WMH_Logger in this).init();
    WMHINFO("WMH_Master::OnLoad()");

    this.camp = (new WMH_CampManager in this).init(this);
    this.bestiary = (new WMH_Bestiary in this).init(this);
    this.hunt = (new WMH_HuntManager in this).init(this);
    this.loot = (new WMH_LootManager in this).init();

    this.exit_debounce = (new WMH_Ticker in this).init(5.0);
    this.enter_debounce = (new WMH_Ticker in this).init(5.0);
    
    // var a: int = "compile_fail";
  }

  public function submitOnSettlementEnter(
    origin: WMH_SettlementAreaTrigger
  ) {
    WMHINFO("submitOnSettlementEnter");
    if (this.enter_debounce.validate()) {
      WMHINFO("submitOnSettlementEnter, debounce validated");

      this.hunt.onHuntFinished(this.bestiary, this.storage);
      this.loot.onHuntFinished(this.storage);
    }
  }

  public function submitOnSettlementExit(
    origin: WMH_SettlementAreaTrigger
  ) {
    WMHINFO("submitOnSettlementExit");
    if (this.exit_debounce.validate()) {
      WMHINFO("submitOnSettlementExit, debounce validated");

      this.hunt.onHuntStarted(this.storage);
      this.hunt.contract.onHuntStarted(this.bestiary);
      this.bestiary.spawn_points.onHuntStarted();
      theGame.OnSpawnPlayerHorse();
    }
  }

  public function submitOnSpawn(
    origin: WMH_HuntManager,
    contract: WMH_ContractManager,
    hunt_seed: int,
    instant_seed: int
  ) {
    this.hunt.contract.onSpawn(bestiary, hunt_seed);
    this.bestiary.onSpawn(contract, hunt_seed);
  }

  public function submitOnSpawnContractTarget(
    origin: WMH_PendingContract,
    bentry: WMH_BestiaryEntry,
    location: WMH_BiomeSpawnPoint,
    encounter_tag: name,
    seed: int
  ) {
    this.bestiary.onSpawnContractTarget(
      bentry,
      location,
      origin.affix_manager,
      encounter_tag,
      seed
    );
  }

  public function submitOnSpawnClues(
    origin: WMH_PendingContract,
    bentry: WMH_BestiaryEntry,
    location: WMH_BiomeSpawnPoint,
    clues_heading: float,
    seed: int
  ) {
    this.bestiary.onSpawnClues(bentry, location, clues_heading, seed);
  }

  public function submitOnEncounterSpawned(
    origin: WMH_SpawnRequest,
    spawn_point: WMH_BiomeSpawnPoint,
    entries: array<WMH_BestiaryEntry>,
    encounter_tag: name,
    entities: array<CEntity>
  ) {
    var encounter: WMH_Encounter = (new WMH_Encounter in thePlayer.wmh)
      .init(spawn_point, entries, entities, encounter_tag);

    this.hunt.encounters.onEncounterSpawned(encounter);
  }

  public function submitOnCluesSpawned(
    origin: WMH_SpawnRequestClues,
    spawn_point: WMH_BiomeSpawnPoint,
    entries: array<WMH_BestiaryEntry>,
    entities: array<CEntity>
  ) {
    var encounter: WMH_EncounterClues = (new WMH_EncounterClues in thePlayer.wmh)
      .initClues(spawn_point, entries, entities);

    this.hunt.encounters.onCluesSpawned(encounter);
  }

  public function submitOnCreatureKilled(
    origin: WMH_Encounter,
    bentry: WMH_BestiaryEntry,
    encounter_tag: name
  ) {
    WMHINFO(
      "submitOnCreatureKilled: id= " + bentry.id.value
      + "encounter_tag = " + encounter_tag
    );

    this.hunt.onCreatureKilled(bentry, encounter_tag);
  }

  public function submitOnContainerRefill(
    origin: WMH_RefillableContainer,
    inventory: CInventoryComponent,
    seed: int
  ) {
    this.loot.onContainerRefill(inventory, origin.loot_tags, seed);
  }

  public function submitOnDeath(origin: CR4PlayerStateUnconscious) {
    // 1. teleport player to feint respawn location
    var destination: CEntity = theGame.GetEntityByTag('WMH_FeintRespawn');

    this.hunt.onPlayerDeath();

    if (destination) {
      thePlayer.TeleportWithRotation(
        destination.GetWorldPosition(),
        destination.GetWorldRotation()
      );
    }

    // 2. break some consumables
    var inventory: CInventoryComponent = thePlayer.GetInventory();
    var consumables: array<SItemUniqueId> = inventory.GetItemsByTag('Potion');
    var oils: array<SItemUniqueId> = inventory.GetItemsByTag('SilverOil');

    // join the two arrays
    for uuid: SItemUniqueId in oils {
      consumables.PushBack(uuid);
    }

    var level: int = this.hunt.difficulty();
    var seed: int = this.hunt.getSeed();
    // a maximum of 80% at higher levels
    var max_percent: float = MaxF(
      0.8,
      // 30% lost at level 25, then scaled up by 25% per difficulty level
      WMH_difficultyScaleUpF(level / 25 * 0.3, 0.25)
    );

    var items_to_break: int = (
      consumables.Size()
      * RandNoiseF(seed,max_percent)
    ) as int;

    while (items_to_break > 0) {
      items_to_break -= 1;

      var index: int = RandNoiseF(
        seed + items_to_break,
        consumables.Size()
      ) as int;

      var item: SItemUniqueId = consumables[index];
      var witcherplayer: W3PlayerWitcher = GetWitcherPlayer();

      consumables.EraseFast(index);

      if (witcherplayer.IsItemEquipped(item)) {
        witcherplayer.UnequipItem(item);
      }

      inventory.SingletonItemRemoveAmmo(item, 1);
    }
  }

  public function submitOnMilestoneContractCompleted(
    origin: WMH_MilestoneContract,
    seed: int
  ) {
    this.loot.onMilestoneContractCompleted(seed);
  }
}

