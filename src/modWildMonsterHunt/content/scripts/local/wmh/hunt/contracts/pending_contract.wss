struct WMH_PendingContractLocation {
  var spawn_point: WMH_BiomeSpawnPoint;

  // Dynamic, you may leave it empty as it will be defined during gameplay.
  //
  // Defines the available locations for the contract based on all the spawn
  // points available in the level.
  var general_heading: float;

  // Dynamic, stores the location of the previous clues to be used to determine
  // the position of the next clue (as long as it follow the general_heading).
  //
  // matches the index of `available_locations`
  var previous_clue_location: Vector;
}

struct WMH_Contract {
  var level: WMH_Level;

  var created_at_minutes: int;

  // to differentiate otherwise similar contracts that were generated in the
  // same time span.
  var index: int;

  var type: WMH_PendingContractType;
}

enum WMH_PendingContractType {
  WMH_PendingContractType_DEFAULT = 0,
  WMH_PendingContractType_MILESTONE = 1,
}

class WMH_PendingContract {
  var contract: WMH_Contract;
  var affix_manager: WMH_AffixManager;

  var targets: array<WMH_ContractTarget>;

  var encounter_tag: WMH_EncounterTag;
  default encounter_tag = WMH_EncounterTag_ContractRegular;

  public function init(bestiary: WMH_Bestiary, contract: WMH_Contract, optional do_not_inform_gui: bool): WMH_PendingContract {
    this.contract = contract;

    var targets_count: int = WMH_diminishingReturns(
      this.getContractSeed(),
      1.0 + contract.level.value * 0.01,
      1.0
    );

    while (targets_count > 0) {
      this.targets.PushBack(
        (new WMH_ContractTarget in this).initRandom(
          this.getContractSeed(targets_count),
          contract.level
        )
      );
    }

    this.affix_manager = (new WMH_AffixManager in this)
      .init(this.contract.level, this.getContractSeed(1));

    if (!do_not_inform_gui) {
      WMHHUD("New contract: " + this.toTargetLocNameHtml());
    }

    return this;
  }

  public function onHuntStarted(bestiary: WMH_Bestiary) {
    for target: WMH_ContractTarget in this.targets {
      target.onHuntStarted(bestiary);
    }
  }

  public function onSpawn(bestiary: WMH_Bestiary, hunt_seed: int) {
    this.trySpawningTarget(hunt_seed);
  }

  public function onSpawn_clues(bestiary: WMH_Bestiary, hunt_seed: int) {
    this.trySpawningClues(bestiary, hunt_seed);
  }

  public function isContractExpired(): bool {
    var now: int = WMH_getGameTimeMinutes();

    return now - this.contract.created_at_minutes >= ContractDurationMinutes!;
  }

  public function isTargetted(id: WMH_BestiaryId): bool {
    for target: WMH_ContractTarget in this.targets {
      if (target.isTargetted(id)) {
        return true;
      }
    }

    return false;
  }

  public function getContractSeed(optional offset: int): int {
    return offset
         + (this.contract.level.value as int)
         - this.contract.created_at_minutes
         + this.contract.index;
  }

  public function toTargetLocNameHtml(): string {
    var add_space: bool;

    // note: the affixes are prefixed by a space
    var output: string = this.affix_manager.toLocString();

    for target: WMH_ContractTarget in this.targets {
      output += target.toTargetLocNameHtml();

      if (add_space) {
        output += " ";
      }

      add_space = true;
    }
    
    return output;
  }

  public function getType(): WMH_PendingContractType {
    return WMH_PendingContractType_DEFAULT;
  }

  public function canBeCompleted(
    out killed_creatures: array<WMH_HuntKill>,
    optional only_milestones: bool
  ): bool {
    for target: WMH_ContractTarget in this.targets {
      var was_killed: bool = false;

      var i: int;
      for (i = 0; i < killed_creatures.Size() && !was_killed; i += 1) {
        var tag: WMH_EncounterTag = killed_creatures[i].encounter_tag;

        if (!only_milestones || tag == WMH_EncounterTag_ContractMilestone) {
          if (target.isTargetted(killed_creatures[i].bestiary_id)) {
            was_killed = true;
          }
        }
      }

      if (!was_killed) {
        return false;
      }
    }
    
    return true;
  }

  public function onContractCompleted(provider: WMH_RewardProvider) {
    this.getItemRewards(provider);

    WMH_getLootManager()
      .onPendingContractCompleted(this.getContractSeed());

    var storage: WMH_Storage = WMH_getStorage();
    storage.contract.completed_contracts_history.Insert(0, this.contract);

    while (storage.contract.completed_contracts_history.Size() > 10) {
      storage.contract.completed_contracts_history.PopBack();
    }
  }

  private function getItemRewards(out provider: WMH_RewardProvider) {
    for target: WMH_ContractTarget in this.targets {
      // the entry sets the group name as well
      target.bentry.onContractCompleted(
        provider,
        this.contract,
        this.getContractSeed(10)
      );

      var difficulty: int = theGame.GetDifficultyLevel();

      var money: int = WMH_difficultyScaleDownF(
        target.bentry.strength * 1.5
        // at level 25 the rewards are doubled
        * (1 + this.contract.level.value / 25),

        // decreases it by 10% for every difficulty level
        0.1
      ) as int;

      provider.appendMoney(money);

      var experience: int = WMH_difficultyScaleUpF(
        (40 + target.bentry.strength * 8)
        // at level 100 the rewards are doubled, the XP should scale with
        // contract level, but it shouldn't be too high either:
        * (1 + this.contract.level.value / 100.0),

        // increases it by 10% for every difficulty level
        0.1
      ) as int;

      provider.appendExperience(experience);

      var can_drop_reagent: bool = RandNoiseF(this.getContractSeed(), 1.0)
        < MinF((target.bentry.strength as float) * 0.1, 0.5);

      if (can_drop_reagent) {
        provider.appendItem('modwmh_melding_reagent', 1);
      }
    }
  }

  private function trySpawningTarget(hunt_seed: int) {
    for target: WMH_ContractTarget in this.targets {
      target.trySpawningTarget(hunt_seed, this, this.encounter_tag);
    }
  }

  private function trySpawningClues(bestiary: WMH_Bestiary, hunt_seed: int) {
    for target: WMH_ContractTarget in this.targets {
      target.trySpawningClues(this, bestiary, hunt_seed);
    }
  }
}