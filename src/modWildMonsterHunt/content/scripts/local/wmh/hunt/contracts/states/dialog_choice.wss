
state DialogChoice in WMH_ContractManager {
  var camera: WMH_StaticCamera;

  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.DialogChoice_main();
  }

  entry function DialogChoice_main() {
    Sleep(0.1);

    this.camera = WMH_getStaticCamera();
    var noticeboard: W3NoticeBoard = this.getNearbyNoticeboard();

    if (noticeboard) {
      this.camera.teleportAndLookAt(
        noticeboard.GetWorldPosition()
          + VecFromHeading(noticeboard.GetHeading()) * 4
          + Vector(0, 0, 1.5),
        noticeboard.GetWorldPosition()
          + Vector(0, 0, 1.5)
      );

      theGame.FadeOut(0.2);
      this.camera.start();
      theGame.FadeInAsync(0.4);
    }
    
    this.displayChoicesMain();
    WMH_setdialogHoverContractsListener(NULL);
    WMHPOPUP("", 1);
    this.camera.Stop();
    parent.GotoState('Waiting');
  }

  public function getNearbyNoticeboard(): W3NoticeBoard {
    var entities: array<CGameplayEntity>;
    var board: W3NoticeBoard;
    var i: int;

    FindGameplayEntitiesInRange(
      entities,
      thePlayer,
      20, // range, 
      1, // max results
      , // tag: optional value
      FLAG_ExcludePlayer,
      , // optional value
      'W3NoticeBoard'
    );

    // bold move here, if there are no noticeboard nearby the game will crash.
    board = entities[0] as W3NoticeBoard;

    return board;
  }

  latent function displayChoicesMain() {
    var choices: array<SSceneChoice>;
    var storage: WMH_StorageContract = WMH_getStorageContract();

    while (true) {
      WMH_setdialogHoverContractsListener(new WMH_DHCL_HuntInfo in this);

      choices.Clear();
      choices.PushBack(SSceneChoice(
        "Active contracts",
        true, // emphasis
        false, // previouslyChoosen
        false, // disabled
        DialogAction_MONSTERCONTRACT,
        'ViewEditActiveContracts'
      ));

      if (storage.favourite_contracts.Size() > 0) {
        choices.PushBack(SSceneChoice(
          "Favorite contracts",
          false, // emphasis
          false, // previouslyChoosen
          false, // disabled
          DialogAction_NONE,
          'ViewEditFavouriteContracts'
        ));
      }

      if (storage.completed_contracts_history.Size()) {
        choices.PushBack(SSceneChoice(
          "Completed contracts history",
          false, // emphasis
          true, // previouslyChoosen
          false, // disabled
          DialogAction_NONE,
          'ViewContractsHistory'
        ));
      }

      choices.PushBack(SSceneChoice(
        "Cancel",
        false,
        true,
        false,
        DialogAction_GETBACK,
        'Cancel'
      ));

      var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
      SU_closeDialogChoiceInterface();

      if (response.playGoChunk == 'ViewEditActiveContracts') {
        this.displayChoicesViewEditActiveContracts();
      }
      else if (response.playGoChunk == 'ViewEditFavouriteContracts') {
        this.displayChoicesViewEditFavouriteContracts();
      }
      else if (response.playGoChunk == 'ViewContractsHistory') {
        this.displayChoicesContractsHistory();
      }
      else { // Cancel option
        return;
      }
    }
  }

  latent function displayChoicesViewEditActiveContracts() {
    var choices: array<SSceneChoice>;
    var hover_info: WMH_DHCL_ContractInfo = new WMH_DHCL_ContractInfo in this;

    while (true) {
      choices.Clear();
      hover_info.contracts.Clear();

      var contracts: WMH_ContractManager = WMH_getContractManager();
      var chunks: array<name>;
      chunks.PushBack('Contract_1');
      chunks.PushBack('Contract_2');
      chunks.PushBack('Contract_3');
      chunks.PushBack('Contract_4');
      chunks.PushBack('Contract_5');

      var i: int;
      for (i = 0; i < contracts.pending_contracts.Size(); i += 1) {
        var pending: WMH_PendingContract = contracts.pending_contracts[i];

        choices.PushBack(SSceneChoice(
          pending.toTargetLocNameHtml(),
          pending.contract.type == WMH_PendingContractType_MILESTONE,
          false,
          false,
          DialogAction_GETBACK,
          chunks[i]
        ));

        hover_info.contracts.PushBack(pending);
      }

      WMH_setdialogHoverContractsListener(hover_info);
      choices.PushBack(SSceneChoice(
        "Cancel",
        false,
        true,
        false,
        DialogAction_GETBACK,
        'Cancel'
      ));

      var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
      SU_closeDialogChoiceInterface();

      if (response.playGoChunk == 'Cancel') {
        return;
      }
      else {
        var index: int = chunks.FindFirst(response.playGoChunk);

        if (index >= 0) {
          this.displayChoicesViewEditContract(index);
        }
        else {
          WMHERROR("invalid contract index for displayChoicesViewEditContract()");
        }
      }
    }
  }

  latent function displayChoicesViewEditFavouriteContracts() {
    var choices: array<SSceneChoice>;
    var contract: WMH_Contract;
    var index: int;

    while (true) {
      var selected_any: bool = this.displayChoicesSelectFavouriteContract(
        contract,
        index
      );

      WMH_setdialogHoverContractsListener(NULL);

      if (!selected_any) {
        return;
      }
      
      choices.Clear();
      choices.PushBack(SSceneChoice(
        "Delete",
        false,
        true,
        false,
        DialogAction_NONE,
        'Delete'
      ));

      choices.PushBack(SSceneChoice(
        "Cancel",
        false,
        true,
        false,
        DialogAction_GETBACK,
        'Cancel'
      ));

      var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
      SU_closeDialogChoiceInterface();

      if (response.playGoChunk == 'Delete') {
        var storage: WMH_StorageContract = WMH_getStorageContract();
        storage.favourite_contracts.Erase(index);
      }
    }
  }

  latent function displayChoicesViewEditContract(index: int) {
    var choices: array<SSceneChoice>;

    WMH_setdialogHoverContractsListener(NULL);
    while (true) {
      choices.Clear();

      var manager: WMH_ContractManager = WMH_getContractManager();
      var pending: WMH_PendingContract = manager.pending_contracts[index];

      if (pending.contract.type != WMH_PendingContractType_MILESTONE) {
        choices.PushBack(SSceneChoice(
          "Lower difficulty",
          false, // emphasis
          false, // previouslyChoosen
          false, // disabled
          DialogAction_NONE,
          'ViewEditContractLowerDifficulty'
        ));

        choices.PushBack(SSceneChoice(
          "Raise difficulty",
          false, // emphasis
          false, // previouslyChoosen
          false, // disabled
          DialogAction_NONE,
          'ViewEditContractRaiseDifficulty'
        ));

        choices.PushBack(SSceneChoice(
          "Replace with favorite contract",
          false, // emphasis
          false, // previouslyChoosen
          false, // disabled
          DialogAction_MONSTERCONTRACT,
          'ViewEditContractReplaceFavourite'
        ));
      }

      choices.PushBack(SSceneChoice(
        "Cancel",
        false,
        true,
        false,
        DialogAction_GETBACK,
        'Cancel'
      ));

      var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
      SU_closeDialogChoiceInterface();

      if (response.playGoChunk == 'ViewEditContractLowerDifficulty') {
        WMH_getContractManager().onContractLevelChanged(index, -5);
        return;
      }
      else if (response.playGoChunk == 'ViewEditContractRaiseDifficulty') {
        WMH_getContractManager().onContractLevelChanged(index, 5);
        return;
      }
      else if (response.playGoChunk == 'ViewEditContractReplaceFavourite') {
        var new_contract: WMH_Contract;
        var fav_index: int;
        
        var selected_any: bool = this.displayChoicesSelectFavouriteContract(
          new_contract,
          fav_index
        );

        if (selected_any) {
          WMH_getContractManager().onContractReplaced(index, new_contract);
          return;
        }
      }
      else { // Cancel option
        return;
      }
    }
  }

  latent function displayChoicesSelectFavouriteContract(
    out contract: WMH_Contract, out index: int
  ): bool {
    var hover_info: WMH_DHCL_ContractInfo = new WMH_DHCL_ContractInfo in this;
    var contracts_storage: WMH_StorageContract = WMH_getStorageContract();
    var choices: array<SSceneChoice>;

    var bestiary: WMH_Bestiary = WMH_getBestiary();

    while (true) {
      choices.Clear();
      hover_info.contracts.Clear();

      hover_info.contracts.PushBack(NULL);
      choices.PushBack(SSceneChoice(
        "Cancel",
        false,
        true,
        false,
        DialogAction_GETBACK,
        'Cancel'
      ));

      var i: int;
      for (i = 0; i < contracts_storage.favourite_contracts.Size(); i += 1) {
        var pending: WMH_PendingContract = (new WMH_PendingContract in this)
          .init(bestiary, contracts_storage.favourite_contracts[i], true);

        hover_info.contracts.PushBack(pending);
        choices.PushBack(SSceneChoice(
          "#" + (i+1) + " " + pending.toTargetLocNameHtml(),
          false,
          false,
          false,
          DialogAction_MONSTERCONTRACT,
          'Contract'
        ));
      }

      WMH_setdialogHoverContractsListener(hover_info);
      var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
      SU_closeDialogChoiceInterface();

      if (response.playGoChunk == 'Cancel') {
        return false;
      }

      for (i = 0; i < choices.Size(); i += 1) {
        if (StrFindFirst(response.description, choices[i].description) >= 0) {
          // -1 due to the 'Cancel' being the first option
          contract = contracts_storage.favourite_contracts[i - 1];
          index = i;
          return true;
        }
      }
    }

    return false;
  }

  latent function displayChoicesContractsHistory() {
    var hover_info: WMH_DHCL_ContractInfo = new WMH_DHCL_ContractInfo in this;
    var contracts_storage: WMH_StorageContract = WMH_getStorageContract();
    var choices: array<SSceneChoice>;

    var bestiary: WMH_Bestiary = WMH_getBestiary();

    while (true) {
      choices.Clear();
      hover_info.contracts.Clear();

      hover_info.contracts.PushBack(NULL);
      choices.PushBack(SSceneChoice(
        "Cancel",
        false,
        true,
        false,
        DialogAction_GETBACK,
        'Cancel'
      ));

      var i: int;
      for (i = 0; i < contracts_storage.completed_contracts_history.Size(); i += 1) {
        var pending: WMH_PendingContract = (new WMH_PendingContract in this)
          .init(bestiary, contracts_storage.completed_contracts_history[i], true);

        var already_favourite: bool = WMH_isContractFavourite(
          contracts_storage,
          contracts_storage.completed_contracts_history[i]
        );

        hover_info.contracts.PushBack(pending);
        choices.PushBack(SSceneChoice(
          "#" + (i+1) + " " + pending.toTargetLocNameHtml(),
          already_favourite, // emphasis
          false, // previouslyChoosen
          false, // disabled
          DialogAction_MONSTERCONTRACT,
          'Contract'
        ));
      }

      WMH_setdialogHoverContractsListener(hover_info);
      var response: SSceneChoice = SU_setDialogChoicesAndWaitForResponse(choices);
      SU_closeDialogChoiceInterface();

      if (response.playGoChunk == 'Cancel') {
        return;
      }

      for (i = 0; i < choices.Size(); i += 1) {
        if (StrFindFirst(response.description, choices[i].description) >= 0) {
          WMHINFO("new_favourite found");
          // -1 due to the 'Cancel' being the first option
          var new_favourite: WMH_Contract = contracts_storage
              .completed_contracts_history[i - 1];

          var already_favourite: bool = WMH_isContractFavourite(
            contracts_storage,
            new_favourite
          );

          if (already_favourite) {
            contracts_storage.favourite_contracts.Remove(new_favourite);
            WMHHUD("The contract is no longer marked as favorite");
            Sleep(3.0);
          }
          else {
            contracts_storage.favourite_contracts.PushBack(new_favourite);
            WMHHUD("The contract was added to the favorites");
            Sleep(3.0);
          }
        }
      }
    }
  }
}