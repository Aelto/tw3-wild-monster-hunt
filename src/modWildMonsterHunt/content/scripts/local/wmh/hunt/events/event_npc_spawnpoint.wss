statemachine class WMH_EventNpcSpawnPoint extends CGameplayEntity {
  protected editable var npc_path: string;
  hint npc_path = "Path to a w2ent that will spawn a npc, ideally the spawned entity should use the WMH_EventNpc class.";

  protected editable var required_points_cleared_tag: name;
  hint required_points_cleared_tag = "A tag used to fetching the spawn points that must be cleared for EventNpc to spawn. If left empty then it defaults to using the points in the cleared_radius instead.";

  protected editable var required_points_cleared_radius: float;
  default required_points_cleared_radius = 50.0;
  hint required_points_cleared_radius = "A radius where all spawn points must be clear of monsters for the EventNpc to spawn.";

  protected var npc: WMH_EventNpc;
  protected var npc_spawn_hunt_seed: int;
  
  public function trySpawnNpc(hunt_seed: int) {
    if (this.npc_spawn_hunt_seed != hunt_seed) {
      if (this.npc) {
        this.npc.onDestroy();
        this.npc.Destroy();
      }
    }

    if (!this.canSpawn()) {
      WMHINFO("WMH_EventNpcSpawnPoint, trySpawnNpc(), cannot spawn");
      return;
    }

    if (this.GetCurrentStateName() == 'Spawning') {
      this.GotoState('Waiting');
    }

    this.npc_spawn_hunt_seed = hunt_seed;
    this.GotoState('Spawning');
  }

  protected function canSpawn(): bool {
    var points: array<WMH_BiomeSpawnPoint>;

    if (this.npc) {
      return false;
    }

    if (IsNameValid(this.required_points_cleared_tag)) {
      this.getRequiredPointsClearedByTag(
        this.required_points_cleared_tag,
        points
      );
    }
    else {
      this.getRequiredPointsClearedByRadius(
        this.required_points_cleared_radius,
        points
      );
    }

    for point: WMH_BiomeSpawnPoint in points {
      if (point.isOccupied()) {
        return false;
      }
    }

    return true;
  }

  private function getRequiredPointsClearedByTag(
    tag: name,
    out output: array<WMH_BiomeSpawnPoint>
  ) {
    var entities: array<CEntity>;

    theGame.GetEntitiesByTag(tag, entities);
    for entity: CEntity in entities {
      var point: WMH_BiomeSpawnPoint = entity as WMH_BiomeSpawnPoint;

      if (point) {
        output.PushBack(point);
      }
    }
  }

  private function getRequiredPointsClearedByRadius(
    radius: float,
    out output: array<WMH_BiomeSpawnPoint>
  ) {
    var entities: array<CGameplayEntity>;

    FindGameplayEntitiesInRange(
      entities,
      this, // around this
      radius,
      50, // max results
      'WMH_BiomeSpawnPoint'
    );

    for entity: CEntity in entities {
      var point: WMH_BiomeSpawnPoint = entity as WMH_BiomeSpawnPoint;

      if (point) {
        output.PushBack(point);
      }
    }
  }
}

state Waiting in WMH_EventNpcSpawnPoint {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.Waiting_main();
  }

  entry function Waiting_main() {}
}

state Spawning in WMH_EventNpcSpawnPoint {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.Spawning_main();
  }

  entry function Spawning_main() {
    WMHINFO("WMH_EventNpcSpawnPoint, state Spawning");

    var template: CEntityTemplate = LoadResourceAsync(
      parent.npc_path,
      true
    ) as CEntityTemplate;

    parent.npc = theGame.CreateEntity(
      template,
      parent.GetWorldPosition(),
      parent.GetWorldRotation()
    ) as WMH_EventNpc;

    parent.GotoState('Waiting');
  }
}