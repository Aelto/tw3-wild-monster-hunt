statemachine class WMH_EventNpc extends CNewNPC {
  var conversation: WMH_ConversationManager;
  var events: array<WMH_EventNpc_BaseEvent>;
  var seed: int;

  /// stores the heading the player approached from
  var player_approach_heading: float;

  event OnSpawned(spawnData: SEntitySpawnData) {
    this.GotoState('Waiting');
    this.player_approach_heading = VecHeading(
      thePlayer.GetWorldPosition() - this.GetWorldPosition()
    );

    // we don't want the NPC to drop anything in case he dies.
    this.GetInventory().RemoveAllItems();

    var encounter: WMH_EncounterManager = WMH_getEncounterManager();
    encounter.onEventNpcSpawned(this);
  }

  event OnInteraction(actionName: string, activator: CEntity) {
    if (actionName != "Talk") {
      return super.OnInteraction(actionName, activator);
    }

    WMHTUTOFACT(
      'WMH_LureSpot_OnInteraction',
      "Person in Distress",
      "You may randomly encounter <font color='#CD7D03'>Persons in Distress</font> during your hunts. Usually found in safe areas where no monster will attack them, they offer <font color='#CD7D03'>mini events</font> that you can complete for additional rewards & experience.<br/><br/>"
    );

    // 1. load/generate events
    this.seed = this.getSeed();
    this.generateEvents(this.seed);

    // 2.
    this.GotoState('DialogChoice');
  }

  event OnInteractionActivationTest(
    interactionComponentName: string,
    activator: CEntity
  ) {
    return StrLower(interactionComponentName) == "talk"
        && activator == thePlayer
        && thePlayer.CanStartTalk();
  }

  public function tryStartEvent(index: int) {
    var an_event: WMH_EventNpc_BaseEvent = this.events[index];

    if (an_event) {
      an_event.tryStart();
    }
  }

  public function tryCompleteEvent(index: int) {
    var an_event: WMH_EventNpc_BaseEvent = this.events[index];

    if (!an_event) {
      return;
    }
  
    var provider: WMH_RewardProvider = new WMH_RewardProvider in this;

    if (an_event.tryComplete(provider)) {
      provider.transferItems(thePlayer.GetInventory());
      theSound.SoundEvent("gui_inventory_buy");
      WMHPOPUP(provider.toHtml(thePlayer.GetInventory()));
    }
  }

  public function onDestroy() {
    for an_event: WMH_EventNpc_BaseEvent in this.events {
      an_event.tryCancel();
    }

    this.events.Clear();
  }

  protected function getSeed(): int {
    var position: Vector = this.GetWorldPosition();

    return WMH_getHuntManager().getSeed()
         + (position.X as int)
         - (position.Y as int)
         + 100;
  }

  protected function generateEvents(seed: int) {
    if (this.events.Size() > 0) {
      return;
    }

    var max: int = 1;
    var i: int;
    for (i = 0; i < max; i += 1) {
      var npc_event: WMH_EventNpc_BaseEvent = this.generateRandomEvent(seed + i);
      this.events.PushBack(npc_event);
    }
  }

  protected function generateRandomEvent(seed: int): WMH_EventNpc_BaseEvent {
    var roll: int = RandNoiseF(seed + 1, 3) as int;

    if (roll < 1) {
      var event_fetchitem: WMH_EventNpc_EventFetchItem;
      event_fetchitem = new WMH_EventNpc_EventFetchItem in this;
      event_fetchitem.init(this, seed);
      
      return event_fetchitem;
    }
    else if (roll < 2) {
      var event_protecthorse: WMH_EventNpc_EventProtectHorde;
      event_protecthorse = new WMH_EventNpc_EventProtectHorde in this;
      event_protecthorse.init(this, seed);
      
      return event_protecthorse;
    }

    var event_clearpoi: WMH_EventNpc_EventClearPoi;
    event_clearpoi = new WMH_EventNpc_EventClearPoi in this;
    event_clearpoi.init(this, seed);

    return event_clearpoi;
  }
}