abstract class WMH_EventNpc_BaseEvent {
  protected var origin: WMH_EventNpc;
  protected var seed: int;

  public var is_active: bool;
  public var is_completed: bool;

  public function init(origin: WMH_EventNpc, seed: int) {
    this.origin = origin;
    this.seed = seed;
  }

  public function description(): string {
    return "Offer help";
  }

  // override for actions when the event is starting, when it's being tracked.
  // For example adding a 3D Marker, or a quest entry
  public function tryStart() {
    this.is_active = true;
  }

  // override to add custom rewards to the provider, if the returned value is
  // `true` then the provider shall be used.
  public function tryComplete(provider: WMH_RewardProvider): bool {
    this.onDestroy();
    this.is_completed = true;
    theSound.SoundEvent("gui_inventory_buy");
    return true;
  }

  public function canBeCompleted(): bool {
    return this.is_active && !this.is_completed;
  }

  public function tryCancel() {
    if (!this.is_completed) {
      this.onDestroy();
    }
  }

  protected function onDestroy() {}

  protected function itemQuantity(optional offset: int): int {
    return 1 + RandNoiseF(this.seed + offset, 3.0) as int;
  }

  protected function itemName(optional offset: int): name {
    var loot_manager: WMH_LootManager = WMH_getLootManager();

    return loot_manager.getRandomItem(
      this.itemCategory(offset),
      this.seed + offset
    );
  }

  private function itemCategory(optional offset: int): WMH_LootTag {
    var roll: float = RandNoiseF(this.seed + offset, 1.0);

    if (roll < 0.25) {
      return WMH_LootTag_Herb;
    }
    else if (roll < 0.50) {
      return WMH_LootTag_Alchemy;
    }
    else if (roll < 0.75) {
      return WMH_LootTag_Material;
    }
    
    return WMH_LootTag_Food;
  }
}