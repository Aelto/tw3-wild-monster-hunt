#define const HuntSeedOffset_difficulty = 10;

function WMH_getHuntManager(): WMH_HuntManager {
  return thePlayer.wmh.hunt;
}

function WMH_getHuntManagerSpawnratesPseudoRng(): WMH_PseudoRngBuffer {
  return thePlayer.wmh.hunt.spawnrates_pseudo_rng;
}

struct WMH_HuntKill {
  var bestiary_id: WMH_BestiaryId;
  var encounter_tag: WMH_EncounterTag;
}

// Stores the data about the currently active hunt
statemachine class WMH_HuntManager {
  private var master: WMH_Master;

  public var encounters: WMH_EncounterManager;
  public var contract: WMH_ContractManager;
  public var wildlife: WMH_WildlifeManager;
  public var hunt_facts: WMH_HuntFactsDb;
  
  /// Tweaks the spawn rates dynamically during the hunt to ensure a greater
  /// variety of spawns.
  public var spawnrates_pseudo_rng: WMH_PseudoRngBuffer;

  protected var factory: WMH_HuntSeedFactory;
  protected var seed: int;

  private var start_time: GameTime;
  private var start_time_engine: float;
  private var save_lock: int;
  default save_lock = -1;

  // stores the creatures that were killed during the current hunt, and that
  // should result in completed contracts the next time the player enters a
  // settlement.
  private var killed_creatures: array<WMH_HuntKill>;

  public function init(master: WMH_Master): WMH_HuntManager {
    this.master = master;

    this.hunt_facts = new WMH_HuntFactsDb in this;
    this.encounters = (new WMH_EncounterManager in this).init();
    
    this.contract = (new WMH_ContractManager in this)
      .init(master.bestiary, master.storage);

    this.wildlife = (new WMH_WildlifeManager in this).init();
    this.GotoState('Waiting');

    return this;
  }

  public function getSeed(): int {
    return this.seed;
  }

  public function onHuntStarted(storage: WMH_Storage) {
    var index: int = 0;

    this.factory = WMH_HuntSeedFactory(
      storage.general.level,
      index,
      WMH_getGameTimeMinutes()
    );

    this.seed = (
      this.factory.level.value
      * (this.factory.index + 1)
      + this.factory.timeoffset
    ) as int;

    this.spawnrates_pseudo_rng = WMH_getBestiary().toPseudoRngBuffer();

    WMH_setHuntSeedFact(this.seed);

    this.start_time = WMH_getGameTimeNow();
    this.start_time_engine = WMH_getEngineTimeAsSeconds();
    this.killed_creatures.Clear();
    this.encounters.onHuntStarted();
    this.hunt_facts.onHuntStarted();

    if (!thePlayer.wmh.hasJustBooted()) {
      // theGame.SaveGame(SGT_QuickSave, -1);
      theGame.CreateNoSaveLock("WMH_HuntStart", this.save_lock, true, false);
    }

    if (this.GetCurrentStateName() == 'Waiting') {
      this.GotoState('Running');
    }
  }

  public function onHuntFinished(
    bestiary: WMH_Bestiary,
    storage: WMH_Storage
  ) {
    if (this.GetCurrentStateName() == 'Running') {
      this.GotoState('Waiting');
    }

    this.contract.onHuntFinished(bestiary, storage, this.killed_creatures);
    this.encounters.onHuntFinished();
    this.killed_creatures.Clear();

    if (!thePlayer.wmh.hasJustBooted()) {
      // theGame.SaveGame(SGT_QuickSave, -1);
      if (theGame.AreSavesLocked() && this.save_lock != -1) {
        theGame.ReleaseNoSaveLock(this.save_lock);
      }
    }
  }

  public function onCreatureKilled(
    bentry: WMH_BestiaryEntry,
    encounter_tag: WMH_EncounterTag
  ) {
    this.killed_creatures.PushBack(WMH_HuntKill(bentry.id, encounter_tag));

    var is_contract: bool = encounter_tag == WMH_EncounterTag_ContractRegular
      || encounter_tag == WMH_EncounterTag_ContractMilestone;

    if (is_contract) {
      theSound.SoundEvent("gui_ingame_new_journal");
      WMHHUD("A contract was completed");
    }
  }

  public function difficulty(): int {
    var seed: int = this.seed + HuntSeedOffset_difficulty!;

    var max: int = (this.factory.level.value + 2) as int;
    var min: int = Max((this.factory.level.value - 2) as int, 0);

    return RandNoiseF(
      seed,
      max as float,
      min as float
    ) as int;
  }

  public function isInHunt(): bool {
    return this.GetCurrentStateName() == 'Running';
  }

  public function onPlayerDeath() {
    this.killed_creatures.Clear();
  }

  public function onEncounterSpawned(entries: array<WMH_BestiaryEntry>) {
    for bentry: WMH_BestiaryEntry in entries {
      this.spawnrates_pseudo_rng.notifyRolledEntry(bentry.id.value);
    }
  }

  public function hasHappenedDuringHunt(engine_time: float): bool {
    return engine_time > this.start_time_engine && this.isInHunt();
  }

  protected function getSecondsSinceStart(): int {
    if (!this.isInHunt()) {
      return 0;
    }

    return WMH_getGameTimeSecondsSince(this.start_time);
  }
}

function WMH_setHuntSeedFact(seed: int) {
  FactsSet("WMH_hunt_seed", seed);
}

function WMH_getHuntSeedFact(): int {
  return FactsQueryLatestValue("WMH_hunt_seed");
}