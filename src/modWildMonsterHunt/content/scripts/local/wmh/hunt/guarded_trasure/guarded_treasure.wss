exec function wmhgennearbytreasures() {
  WMH_generateNearbyTreasures(50);
}

function WMH_generateNearbyTreasures(radius: float) {
  var entities: array<CGameplayEntity>;

  FindGameplayEntitiesInRange(
    entities,
    thePlayer,
    radius,
    100,
    , //tags
    , // queryflags
    , // target
    'WMH_GuardedTreasure'
  );

  for entity: CGameplayEntity in entities {
    var treasure: WMH_GuardedTreasure = entity as WMH_GuardedTreasure;

    if (!treasure) {
      continue;
    }

    treasure.requestAsynchronousGeneration();
  }
}

statemachine class WMH_GuardedTreasure extends WMH_DynDecoration {
  public var origin: WMH_BiomeSpawnPoint;

  protected var encounter: WMH_EncounterGuardedTreasure;
  protected var encounter_killed: bool;

  protected editable var creature_bypass_tags: array<name>;
  hint creature_bypass_tags = "If let empty, will default to using the biome data. If filled then the treasure shall only host creatures with the supplied tags.";

  event OnSpawned(spawnData: SEntitySpawnData) {
    super.OnSpawned(spawnData);
	}

  public function init(origin: WMH_BiomeSpawnPoint) {
    this.origin = origin;
    this.trySpawnEntities();
  }

  //#region spawning of entities
  // OVERRIDE to return a custom bestiary entry if needed 
  // 
  // as long as the returned bool is true it will continue to increase the index
  // in order to get new bestiary entries to spawn
  private function getBestiaryEntryToSpawn(
    index: int,
    bestiary: WMH_Bestiary,
    contract: WMH_ContractManager,
    out bentry: WMH_BestiaryEntry
  ): bool {
    var tags_count: int = this.creature_bypass_tags.Size();
    // perform a search by tag
    if (tags_count > 0) {
      var tag_index: int = RandNoiseF(
        this.getSeed(40 + index),
        tags_count
      ) as int;

      bentry = bestiary
        .getEntryByBiomeTagByPass(this.creature_bypass_tags[tag_index]);
    }
    // perform a fully PRNG search
    else {
      var options: WMH_getRandomEntryOptions;
      options.exclude_strong_target = !this.origin.allow_strong_targets;
      options.exclude_weak_target = !this.origin.allow_weak_targets;

      bentry = bestiary.active_view.getRandomEntry(
        contract,
        bestiary.biomes,
        this.origin.biome_tags,
        this.origin.biome_tags_bypass,
        this.getSeed(1),
        options
      );
    }

    return true;
  }

  public function trySpawnEntities() {
    if (this.encounter_killed || this.encounter) {
      return; 
    }

    var spawn_slots: array<CComponent>;
    this.getSpawnSlots(spawn_slots);

    var bestiary: WMH_Bestiary = WMH_getBestiary();
    var contract: WMH_ContractManager = WMH_getContractManager();

    var i: int = 0;

    var bentry: WMH_BestiaryEntry;
    var should_spawn: bool = this.getBestiaryEntryToSpawn(
      i,
      bestiary,
      contract,
      bentry
    );

    if (!should_spawn) {
      return;
    }

    var spawn_position: Vector;
    var slots_count: int = spawn_slots.Size();
    if (slots_count > 0) {
      var slot_index: int = RandNoiseF(
        this.getSeed(10 + i),
        slots_count
      ) as int;

      var slot: CComponent = spawn_slots[slot_index];
      spawn_position = slot.GetWorldPosition();
    }
    else {
      spawn_position = this.origin.GetWorldPosition();
    }

    WMHINFO("trySpawnEntities(), onSpawnGuardedTreasureEncounter");

    bestiary.onSpawnGuardedTreasure(
      this,
      bentry,
      spawn_position,
      this.getSeed(20 + i)
    );
  }

  private function getSpawnSlots(out slots: array<CComponent>) {
    slots = this
      .GetComponentsByClassName('WMH_GuardedTreasure_SpawnComponent');
  }

  public function onEncounterSpawned(
    encounter: WMH_EncounterGuardedTreasure
  ) {
    this.encounter = encounter;
    this.encounter_killed = false;

    WMH_getEncounterManager().onGuardedTreasureSpawned(encounter);
  }

  public function onEncounterDestroyed(
    encounter: WMH_EncounterGuardedTreasure
  ) {
    this.encounter = NULL;
    this.encounter_killed = encounter.isCompleted();
  }

  public function isCompleted(): bool {
    return this.encounter_killed;
  }
  //#endregion
}