/// Used as spawn positions in WMH_GuardedTreasure instances
class WMH_GuardedTreasure_SpawnComponent extends CScriptedComponent {}


/// Used as a spawn location for new WMH_GuardedTreasure instances
statemachine class WMH_GuardTreasureSpawnPoint extends WMH_BiomeSpawnPoint {
  protected var treasure: WMH_GuardedTreasure;
  protected var previous_hunt_seed: int;

  public function trySpawnGuardedTreasure(hunt_seed: int) {
    var point_seed: int = this.getPointSeed(hunt_seed);

    WMHINFO("trySpawnGuardedTreasure");
    
    // treasure was part of a previous hunt
    if (this.previous_hunt_seed != hunt_seed) {
      if (this.treasure) {
        this.treasure.beforeDestroy();
        this.treasure.Destroy();
      }
    }
    else if (this.treasure) {
      this.treasure.trySpawnEntities();
      return;
    }

    if (!this.canSpawnMonstersInHunt(point_seed, 0.75)) {
      WMHINFO("trySpawnGuardedTreasure, cannot spawn in hunt");

      return;
    }

    if (!this.canRespawn()) {
      return;
    }

    if (this.GetCurrentStateName() != 'Spawning') {
      this.previous_hunt_seed = hunt_seed;
      this.GotoState('Spawning');
    }
  }

  public function canRespawn(): bool {
    if (this.treasure) {
      return false;
    }

    return true;
	}

  public function isOccupied(): bool {
		if (this.treasure) {
      return !this.treasure.isCompleted();
    }

    return false;
	}
}

state Waiting in WMH_GuardTreasureSpawnPoint {}
state Spawning in WMH_GuardTreasureSpawnPoint {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.Spawning_main();
  }

  entry function Spawning_main() {
    var point_seed: int = parent.getPointSeed(WMH_getHuntManager().getSeed());

    var variant: string = (new WMH_RatiosRollerGen<string> in this)
      .addItem(
        0.2
        + (parent.biome_tags.structuresHigh as int)
        + (parent.biome_tags.roomWide as int)
        - (parent.biome_tags.altitudeHigh as int),
        "dlc\dlcwild_monster_hunt\data\gameplay\guarded_treasures\gt_boxes.w2ent"
      )
      .addItem(
        0.2
        + (parent.biome_tags.structuresHigh as int)
        + (parent.biome_tags.vegetationHigh as int),
        "dlc\dlcwild_monster_hunt\data\gameplay\guarded_treasures\gt_broken_cart.w2ent"
      )
      .addItem(
        0.5
        + (parent.biome_tags.structuresHigh as int)
        - (parent.biome_tags.altitudeHigh as int),
        "dlc\dlcwild_monster_hunt\data\gameplay\guarded_treasures\gt_corpse.w2ent"
      )
      .addItem(
        1.0,
        "dlc\dlcwild_monster_hunt\data\gameplay\guarded_treasures\gt_nest.w2ent"
      )
      .addItem(
        1.0
        + (parent.biome_tags.vegetationHigh as int) * 3
        - (parent.biome_tags.structuresHigh as int)
        - (parent.biome_tags.altitudeHigh as int)
        - (parent.biome_tags.underground as int),
        "dlc\dlcwild_monster_hunt\data\gameplay\guarded_treasures\gt_totem.w2ent"
      )
      .rollItem(point_seed);

    var template: CEntityTemplate = LoadResourceAsync(
      variant,
      true
    ) as CEntityTemplate;

    var entity: CEntity = theGame.CreateEntity(
      template,
      parent.GetWorldPosition(),
      parent.GetWorldRotation()
    ) as CEntity;

    parent.treasure =  entity as WMH_GuardedTreasure;
    parent.treasure.init(parent);
    parent.GotoState('Waiting');
  }
}