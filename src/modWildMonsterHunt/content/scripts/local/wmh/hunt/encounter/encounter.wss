
enum WMH_EncounterTag {
  WMH_EncounterTag_None = 0,
  WMH_EncounterTag_ContractRegular = 1,
  WMH_EncounterTag_ContractMilestone = 2,
}

class WMH_Encounter {
  protected var entries: array<WMH_BestiaryEntry>;
  protected var spawn_point: WMH_BiomeSpawnPoint;
  protected var entities: array<CEntity>;
  protected var encounter_tag: WMH_EncounterTag;

  private var target_oneliner: WMH_GameplayOnelinerEntity;

  public function init(
    spawn_point: WMH_BiomeSpawnPoint,
    entries: array<WMH_BestiaryEntry>,
    entities: array<CEntity>,
    optional encounter_tag: WMH_EncounterTag,
  ): WMH_Encounter {
    this.encounter_tag = encounter_tag;
    this.spawn_point = spawn_point;
    this.entries = entries;
    this.entities = entities;

    var display_oneliner: bool = encounter_tag == WMH_EncounterTag_ContractRegular
      || encounter_tag == WMH_EncounterTag_ContractMilestone;

    if (display_oneliner) {
      this.target_oneliner = WMH_gameplayOnelinerEntity(
        "<img src='img://icons/perks/s_perk_20.png' vspace='-10' />",
        this.spawn_point
      );
      this.target_oneliner.render_distance = 50;
      this.target_oneliner.offset = Vector(0, 0, 1.5);
    }

    return this;
  }

  public function GetWorldPosition(): Vector {
    return this.spawn_point.GetWorldPosition();
  }

  // returns `true` if it needs to be destroyed by the manager
  public function onTick(): bool {
    SUH_removeDeadEntities(this.entities);

    return this.entities.Size() <= 0
        || VecDistanceSquared2D(
            thePlayer.GetWorldPosition(),
            this.GetWorldPosition()
          ) > 400 * 400;
  }

  public function isCompleted(): bool {
    return this.entities.Size() <= 0;
  }

  public function onDestroy() {
    // do it before clearing the entities as it relies on the list to confirm
    // whether it was completed.
    var is_completed: bool = this.isCompleted();

    for entity: CEntity in this.entities {
      if (entity) {
        entity.Destroy();
      }
    }

    this.entities.Clear();

    if (this.spawn_point) {
      this.spawn_point.liberate(is_completed);
    }

    if (this.target_oneliner) {
      this.target_oneliner.unregister();
    }

    var notify: bool = VecDistanceSquared2D(
      thePlayer.GetWorldPosition(),
      this.GetWorldPosition()
    ) < 40 * 40;

    if (notify) {
      if (
        this.encounter_tag == WMH_EncounterTag_ContractRegular
        || this.encounter_tag == WMH_EncounterTag_ContractMilestone
      ) {
        WMHTUTOFACT(
          'WMH_EncounterContractHunterExpertise',
          "Hunter Expertise",
          "<font color='#CD7D03'>You completed a contract</font>.<br/><br/>You are free to go back to the camp now to get the reward or you can continue your hunt at the risk of losing your progress in the event a feint.<br/><br/>Keep note of the location you found this target, but also the weather and the time of day, so the next time a similar creature emerges you will have an easier time finding it."
        );
      }

      for bentry: WMH_BestiaryEntry in this.entries {
        thePlayer.wmh.submitOnCreatureKilled(this, bentry, this.encounter_tag);
      }
    }
  }
}