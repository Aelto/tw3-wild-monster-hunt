
enum WMH_EncounterTag {
  WMH_EncounterTag_None = 0,
  WMH_EncounterTag_ContractRegular = 1,
  WMH_EncounterTag_ContractMilestone = 2,
}

class WMH_Encounter {
  protected var entries: array<WMH_BestiaryEntry>;
  protected var spawn_point: WMH_BiomeSpawnPoint;
  protected var entities: array<CEntity>;
  protected var encounter_tag: WMH_EncounterTag;

  public function init(
    spawn_point: WMH_BiomeSpawnPoint,
    entries: array<WMH_BestiaryEntry>,
    entities: array<CEntity>,
    optional encounter_tag: WMH_EncounterTag,
  ): WMH_Encounter {
    this.encounter_tag = encounter_tag;
    this.spawn_point = spawn_point;
    this.entries = entries;
    this.entities = entities;

    return this;
  }

  public function GetWorldPosition(): Vector {
    return this.spawn_point.GetWorldPosition();
  }

  // returns `true` if it needs to be destroyed by the manager
  public function onTick(): bool {
    SUH_removeDeadEntities(this.entities);

    return this.entities.Size() <= 0
        || VecDistanceSquared2D(
            thePlayer.GetWorldPosition(),
            this.GetWorldPosition()
          ) > 400 * 400;
  }

  public function isCompleted(): bool {
    return this.entities.Size() <= 0;
  }

  public function onDestroy() {
    // do it before clearing the entities as it relies on the list to confirm
    // whether it was completed.
    var is_completed: bool = this.isCompleted();

    for entity: CEntity in this.entities {
      if (entity) {
        entity.Destroy();
      }
    }

    this.entities.Clear();

    if (this.spawn_point) {
      this.spawn_point.liberate(is_completed);
    }

    var notify: bool = VecDistanceSquared2D(
      thePlayer.GetWorldPosition(),
      this.GetWorldPosition()
    ) < 40 * 40;

    if (notify) {
      for bentry: WMH_BestiaryEntry in this.entries {
        thePlayer.wmh.submitOnCreatureKilled(this, bentry, this.encounter_tag);
      }
    }
  }
}