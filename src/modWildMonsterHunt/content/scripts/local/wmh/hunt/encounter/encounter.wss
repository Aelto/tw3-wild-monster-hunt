// 
class WMH_Encounter {
  protected var entries: array<WMH_BestiaryEntry>;
  protected var spawn_point: WMH_BiomeSpawnPoint;
  protected var entities: array<CEntity>;
  protected var encounter_tag: name;

  public function init(
    spawn_point: WMH_BiomeSpawnPoint,
    entries: array<WMH_BestiaryEntry>,
    entities: array<CEntity>,
    optional encounter_tag: name,
  ): WMH_Encounter {
    this.encounter_tag = encounter_tag;
    this.spawn_point = spawn_point;
    this.entries = entries;
    this.entities = entities;

    return this;
  }

  // returns `true` if it needs to be destroyed by the manager
  public function onTick(): bool {
    SUH_removeDeadEntities(this.entities);

    return this.entities.Size() <= 0
        || VecDistanceSquared2D(
            thePlayer.GetWorldPosition(),
            this.spawn_point.GetWorldPosition()
          ) > 250 * 250;
  }

  public function onDestroy() {
    for entity: CEntity in this.entities {
      if (entity) {
        entity.Destroy();
      }
    }

    this.entities.Clear();
    this.spawn_point.liberate();

    var notify: bool = VecDistanceSquared2D(
      thePlayer.GetWorldPosition(),
      this.spawn_point.GetWorldPosition()
    ) > 40 * 40;

    if (notify) {
      for bentry: WMH_BestiaryEntry in this.entries {
        thePlayer.wmh.submitOnCreatureKilled(this, bentry, this.encounter_tag);
      }
    }
  }
}