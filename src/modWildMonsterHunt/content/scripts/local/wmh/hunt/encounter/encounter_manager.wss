function WMH_getEncounterManager(): WMH_EncounterManager {
  return thePlayer.wmh.hunt.encounters;
}

statemachine class WMH_EncounterManager {
  protected var encounters: array<WMH_Encounter>;
  protected var encounter_clues: array<WMH_EncounterClues>;
  protected var repulsive_points: array<Vector>;

  public function init(): WMH_EncounterManager {
    this.GotoState('Waiting');
    return this;
  }

  public function onEncounterSpawned(encounter: WMH_Encounter) {
    this.encounters.PushBack(encounter);

    if (this.GetCurrentStateName() == 'Waiting') {
      this.GotoState('Running');
    }
  }

  public function onCluesSpawned(encounter_clues: WMH_EncounterClues) {
    this.encounter_clues.PushBack(encounter_clues);
  }

  public function onLureSpawned(encounter_lure: WMH_EncounterLure) {
    this.onEncounterSpawned(encounter_lure);
  }

  public function onGuardedTreasureSpawned(
    encounter_guarded_treasure: WMH_GuardedTreasure
  ) {
    this.onEncounterSpawned(encounter_guarded_treasure);
  }

  public function onRepulsivePlaced(center: Vector) {
    this.repulsive_points.PushBack(center);
  }

  public function onHuntFinished() {
    this.GotoState('Finish');
  }

  public function onHuntStarted() {
    this.GotoState('Finish');
  }

  public function isInRepulsive(point: Vector): bool {
    for repulsive: Vector in this.repulsive_points {
      if (VecDistanceSquared2D(point, repulsive) <= 150 * 150) {
        return true;
      }
    }

    return false;
  }
}
