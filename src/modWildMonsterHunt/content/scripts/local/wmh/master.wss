statemachine class WMH_Master {
  public var spawn_points: WMH_SpawnPointManager;
  public var herbalist: WMH_HerbalistManager;
  public var contract: WMH_ContractManager;
  public var biomes: WMH_BiomeManager;
  public var bestiary: WMH_Bestiary;
  public var hunt: WMH_HuntManager;
  public var storage: WMH_Storage;
  public var logger: WMH_Logger;

  public function onCreate() {}

  public function onLoad() {
    this.storage = (new WMH_Storage in this).init();
    this.logger = (new WMH_Logger in this).init();
    WMHINFO("WMH_Master::OnLoad()");

    this.herbalist = (new WMH_HerbalistManager in this).init();
    this.biomes = (new WMH_BiomeManager in this).init();
    this.spawn_points = (new WMH_SpawnPointManager in this).init();
    this.bestiary = (new WMH_Bestiary in this).init();
    this.hunt = (new WMH_HuntManager in this).init();
    this.contract = (new WMH_ContractManager in this).init();
  }

  public function onSettlementEnter() {
    this.bestiary.maybeRefresh(this.biomes);
    this.contract.onSettlementEnter(this.bestiary, this.storage);
  }

  public function onSettlementExit() {
    this.bestiary.maybeRefresh(this.biomes);

    var index: int = 0;
    var hunt_seed_factory: WMH_HuntSeedFactory = WMH_HuntSeedFactory(
      this.storage.getLevel(),
      index,
      WMH_getGameTimeMinutes()
    );

    this.hunt.onHuntStarted(hunt_seed_factory);
  }

  public function submitOnSpawn(
    out hunt_manager: WMH_HuntManager,
    seed: int
  ) {
    this.spawn_points.maybeRefresh();
    this.bestiary.maybeRefresh(this.biomes);
    this.bestiary.spawnRandomEntry(
      this.biomes,
      this.spawn_points,
      seed
    );
  }

  public function submitOnHuntEnd(
    out hunt_manager: WMH_HuntManager
  ) {}
  
  public function submitOnHuntStart(
    out hunt_manager: WMH_HuntManager
  ) {}
}

