statemachine class WMH_Logger {
  protected var debug_oneliner: SU_OnelinerScreen;
  protected var messages_buffer: array<string>;


  public function init(): WMH_Logger {
    this.GotoState('Loading');
    return this;
  }

  public function log(message: string, optional level: WMH_LogLevel) {
    switch (level) {
      case WMHLL_Info:
        LogChannel('WMHINFO', message);
        this.bufferMessage("[WMHINFO] " + message);
        break;
      case WMHLL_Warning:
        LogChannel('WMHWARN', message);
        this.bufferMessage("[WMHWARN] " + message);
        break;
      case WMHLL_Error:
        LogChannel('WMHERR', message);
        this.bufferMessage("[WMHERR] " + message);
        break;
      case WMHLL_Hud:
        LogChannel('WMHHUD', message);
        this.bufferMessage("[WMHERR] " + message);
        break;
    }
  }

  private function bufferMessage(message: string) {
    // var hud: CR4ScriptedHud = theGame.GetHud() as CR4ScriptedHud;
	  // if(hud) {
    //   var module : CR4HudModuleConsole;
          
    //   module = hud.GetHudModule("ConsoleModule") as CR4HudModuleConsole;
    //   if (module) {
    //     module.ConsoleMsg(message);
    //   }
    // }

    this.messages_buffer.Insert(0, message);

    var size: int = this.messages_buffer.Size();
    if (size > 20) {
      this.messages_buffer.PopBack();
    }
  }
}

enum WMH_LogLevel {
  WMHLL_Info = 0,
  WMHLL_Warning = 1,
  WMHLL_Error = 2,
  WMHLL_Hud = 3
}

function WMHINFO(message: string) {
  #ifdef DEBUG {
    thePlayer.wmh.logger.log(message, WMHLL_Info);
  };
}

function WMHWARN(message: string) {
  thePlayer.wmh.logger.log(message, WMHLL_Warning);
}

function WMHERROR(message: string) {
  thePlayer.wmh.logger.log(message, WMHLL_Error);
}

function WMHHUD(message: string) {
  thePlayer.wmh.logger.log(message, WMHLL_Hud);
}

state Loading in WMH_Logger {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.Loading_main();
  }

  entry function Loading_main() {

    Sleep(5);
    parent.debug_oneliner = SU_onelinerScreen("", Vector(0.2, 1));
    parent.GotoState('Running');
  }
}

state Running in WMH_Logger {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.Running_main();
  }

  entry function Running_main() {
    while (true) {
      Sleep(5.0);

      if (parent.messages_buffer.Size() > 0) {
        var oneliner_text: string = "";
        var i: int;

        for (i = parent.messages_buffer.Size(); i >= 0; i -= 1) {
          oneliner_text += parent.messages_buffer[i] + "<br/>";
        }

        if (parent.debug_oneliner) {
          parent.debug_oneliner.text = "<FONT size='16'>"+oneliner_text+"</FONT>";
          parent.debug_oneliner.update();
        }
      }
    }
  }
}