statemachine class WMH_Logger {
  protected var debug_oneliner_0: SU_OnelinerScreen;
  protected var debug_oneliner_1: SU_OnelinerScreen;
  protected var debug_oneliner_2: SU_OnelinerScreen;
  protected var debug_oneliner_3: SU_OnelinerScreen;
  protected var messages_buffer: array<string>;


  public function init(): WMH_Logger {
    this.GotoState('Loading');
    return this;
  }

  public function log(message: string, optional level: WMH_LogLevel) {
    switch (level) {
      case WMHLL_Info:
        LogChannel('WMHINFO', message);
        this.bufferMessage(message);
        break;
      case WMHLL_Warning:
        LogChannel('WMHWARN', message);
        this.bufferMessage("[WMHWARN] " + message);
        break;
      case WMHLL_Error:
        LogChannel('WMHERR', message);
        this.bufferMessage("[WMHERR] " + message);
        break;
      case WMHLL_Hud:
        LogChannel('WMHHUD', message);
        this.bufferMessage("[WMHUD] " + message);
        GetWitcherPlayer().DisplayHudMessage(message);
        break;
    }
  }

  private function bufferMessage(message: string) {
    // var hud: CR4ScriptedHud = theGame.GetHud() as CR4ScriptedHud;
	  // if(hud) {
    //   var module : CR4HudModuleConsole;
          
    //   module = hud.GetHudModule("ConsoleModule") as CR4HudModuleConsole;
    //   if (module) {
    //     module.ConsoleMsg(message);
    //   }
    // }

    this.messages_buffer.Insert(0, message);

    var size: int = this.messages_buffer.Size();
    if (size > 20) {
      this.messages_buffer.PopBack();
    }
  }
}

enum WMH_LogLevel {
  WMHLL_Info = 0,
  WMHLL_Warning = 1,
  WMHLL_Error = 2,
  WMHLL_Hud = 3
}

function WMHINFO(message: string) {
  #ifdef DEBUG {
    thePlayer.wmh.logger.log(message, WMHLL_Info);
  };
}

function WMHWARN(message: string) {
  thePlayer.wmh.logger.log(message, WMHLL_Warning);
}

function WMHERROR(message: string) {
  thePlayer.wmh.logger.log(message, WMHLL_Error);
}

function WMHHUD(message: string) {
  thePlayer.wmh.logger.log(message, WMHLL_Hud);
}

function WMHPOPUP(message: string, optional duration: float) {
  theGame
  .GetGuiManager()
  .ShowNotification(message, duration);
}

state Loading in WMH_Logger {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.Loading_main();
  }

  entry function Loading_main() {

    Sleep(5);
    parent.debug_oneliner_0 = SU_onelinerScreen("", Vector(0.2, 0.8));
    parent.debug_oneliner_1 = SU_onelinerScreen("", Vector(0.4, 0.8));
    parent.debug_oneliner_2 = SU_onelinerScreen("", Vector(0.6, 0.8));
    parent.debug_oneliner_3 = SU_onelinerScreen("", Vector(0.8, 0.8));
    parent.GotoState('Running');
  }
}

state Running in WMH_Logger {
  event OnEnterState(previous_state_name: name) {
    super.OnEnterState(previous_state_name);
    this.Running_main();
  }

  entry function Running_main() {
    while (false) {
      Sleep(2.5);

      if (parent.messages_buffer.Size() > 0) {
        if (parent.debug_oneliner_0) {
          parent.debug_oneliner_0.text = this.buildOnelinerTest(0, 5);
          parent.debug_oneliner_0.update();
        }

        if (parent.debug_oneliner_1) {
          parent.debug_oneliner_1.text = this.buildOnelinerTest(5, 10);
          parent.debug_oneliner_1.update();
        }

        if (parent.debug_oneliner_2) {
          parent.debug_oneliner_2.text = this.buildOnelinerTest(10, 15);
          parent.debug_oneliner_2.update();
        }

        if (parent.debug_oneliner_3) {
          parent.debug_oneliner_3.text = this.buildOnelinerTest(15, 20);
          parent.debug_oneliner_3.update();
        }
      }
    }
  }

  private function buildOnelinerTest(from: int, to: int): string {
    var output: string;
    var i: int;

    for (i = from; i < to && i < parent.messages_buffer.Size(); i += 1) {
      output += parent.messages_buffer[i] + "<br/>";
    }

    return "<FONT size='16'>"+output+"</FONT>";
  }
}