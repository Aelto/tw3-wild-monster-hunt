
struct WMH_ItemQuantity {
  var item: name;
  var quantity: int;
}

struct WMH_RewardGroup {
  var reason: string;
  var items: array<WMH_ItemQuantity>;
  var experience: int;
  var reputation: float;
}


// A custom class to provide rewards to the player, it is used to slowly
// accumulate items in order to generate a final report after giving them to
// the player's inventory.
class WMH_RewardProvider {
  var groups: array<WMH_RewardGroup>;

  private var active_group: string;
  private var ignore_group: bool;

  public function startGroup(group: string): WMH_RewardProvider {
    if (!this.ignore_group) {
      this.active_group = group;
    }

    return this;
  }

  public function lockGroups(lock: bool): WMH_RewardProvider {
    this.ignore_group = lock;

    return this;
  }

  public function appendMoney(quantity: int): WMH_RewardProvider {
    return this.addMoney(this.active_group, quantity);
  }

  public function appendItem(item: name, quantity: int): WMH_RewardProvider {
    return this.addItem(this.active_group, item, quantity);
  }

  public function appendExperience(quantity: int): WMH_RewardProvider {
    return this.addExperience(this.active_group, quantity);
  }

  public function appendReputation(quantity: float): WMH_RewardProvider {
    return this.addReputation(this.active_group, quantity);
  }

  public function addMoney(reason: string, quantity: int): WMH_RewardProvider {
    return this.addItem(reason, 'Crowns', quantity);
  }

  public function addItem(
    reason: string,
    item: name,
    quantity: int
  ): WMH_RewardProvider {
    var i: int;

    if (quantity == 0 || !IsNameValid(item)) {
      return this;
    }

    for (i = 0; i < this.groups.Size(); i += 1) {
      if (this.groups[i].reason == reason) {
        var k: int;

        // increase the quantity if the item is already in the list
        for (k = 0; k < this.groups[i].items.Size(); k += 1) {
          if (this.groups[i].items[k].item == item) {
            this.groups[i].items[k].quantity += quantity;

            return this;
          }
        }

        // otherwise add a new entry
        this.groups[i].items.PushBack(WMH_ItemQuantity(item, quantity));

        return this;
      }
    }

    // no group with the given name was found, add it
    this.groups.PushBack(WMH_RewardGroup(reason));
    this.groups[this.groups.Size() - 1].items
      .PushBack(WMH_ItemQuantity(item, quantity));


    return this;
  }

  public function addExperience(
    reason: string,
    quantity: int
  ): WMH_RewardProvider {
    var i: int;

    if (quantity <= 0) {
      return this;
    }

    for (i = 0; i < this.groups.Size(); i += 1) {
      if (this.groups[i].reason == reason) {
        this.groups[i].experience += quantity;
        return this;
      }
    }

    // no group with the given name was found, add it
    this.groups.PushBack(WMH_RewardGroup(reason));
    this.groups[this.groups.Size() - 1].experience += quantity;


    return this;
  }

  public function addReputation(
    reason: string,
    quantity: float
  ): WMH_RewardProvider {
    var i: int;

    if (quantity <= 0) {
      return this;
    }

    for (i = 0; i < this.groups.Size(); i += 1) {
      if (this.groups[i].reason == reason) {
        this.groups[i].float += quantity;
        return this;
      }
    }

    // no group with the given name was found, add it
    this.groups.PushBack(WMH_RewardGroup(reason));
    this.groups[this.groups.Size() - 1].float += quantity;


    return this;
  }

  public function toHtml(
    inventory: CInventoryComponent,
    optional skip_reason: bool,
    optional max_lines: int
  ): string {
    var message: string;
    var i: int;

    if (max_lines <= 0) {
      max_lines = 15;
    }

    var include_item_names: bool = this.countLines() < max_lines;
    

    for (i = 0; i < this.groups.Size(); i += 1) {
      if (!skip_reason) {
        message += "<u>" + this.groups[i].reason + "</u>";
      }

      if (this.groups[i].experience > 0) {
        message += "<br />&nbsp;&nbsp;&nbsp;&nbsp; XP &nbsp;&nbsp;&nbsp;&nbsp;"
                + "<font size='18'>"
                + WMH_leftPad(this.groups[i].experience, 3)
                + "</font>";
      }

      if (this.groups[i].reputation > 0) {
        if (WMH_getContractManager().hasPendingMilestoneContract()) {
          message += "<br/> milestone contract active: REP gains locked"
        }
        else {
          message += "<br />&nbsp;&nbsp;&nbsp;&nbsp; REP &nbsp;&nbsp;&nbsp;&nbsp;"
                  + "<font size='18'>"
                  + WMH_leftPad(FloorF(this.groups[i].reputation * 10) * 0.1, 3)
                  + "</font>";
        }
      }

      if (!include_item_names) {
        message += "<br/>";
      }

      var k: int;
      var items_counter: int;
      for (k = 0; k < this.groups[i].items.Size(); k += 1) {
        var item_icon: string = "<img src='img://"
                  + inventory.GetItemIconPathByName(this.groups[i].items[k].item)
                  + "' height='48' width='48' vspace='-24' />";

        var item_count: string = "<font size='18'>"
                  + WMH_leftPad(this.groups[i].items[k].quantity, 3)
                  + "x</font> ";

        // a line break is added every 3 icons, or every line if item names are
        // included:
        items_counter += 1;
        if (items_counter >= 3 || include_item_names) {
          message += "<br/> ";
          items_counter = 0;
        }

        if (include_item_names) {
          message += item_icon
                  + item_count
                  + GetLocStringByKeyExt(
                    theGame.GetDefinitionsManager()
                    .GetItemLocalisationKeyName(this.groups[i].items[k].item)
                  );
        }
        else {
          message += " " + item_count + item_icon + "&nbsp;&nbsp;&nbsp;";
        }
      }

      message += "<br />";
    }

    return message;
  }

  public function transferItems(inventory: CInventoryComponent) {
    var total_experience: int = 0;
    var total_reputation: float = 0;
    var i: int;

    for (i = 0; i < this.groups.Size(); i += 1) {
      var k: int;
      for (k = 0; k < this.groups[i].items.Size(); k += 1) {
        if (this.groups[i].items[k].quantity > 0) {
          inventory.AddAnItem(
            this.groups[i].items[k].item,
            this.groups[i].items[k].quantity,
            false,
            false,
            true // show as reward
          );
        }
        else if (this.groups[i].items[k].quantity < 0) {
          inventory.RemoveItemByName(
            this.groups[i].items[k].item,
            Abs(this.groups[i].items[k].quantity)
          );
        }
      }

      total_experience += this.groups[i].experience;
      total_reputation += this.groups[i].reputation;
    }

    // experience is hardcoded for the player:
    if (total_experience > 0) {
      GetWitcherPlayer().AddPoints(EExperiencePoint, total_experience, true);
    }

    if (total_reputation > 0) {
      var contracts: WMH_ContractManager = WMH_getContractManager();

      if (!contracts.hasPendingMilestoneContract()) {
        var maximum: WMH_Level = contracts.getNextMilestoneLevel();
        var storage: WMH_Storage = WMH_getStorage();

        WMHINFO("transferItems, old reputation = " +  storage.general.level.value);
        storage.general.level.value = MinF(
          maximum_level.value,
          storage.general.level.value + total_reputation
        );
        WMHINFO("transferItems, new reputation = " +  storage.general.level.value);
      }
    }
  }

  public function countLines(optional skip_reason: bool): int {
    var output: int;
    var i: int;

    for (i = 0; i < this.groups.Size(); i += 1) {
      if (!skip_reason) {
        output += 1; // for the reason
      }

      output += this.groups[i].items.Size();
    }

    return output;
  }
}